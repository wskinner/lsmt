<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="869"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="869"> </text>
<g id="frames">
<g>
<title>all (5,047 samples, 100.00%)</title><rect x="10.0" y="835.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="846.0">all</text>
</g>
<g>
<title>MainKt.main (2 samples, 0.04%)</title><rect x="10.0" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>MainKt.main (2 samples, 0.04%)</title><rect x="10.0" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (2 samples, 0.04%)</title><rect x="10.5" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.5" y="830.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (2 samples, 0.04%)</title><rect x="10.5" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (40 samples, 0.79%)</title><rect x="12.1" y="819.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (40 samples, 0.79%)</title><rect x="12.1" y="803.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (40 samples, 0.79%)</title><rect x="12.1" y="787.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (40 samples, 0.79%)</title><rect x="12.1" y="771.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (40 samples, 0.79%)</title><rect x="12.1" y="755.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.1" y="766.0"></text>
</g>
<g>
<title>StandardSSTableManager$addTableAsync$1.run (40 samples, 0.79%)</title><rect x="12.1" y="739.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.1" y="750.0"></text>
</g>
<g>
<title>StandardSSTableManager.addTable (40 samples, 0.79%)</title><rect x="12.1" y="723.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="734.0"></text>
</g>
<g>
<title>StandardSSTableManager.nextTableFile (2 samples, 0.04%)</title><rect x="12.1" y="707.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.1" y="718.0"></text>
</g>
<g>
<title>java/io/File.list (2 samples, 0.04%)</title><rect x="12.1" y="691.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.1" y="702.0"></text>
</g>
<g>
<title>java/io/File.list (2 samples, 0.04%)</title><rect x="12.1" y="675.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.1" y="686.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.list (2 samples, 0.04%)</title><rect x="12.1" y="659.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="670.0"></text>
</g>
<g>
<title>Java_java_io_UnixFileSystem_list (2 samples, 0.04%)</title><rect x="12.1" y="643.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="15.1" y="654.0"></text>
</g>
<g>
<title>StandardSerializer.serialize (38 samples, 0.75%)</title><rect x="12.6" y="707.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.writeValue (37 samples, 0.73%)</title><rect x="12.6" y="691.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._writeValueAndClose (37 samples, 0.73%)</title><rect x="12.6" y="675.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.close (3 samples, 0.06%)</title><rect x="12.6" y="659.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.6" y="670.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.close (2 samples, 0.04%)</title><rect x="12.8" y="643.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.8" y="654.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.closeAll (2 samples, 0.04%)</title><rect x="12.8" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.8" y="638.0"></text>
</g>
<g>
<title>java/io/FileOutputStream$1.close (2 samples, 0.04%)</title><rect x="12.8" y="611.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="622.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close (2 samples, 0.04%)</title><rect x="12.8" y="595.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.8" y="606.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close0 (2 samples, 0.04%)</title><rect x="12.8" y="579.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.8" y="590.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.04%)</title><rect x="12.8" y="563.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="15.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.serializeValue (34 samples, 0.67%)</title><rect x="13.3" y="659.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider._serialize (34 samples, 0.67%)</title><rect x="13.3" y="643.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (34 samples, 0.67%)</title><rect x="13.3" y="627.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (34 samples, 0.67%)</title><rect x="13.3" y="611.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeWithoutTypeInfo (34 samples, 0.67%)</title><rect x="13.3" y="595.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeFields (34 samples, 0.67%)</title><rect x="13.3" y="579.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (21 samples, 0.42%)</title><rect x="13.5" y="563.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (21 samples, 0.42%)</title><rect x="13.5" y="547.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeWithoutTypeInfo (20 samples, 0.40%)</title><rect x="13.7" y="531.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeFields (20 samples, 0.40%)</title><rect x="13.7" y="515.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/NumberSerializers$IntegerSerializer.serialize (7 samples, 0.14%)</title><rect x="14.2" y="499.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeNumber (7 samples, 0.14%)</title><rect x="14.2" y="483.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._flushBuffer (5 samples, 0.10%)</title><rect x="14.4" y="467.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.4" y="478.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (5 samples, 0.10%)</title><rect x="14.4" y="451.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.4" y="462.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (5 samples, 0.10%)</title><rect x="14.4" y="435.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.4" y="446.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (5 samples, 0.10%)</title><rect x="14.4" y="419.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.4" y="430.0"></text>
</g>
<g>
<title>writeBytes (5 samples, 0.10%)</title><rect x="14.4" y="403.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="17.4" y="414.0"></text>
</g>
<g>
<title>write (4 samples, 0.08%)</title><rect x="14.7" y="387.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="17.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic.serialize (3 samples, 0.06%)</title><rect x="15.8" y="499.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$StringKeySerializer.serialize (2 samples, 0.04%)</title><rect x="16.1" y="483.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeFieldName (2 samples, 0.04%)</title><rect x="16.1" y="467.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._writeStringSegment (2 samples, 0.04%)</title><rect x="16.1" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StringSerializer.serialize (3 samples, 0.06%)</title><rect x="16.5" y="499.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeString (2 samples, 0.04%)</title><rect x="16.8" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.8" y="494.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (3 samples, 0.06%)</title><rect x="17.7" y="499.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic.serialize (7 samples, 0.14%)</title><rect x="18.4" y="563.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$StringKeySerializer.serialize (4 samples, 0.08%)</title><rect x="19.1" y="547.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeFieldName (3 samples, 0.06%)</title><rect x="19.4" y="531.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.4" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (5 samples, 0.10%)</title><rect x="20.1" y="563.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.1" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (5 samples, 0.10%)</title><rect x="20.1" y="547.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (5 samples, 0.10%)</title><rect x="20.1" y="531.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.1" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (5 samples, 0.10%)</title><rect x="20.1" y="515.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.1" y="526.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt$thread$thread$1.run (4,417 samples, 87.52%)</title><rect x="21.5" y="819.0" width="1032.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="830.0">kotlin/concurrent/ThreadsKt$thread$thread$1.run</text>
</g>
<g>
<title>MainKt$main$1.invoke (4,417 samples, 87.52%)</title><rect x="21.5" y="803.0" width="1032.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.5" y="814.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt$main$1.invoke (4,417 samples, 87.52%)</title><rect x="21.5" y="787.0" width="1032.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="798.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt.test (4,417 samples, 87.52%)</title><rect x="21.5" y="771.0" width="1032.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="782.0">MainKt.test</text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (2 samples, 0.04%)</title><rect x="24.3" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.3" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (9 samples, 0.18%)</title><rect x="25.2" y="755.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="28.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (6 samples, 0.12%)</title><rect x="25.7" y="739.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="28.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.04%)</title><rect x="25.9" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="28.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="25.9" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.9" y="718.0"></text>
</g>
<g>
<title>StandardLogStructuredMergeTree.put (4,352 samples, 86.23%)</title><rect x="27.5" y="755.0" width="1017.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.5" y="766.0">StandardLogStructuredMergeTree.put</text>
</g>
<g>
<title>StandardMemTable.put (55 samples, 1.09%)</title><rect x="28.0" y="739.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.0" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (55 samples, 1.09%)</title><rect x="28.0" y="723.0" width="12.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (5 samples, 0.10%)</title><rect x="32.4" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="35.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (4 samples, 0.08%)</title><rect x="32.7" y="691.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.7" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (31 samples, 0.61%)</title><rect x="33.6" y="707.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.6" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (27 samples, 0.53%)</title><rect x="34.5" y="691.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.5" y="702.0"></text>
</g>
<g>
<title>StandardWriteAheadLogManager.append (4,294 samples, 85.08%)</title><rect x="41.1" y="739.0" width="1003.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.1" y="750.0">StandardWriteAheadLogManager.append</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.writeValueAsBytes (318 samples, 6.30%)</title><rect x="41.3" y="723.0" width="74.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.3" y="734.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (15 samples, 0.30%)</title><rect x="41.3" y="707.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 0.26%)</title><rect x="41.8" y="691.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.&lt;init&gt; (4 samples, 0.08%)</title><rect x="42.3" y="675.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.&lt;init&gt; (4 samples, 0.08%)</title><rect x="42.3" y="659.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.08%)</title><rect x="43.2" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="46.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.06%)</title><rect x="43.4" y="659.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.&lt;init&gt; (3 samples, 0.06%)</title><rect x="44.1" y="675.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (3 samples, 0.06%)</title><rect x="44.1" y="659.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (3 samples, 0.06%)</title><rect x="44.1" y="643.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.04%)</title><rect x="44.8" y="707.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="47.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.04%)</title><rect x="44.8" y="691.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocByteBuffer (2 samples, 0.04%)</title><rect x="44.8" y="675.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocByteBuffer (2 samples, 0.04%)</title><rect x="44.8" y="659.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/ByteArrayBuilder.toByteArray (5 samples, 0.10%)</title><rect x="45.3" y="707.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.3" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (3 samples, 0.06%)</title><rect x="45.3" y="691.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.3" y="702.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (3 samples, 0.06%)</title><rect x="45.3" y="675.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.3" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (3 samples, 0.06%)</title><rect x="45.3" y="659.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.3" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedList.checkPositionIndex (2 samples, 0.04%)</title><rect x="45.5" y="643.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="48.5" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedList.isPositionIndex (2 samples, 0.04%)</title><rect x="45.5" y="627.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._writeValueAndClose (282 samples, 5.59%)</title><rect x="46.5" y="707.0" width="65.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.5" y="718.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.close (3 samples, 0.06%)</title><rect x="46.7" y="691.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._releaseBuffers (2 samples, 0.04%)</title><rect x="46.9" y="675.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.releaseWriteEncodingBuffer (2 samples, 0.04%)</title><rect x="46.9" y="659.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseByteBuffer (2 samples, 0.04%)</title><rect x="46.9" y="643.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._serializerProvider (19 samples, 0.38%)</title><rect x="47.4" y="691.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.createInstance (19 samples, 0.38%)</title><rect x="47.4" y="675.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.createInstance (19 samples, 0.38%)</title><rect x="47.4" y="659.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.&lt;init&gt; (19 samples, 0.38%)</title><rect x="47.4" y="643.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.&lt;init&gt; (18 samples, 0.36%)</title><rect x="47.6" y="627.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.&lt;init&gt; (18 samples, 0.36%)</title><rect x="47.6" y="611.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.getReadOnlyLookupMap (7 samples, 0.14%)</title><rect x="50.0" y="595.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache._makeReadOnlyLookupMap (7 samples, 0.14%)</title><rect x="50.0" y="579.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.from (4 samples, 0.08%)</title><rect x="50.2" y="563.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="53.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.&lt;init&gt; (4 samples, 0.08%)</title><rect x="50.2" y="547.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.serializeValue (259 samples, 5.13%)</title><rect x="51.9" y="691.0" width="60.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.9" y="702.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findTypedValueSerializer (167 samples, 3.31%)</title><rect x="51.9" y="675.0" width="39.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.9" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findValueSerializer (119 samples, 2.36%)</title><rect x="52.3" y="659.0" width="27.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.3" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createAndCacheUntypedSerializer (84 samples, 1.66%)</title><rect x="52.6" y="643.0" width="19.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createUntypedSerializer (80 samples, 1.59%)</title><rect x="52.6" y="627.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory.createSerializer (79 samples, 1.57%)</title><rect x="52.8" y="611.0" width="18.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.introspect (35 samples, 0.69%)</title><rect x="53.0" y="595.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (35 samples, 0.69%)</title><rect x="53.0" y="579.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (35 samples, 0.69%)</title><rect x="53.0" y="563.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdJdkCollectionDesc (35 samples, 0.69%)</title><rect x="53.0" y="547.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._isStdJDKCollection (3 samples, 0.06%)</title><rect x="53.0" y="531.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (3 samples, 0.06%)</title><rect x="53.0" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.06%)</title><rect x="53.0" y="499.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.04%)</title><rect x="53.3" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._resolveAnnotatedClass (32 samples, 0.63%)</title><rect x="53.7" y="531.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="56.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolve (32 samples, 0.63%)</title><rect x="53.7" y="515.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.&lt;init&gt; (14 samples, 0.28%)</title><rect x="53.7" y="499.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.findMixInClassFor (13 samples, 0.26%)</title><rect x="53.7" y="483.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.findMixInClassFor (13 samples, 0.26%)</title><rect x="53.7" y="467.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (10 samples, 0.20%)</title><rect x="53.7" y="451.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.7" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.getName (5 samples, 0.10%)</title><rect x="54.7" y="435.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.06%)</title><rect x="56.1" y="451.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.06%)</title><rect x="56.1" y="435.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveFully (18 samples, 0.36%)</title><rect x="57.0" y="499.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.&lt;init&gt; (3 samples, 0.06%)</title><rect x="57.0" y="483.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (13 samples, 0.26%)</title><rect x="57.7" y="483.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="60.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperInterfaces (6 samples, 0.12%)</title><rect x="58.2" y="467.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._contains (2 samples, 0.04%)</title><rect x="58.2" y="451.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="61.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBase.getInterfaces (4 samples, 0.08%)</title><rect x="58.6" y="451.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (4 samples, 0.08%)</title><rect x="59.6" y="467.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (2 samples, 0.04%)</title><rect x="60.0" y="451.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperInterfaces (2 samples, 0.04%)</title><rect x="60.0" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._contains (2 samples, 0.04%)</title><rect x="60.0" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (5 samples, 0.10%)</title><rect x="61.2" y="595.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (5 samples, 0.10%)</title><rect x="61.2" y="579.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.refineSerializationType (2 samples, 0.04%)</title><rect x="61.9" y="563.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findSerializerFromAnnotation (4 samples, 0.08%)</title><rect x="62.4" y="595.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (4 samples, 0.08%)</title><rect x="62.4" y="579.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (3 samples, 0.06%)</title><rect x="62.6" y="563.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory._createSerializer2 (34 samples, 0.67%)</title><rect x="63.3" y="595.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.buildContainerSerializer (31 samples, 0.61%)</title><rect x="63.3" y="579.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findContentSerializer (2 samples, 0.04%)</title><rect x="63.5" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findContentSerializer (2 samples, 0.04%)</title><rect x="63.5" y="547.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.buildMapSerializer (20 samples, 0.40%)</title><rect x="64.2" y="563.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicBeanDescription.findExpectedFormat (5 samples, 0.10%)</title><rect x="64.7" y="547.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="67.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.getDefaultPropertyFormat (3 samples, 0.06%)</title><rect x="64.9" y="531.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="67.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._checkMapContentInclusion (4 samples, 0.08%)</title><rect x="65.9" y="547.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findInclusionWithContent (2 samples, 0.04%)</title><rect x="66.3" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicBeanDescription.findPropertyInclusion (2 samples, 0.04%)</title><rect x="66.3" y="515.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findPropertyInclusion (2 samples, 0.04%)</title><rect x="66.3" y="499.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findPropertyInclusion (2 samples, 0.04%)</title><rect x="66.3" y="483.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findPropertyInclusion (2 samples, 0.04%)</title><rect x="66.3" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/annotation/JsonInclude$Value.getValueInclusion (2 samples, 0.04%)</title><rect x="66.3" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findFilterId (3 samples, 0.06%)</title><rect x="66.8" y="547.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findFilterId (3 samples, 0.06%)</title><rect x="66.8" y="531.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findFilterId (2 samples, 0.04%)</title><rect x="67.0" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory.customSerializers (3 samples, 0.06%)</title><rect x="67.5" y="547.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.serializers (2 samples, 0.04%)</title><rect x="67.7" y="531.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.construct (3 samples, 0.06%)</title><rect x="68.2" y="547.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createTypeSerializer (5 samples, 0.10%)</title><rect x="68.9" y="563.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.introspectClassAnnotations (4 samples, 0.08%)</title><rect x="68.9" y="547.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (3 samples, 0.06%)</title><rect x="68.9" y="531.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.06%)</title><rect x="68.9" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.06%)</title><rect x="68.9" y="499.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.06%)</title><rect x="68.9" y="483.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="71.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.04%)</title><rect x="69.2" y="467.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.04%)</title><rect x="69.2" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.04%)</title><rect x="69.2" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="72.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/MapLikeType.isTrueMapType (2 samples, 0.04%)</title><rect x="70.1" y="563.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.usesStaticTyping (2 samples, 0.04%)</title><rect x="70.6" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.addAndResolveNonTypedSerializer (3 samples, 0.06%)</title><rect x="71.5" y="627.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.06%)</title><rect x="71.5" y="611.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.06%)</title><rect x="71.5" y="595.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.5" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.04%)</title><rect x="71.5" y="579.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.handleSecondaryContextualization (30 samples, 0.59%)</title><rect x="72.2" y="643.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.createContextual (29 samples, 0.57%)</title><rect x="72.4" y="627.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (3 samples, 0.06%)</title><rect x="72.9" y="611.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.withResolved (5 samples, 0.10%)</title><rect x="73.6" y="611.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="76.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="73.6" y="595.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdSerializer.findContextualConvertingSerializer (18 samples, 0.36%)</title><rect x="74.8" y="611.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.setAttribute (3 samples, 0.06%)</title><rect x="75.0" y="595.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/ContextAttributes$Impl.withPerCallAttribute (3 samples, 0.06%)</title><rect x="75.0" y="579.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/ContextAttributes$Impl.nonSharedInstance (3 samples, 0.06%)</title><rect x="75.0" y="563.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.04%)</title><rect x="75.2" y="547.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.04%)</title><rect x="75.2" y="531.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.04%)</title><rect x="75.2" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.2" y="526.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (12 samples, 0.24%)</title><rect x="76.2" y="595.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.2" y="606.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (2 samples, 0.04%)</title><rect x="78.5" y="579.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (3 samples, 0.06%)</title><rect x="79.2" y="643.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.06%)</title><rect x="79.2" y="627.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.06%)</title><rect x="79.2" y="611.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.06%)</title><rect x="79.2" y="595.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.06%)</title><rect x="79.2" y="579.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.04%)</title><rect x="79.4" y="563.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (4 samples, 0.08%)</title><rect x="80.1" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.08%)</title><rect x="80.1" y="643.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.08%)</title><rect x="80.1" y="627.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.04%)</title><rect x="80.6" y="611.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="83.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createTypeSerializer (24 samples, 0.48%)</title><rect x="81.1" y="659.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.introspectClassAnnotations (24 samples, 0.48%)</title><rect x="81.1" y="643.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (4 samples, 0.08%)</title><rect x="81.1" y="627.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.08%)</title><rect x="81.1" y="611.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.08%)</title><rect x="81.1" y="595.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.08%)</title><rect x="81.1" y="579.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.06%)</title><rect x="81.3" y="563.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.06%)</title><rect x="81.3" y="547.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.introspectClassAnnotations (20 samples, 0.40%)</title><rect x="82.0" y="627.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forClassAnnotations (20 samples, 0.40%)</title><rect x="82.0" y="611.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forClassAnnotations (19 samples, 0.38%)</title><rect x="82.2" y="595.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._resolveAnnotatedClass (19 samples, 0.38%)</title><rect x="82.2" y="579.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolve (19 samples, 0.38%)</title><rect x="82.2" y="563.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.&lt;init&gt; (4 samples, 0.08%)</title><rect x="82.2" y="547.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.findMixInClassFor (4 samples, 0.08%)</title><rect x="82.2" y="531.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.findMixInClassFor (4 samples, 0.08%)</title><rect x="82.2" y="515.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (4 samples, 0.08%)</title><rect x="82.2" y="499.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveFully (15 samples, 0.30%)</title><rect x="83.2" y="547.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (9 samples, 0.18%)</title><rect x="83.4" y="531.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperInterfaces (3 samples, 0.06%)</title><rect x="83.6" y="515.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="86.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (2 samples, 0.04%)</title><rect x="84.3" y="515.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (2 samples, 0.04%)</title><rect x="84.3" y="499.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveClassAnnotations (5 samples, 0.10%)</title><rect x="85.5" y="531.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.findMixInClassFor (3 samples, 0.06%)</title><rect x="86.0" y="515.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.findMixInClassFor (3 samples, 0.06%)</title><rect x="86.0" y="499.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (2 samples, 0.04%)</title><rect x="86.0" y="483.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.addTypedSerializer (10 samples, 0.20%)</title><rect x="86.7" y="659.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.&lt;init&gt; (8 samples, 0.16%)</title><rect x="86.9" y="643.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.typedHash (8 samples, 0.16%)</title><rect x="86.9" y="627.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.9" y="638.0"></text>
</g>
<g>
<title>java/lang/Class.getName (8 samples, 0.16%)</title><rect x="86.9" y="611.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.9" y="622.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.06%)</title><rect x="86.9" y="595.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="89.9" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.10%)</title><rect x="87.6" y="595.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="90.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.typedValueSerializer (7 samples, 0.14%)</title><rect x="89.0" y="659.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.findSize (2 samples, 0.04%)</title><rect x="89.3" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.&lt;init&gt; (2 samples, 0.04%)</title><rect x="89.7" y="643.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.04%)</title><rect x="90.2" y="643.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.04%)</title><rect x="90.2" y="627.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider._serialize (92 samples, 1.82%)</title><rect x="90.9" y="675.0" width="21.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.9" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (90 samples, 1.78%)</title><rect x="91.4" y="659.0" width="21.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.4" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (90 samples, 1.78%)</title><rect x="91.4" y="643.0" width="21.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="94.4" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeStartObject (2 samples, 0.04%)</title><rect x="91.6" y="627.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="94.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeWithoutTypeInfo (87 samples, 1.72%)</title><rect x="92.1" y="627.0" width="20.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeFields (87 samples, 1.72%)</title><rect x="92.1" y="611.0" width="20.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="95.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer._findSerializer (56 samples, 1.11%)</title><rect x="92.8" y="595.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer._findAndAddDynamic (55 samples, 1.09%)</title><rect x="93.0" y="579.0" width="12.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.findAndAddSecondarySerializer (54 samples, 1.07%)</title><rect x="93.2" y="563.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findContentValueSerializer (51 samples, 1.01%)</title><rect x="93.2" y="547.0" width="12.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createAndCacheUntypedSerializer (30 samples, 0.59%)</title><rect x="93.2" y="531.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createUntypedSerializer (20 samples, 0.40%)</title><rect x="93.2" y="515.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory.createSerializer (20 samples, 0.40%)</title><rect x="93.2" y="499.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.introspect (3 samples, 0.06%)</title><rect x="93.5" y="483.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (3 samples, 0.06%)</title><rect x="93.5" y="467.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (3 samples, 0.06%)</title><rect x="93.5" y="451.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdTypeDesc (2 samples, 0.04%)</title><rect x="93.7" y="435.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (2 samples, 0.04%)</title><rect x="93.7" y="419.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="96.7" y="430.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.04%)</title><rect x="93.7" y="403.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.04%)</title><rect x="93.7" y="387.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.04%)</title><rect x="93.7" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.getAnnotationIntrospector (4 samples, 0.08%)</title><rect x="94.2" y="483.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (2 samples, 0.04%)</title><rect x="95.1" y="483.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (2 samples, 0.04%)</title><rect x="95.1" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findSerializerFromAnnotation (6 samples, 0.12%)</title><rect x="95.6" y="483.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.getAnnotationIntrospector (2 samples, 0.04%)</title><rect x="96.0" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (2 samples, 0.04%)</title><rect x="96.5" y="467.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (2 samples, 0.04%)</title><rect x="96.5" y="451.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory._createSerializer2 (4 samples, 0.08%)</title><rect x="97.0" y="483.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinSerializers.findSerializer (4 samples, 0.08%)</title><rect x="97.0" y="467.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (5 samples, 0.10%)</title><rect x="97.9" y="515.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.10%)</title><rect x="97.9" y="499.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.10%)</title><rect x="97.9" y="483.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.10%)</title><rect x="97.9" y="467.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.10%)</title><rect x="97.9" y="451.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.08%)</title><rect x="98.1" y="435.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.addAndResolveNonTypedSerializer (5 samples, 0.10%)</title><rect x="99.1" y="515.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.10%)</title><rect x="99.1" y="499.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.10%)</title><rect x="99.1" y="483.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.06%)</title><rect x="99.5" y="467.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (2 samples, 0.04%)</title><rect x="99.8" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (4 samples, 0.08%)</title><rect x="100.5" y="531.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.08%)</title><rect x="100.5" y="515.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.08%)</title><rect x="100.5" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.06%)</title><rect x="100.7" y="483.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="103.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.04%)</title><rect x="100.9" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.04%)</title><rect x="100.9" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.untypedValueSerializer (4 samples, 0.08%)</title><rect x="101.4" y="531.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="104.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.06%)</title><rect x="101.7" y="515.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="104.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.untypedValueSerializer (12 samples, 0.24%)</title><rect x="102.4" y="531.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="105.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.untypedHash (12 samples, 0.24%)</title><rect x="102.4" y="515.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Class.getName (5 samples, 0.10%)</title><rect x="102.8" y="499.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap$Empty.serializerFor (3 samples, 0.06%)</title><rect x="103.3" y="483.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.10%)</title><rect x="104.0" y="499.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.0" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.08%)</title><rect x="104.2" y="483.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap$Empty.newWith (2 samples, 0.04%)</title><rect x="105.2" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap$Single.&lt;init&gt; (2 samples, 0.04%)</title><rect x="105.2" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/NumberSerializers$IntegerSerializer.serialize (2 samples, 0.04%)</title><rect x="105.9" y="595.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeNumber (2 samples, 0.04%)</title><rect x="105.9" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="108.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberOutput.outputInt (2 samples, 0.04%)</title><rect x="105.9" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberOutput._leading3 (2 samples, 0.04%)</title><rect x="105.9" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic.serialize (12 samples, 0.24%)</title><rect x="106.3" y="595.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic._findAndAddDynamic (9 samples, 0.18%)</title><rect x="106.8" y="579.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.findAndAddKeySerializer (9 samples, 0.18%)</title><rect x="106.8" y="563.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (7 samples, 0.14%)</title><rect x="106.8" y="547.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (6 samples, 0.12%)</title><rect x="106.8" y="531.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="109.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createKeySerializer (5 samples, 0.10%)</title><rect x="107.0" y="515.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="110.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findKeySerializer (4 samples, 0.08%)</title><rect x="107.0" y="499.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (4 samples, 0.08%)</title><rect x="107.0" y="483.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (4 samples, 0.08%)</title><rect x="107.0" y="467.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findKeySerializer (4 samples, 0.08%)</title><rect x="107.0" y="451.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap$Empty.newWith (2 samples, 0.04%)</title><rect x="108.4" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StringSerializer.serialize (8 samples, 0.16%)</title><rect x="109.1" y="595.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="112.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeString (5 samples, 0.10%)</title><rect x="109.8" y="579.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="112.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._writeStringSegment (2 samples, 0.04%)</title><rect x="110.5" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.5" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (4 samples, 0.08%)</title><rect x="111.0" y="595.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.0" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (4 samples, 0.08%)</title><rect x="111.0" y="579.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.0" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (4 samples, 0.08%)</title><rect x="111.0" y="563.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createGenerator (14 samples, 0.28%)</title><rect x="112.4" y="707.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="115.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createGenerator (13 samples, 0.26%)</title><rect x="112.4" y="691.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="115.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.06%)</title><rect x="112.6" y="675.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.06%)</title><rect x="112.6" y="659.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.04%)</title><rect x="112.9" y="643.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="115.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createUTF8Generator (9 samples, 0.18%)</title><rect x="113.3" y="675.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.&lt;init&gt; (9 samples, 0.18%)</title><rect x="113.3" y="659.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="116.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.allocConcatBuffer (2 samples, 0.04%)</title><rect x="113.6" y="643.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.04%)</title><rect x="113.6" y="627.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.04%)</title><rect x="113.6" y="611.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.allocWriteEncodingBuffer (3 samples, 0.06%)</title><rect x="114.0" y="643.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="117.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocByteBuffer (3 samples, 0.06%)</title><rect x="114.0" y="627.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocByteBuffer (3 samples, 0.06%)</title><rect x="114.0" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (2 samples, 0.04%)</title><rect x="114.3" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.3" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LIL_L (2 samples, 0.04%)</title><rect x="114.3" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonGeneratorImpl.&lt;init&gt; (3 samples, 0.06%)</title><rect x="114.7" y="643.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/GeneratorBase.&lt;init&gt; (2 samples, 0.04%)</title><rect x="115.0" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ExtensionsKt.jacksonObjectMapper (167 samples, 3.31%)</title><rect x="115.7" y="723.0" width="39.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.7" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.&lt;clinit&gt; (4 samples, 0.08%)</title><rect x="115.7" y="707.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/StdDateFormat.&lt;clinit&gt; (2 samples, 0.04%)</title><rect x="115.9" y="691.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="118.9" y="702.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.&lt;init&gt; (2 samples, 0.04%)</title><rect x="115.9" y="675.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="118.9" y="686.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.initializeCalendar (2 samples, 0.04%)</title><rect x="115.9" y="659.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.9" y="670.0"></text>
</g>
<g>
<title>java/util/Calendar.getInstance (2 samples, 0.04%)</title><rect x="115.9" y="643.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.9" y="654.0"></text>
</g>
<g>
<title>java/util/Calendar.createCalendar (2 samples, 0.04%)</title><rect x="115.9" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.9" y="638.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarProviderImpl.getInstance (2 samples, 0.04%)</title><rect x="115.9" y="611.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.9" y="622.0"></text>
</g>
<g>
<title>java/util/Calendar$Builder.build (2 samples, 0.04%)</title><rect x="115.9" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.9" y="606.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.&lt;init&gt; (2 samples, 0.04%)</title><rect x="115.9" y="579.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.9" y="590.0"></text>
</g>
<g>
<title>java/util/Calendar.&lt;init&gt; (2 samples, 0.04%)</title><rect x="115.9" y="563.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.9" y="574.0"></text>
</g>
<g>
<title>java/util/Calendar.setWeekCountData (2 samples, 0.04%)</title><rect x="115.9" y="547.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.9" y="558.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarDataUtility.retrieveFirstDayOfWeek (2 samples, 0.04%)</title><rect x="115.9" y="531.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.9" y="542.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObject (2 samples, 0.04%)</title><rect x="115.9" y="515.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.9" y="526.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObjectImpl (2 samples, 0.04%)</title><rect x="115.9" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.&lt;init&gt; (63 samples, 1.25%)</title><rect x="116.6" y="707.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.&lt;init&gt; (62 samples, 1.23%)</title><rect x="116.8" y="691.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.&lt;init&gt; (2 samples, 0.04%)</title><rect x="117.5" y="675.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="120.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/MappingJsonFactory.&lt;init&gt; (23 samples, 0.46%)</title><rect x="118.0" y="675.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.&lt;init&gt; (23 samples, 0.46%)</title><rect x="118.0" y="659.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="121.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.createRoot (6 samples, 0.12%)</title><rect x="118.5" y="643.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.createRoot (6 samples, 0.12%)</title><rect x="118.5" y="627.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="121.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="118.5" y="611.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer$TableInfo.createInitial (6 samples, 0.12%)</title><rect x="118.5" y="595.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.createRoot (15 samples, 0.30%)</title><rect x="119.9" y="643.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.createRoot (15 samples, 0.30%)</title><rect x="119.9" y="627.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.&lt;init&gt; (15 samples, 0.30%)</title><rect x="119.9" y="611.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.04%)</title><rect x="122.0" y="595.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="125.0" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.04%)</title><rect x="122.0" y="579.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="125.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.04%)</title><rect x="122.0" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="125.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.04%)</title><rect x="122.0" y="547.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="125.0" y="558.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.04%)</title><rect x="122.0" y="531.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="125.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.&lt;init&gt; (3 samples, 0.06%)</title><rect x="122.7" y="595.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.&lt;init&gt; (11 samples, 0.22%)</title><rect x="123.4" y="675.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.&lt;init&gt; (10 samples, 0.20%)</title><rect x="123.4" y="659.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/ContextAttributes.getEmpty (2 samples, 0.04%)</title><rect x="124.8" y="643.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="127.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.&lt;init&gt; (2 samples, 0.04%)</title><rect x="125.3" y="643.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withClassIntrospector (2 samples, 0.04%)</title><rect x="126.0" y="675.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.&lt;init&gt; (2 samples, 0.04%)</title><rect x="126.0" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.&lt;clinit&gt; (2 samples, 0.04%)</title><rect x="126.7" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.&lt;clinit&gt; (2 samples, 0.04%)</title><rect x="126.7" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.&lt;clinit&gt; (2 samples, 0.04%)</title><rect x="127.6" y="675.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="130.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/RootNameLookup.&lt;init&gt; (2 samples, 0.04%)</title><rect x="128.3" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.&lt;init&gt; (2 samples, 0.04%)</title><rect x="128.3" y="659.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (6 samples, 0.12%)</title><rect x="128.8" y="675.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="131.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (6 samples, 0.12%)</title><rect x="128.8" y="659.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="131.8" y="670.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (6 samples, 0.12%)</title><rect x="128.8" y="643.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (6 samples, 0.12%)</title><rect x="128.8" y="627.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (6 samples, 0.12%)</title><rect x="128.8" y="611.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="131.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (6 samples, 0.12%)</title><rect x="128.8" y="595.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (5 samples, 0.10%)</title><rect x="129.0" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.0" y="590.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (5 samples, 0.10%)</title><rect x="129.0" y="563.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.0" y="574.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInflaterInputStream.fill (4 samples, 0.08%)</title><rect x="129.2" y="547.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.2" y="558.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInputStream.read (4 samples, 0.08%)</title><rect x="129.2" y="531.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="132.2" y="542.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.readAt (3 samples, 0.06%)</title><rect x="129.2" y="515.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.2" y="526.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.read (3 samples, 0.06%)</title><rect x="129.2" y="499.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.2" y="510.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.readBytes (3 samples, 0.06%)</title><rect x="129.2" y="483.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.2" y="494.0"></text>
</g>
<g>
<title>readBytes (3 samples, 0.06%)</title><rect x="129.2" y="467.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="132.2" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (3 samples, 0.06%)</title><rect x="129.2" y="451.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="132.2" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.10%)</title><rect x="130.2" y="675.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="133.2" y="686.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.08%)</title><rect x="130.4" y="659.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="133.4" y="670.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (4 samples, 0.08%)</title><rect x="130.4" y="643.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="133.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ExtensionsKt.registerKotlinModule (95 samples, 1.88%)</title><rect x="131.3" y="707.0" width="22.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.3" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.registerModule (90 samples, 1.78%)</title><rect x="131.6" y="691.0" width="21.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.6" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinModule.setupModule (70 samples, 1.39%)</title><rect x="133.0" y="675.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="136.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.addDeserializers (4 samples, 0.08%)</title><rect x="133.7" y="659.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.with (3 samples, 0.06%)</title><rect x="133.9" y="643.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="136.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.06%)</title><rect x="133.9" y="627.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="136.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.06%)</title><rect x="133.9" y="611.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.04%)</title><rect x="134.1" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="137.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.addSerializers (2 samples, 0.04%)</title><rect x="134.6" y="659.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.addValueInstantiators (10 samples, 0.20%)</title><rect x="135.1" y="659.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.withValueInstantiators (9 samples, 0.18%)</title><rect x="135.1" y="643.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="138.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.withValueInstantiators (8 samples, 0.16%)</title><rect x="135.1" y="627.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="138.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.&lt;init&gt; (2 samples, 0.04%)</title><rect x="135.1" y="611.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="138.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ArrayBuilders.insertInListNoDup (6 samples, 0.12%)</title><rect x="135.6" y="611.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.appendAnnotationIntrospector (6 samples, 0.12%)</title><rect x="137.4" y="659.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="140.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.withAppendedAnnotationIntrospector (6 samples, 0.12%)</title><rect x="137.4" y="643.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="140.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withAppendedAnnotationIntrospector (5 samples, 0.10%)</title><rect x="137.7" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withAnnotationIntrospector (4 samples, 0.08%)</title><rect x="137.7" y="611.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="140.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.&lt;init&gt; (3 samples, 0.06%)</title><rect x="137.9" y="595.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.insertAnnotationIntrospector (9 samples, 0.18%)</title><rect x="138.8" y="659.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.withInsertedAnnotationIntrospector (9 samples, 0.18%)</title><rect x="138.8" y="643.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="141.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig._withBase (2 samples, 0.04%)</title><rect x="138.8" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="141.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig._withBase (2 samples, 0.04%)</title><rect x="138.8" y="611.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.&lt;init&gt; (2 samples, 0.04%)</title><rect x="138.8" y="595.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="141.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.&lt;init&gt; (2 samples, 0.04%)</title><rect x="138.8" y="579.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.&lt;init&gt; (2 samples, 0.04%)</title><rect x="138.8" y="563.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig._withBase (3 samples, 0.06%)</title><rect x="139.3" y="627.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig._withBase (3 samples, 0.06%)</title><rect x="139.3" y="611.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.&lt;init&gt; (3 samples, 0.06%)</title><rect x="139.3" y="595.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="142.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withInsertedAnnotationIntrospector (4 samples, 0.08%)</title><rect x="140.0" y="627.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withAnnotationIntrospector (3 samples, 0.06%)</title><rect x="140.0" y="611.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="143.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.&lt;init&gt; (3 samples, 0.06%)</title><rect x="140.0" y="595.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="143.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/module/SimpleModule.setupModule (3 samples, 0.06%)</title><rect x="140.9" y="659.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="143.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinModule$setupModule$1.invoke (15 samples, 0.30%)</title><rect x="141.6" y="659.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="144.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.setMixInAnnotations (14 samples, 0.28%)</title><rect x="141.6" y="643.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="144.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.addMixIn (14 samples, 0.28%)</title><rect x="141.6" y="627.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="144.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.addLocalDefinition (14 samples, 0.28%)</title><rect x="141.6" y="611.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (3 samples, 0.06%)</title><rect x="141.6" y="595.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="144.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.04%)</title><rect x="141.9" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 0.22%)</title><rect x="142.3" y="595.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.14%)</title><rect x="142.3" y="579.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.hashCode (5 samples, 0.10%)</title><rect x="142.8" y="563.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="145.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.08%)</title><rect x="144.0" y="579.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="147.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.04%)</title><rect x="144.2" y="563.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ReflectionCache.&lt;init&gt; (16 samples, 0.32%)</title><rect x="145.4" y="659.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.&lt;init&gt; (13 samples, 0.26%)</title><rect x="145.8" y="643.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.&lt;init&gt; (3 samples, 0.06%)</title><rect x="146.5" y="627.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.&lt;init&gt; (7 samples, 0.14%)</title><rect x="147.2" y="627.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.12%)</title><rect x="149.3" y="675.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.12%)</title><rect x="149.3" y="659.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.12%)</title><rect x="149.3" y="643.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.3" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (3 samples, 0.06%)</title><rect x="150.0" y="627.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.0" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (8 samples, 0.16%)</title><rect x="150.7" y="675.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="153.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (8 samples, 0.16%)</title><rect x="150.7" y="659.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.7" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (6 samples, 0.12%)</title><rect x="151.2" y="643.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (6 samples, 0.12%)</title><rect x="151.2" y="627.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.2" y="638.0"></text>
</g>
<g>
<title>java/util/AbstractMap.&lt;init&gt; (2 samples, 0.04%)</title><rect x="151.7" y="611.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.tableSizeFor (2 samples, 0.04%)</title><rect x="152.2" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinModule.&lt;init&gt; (2 samples, 0.04%)</title><rect x="152.6" y="691.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="155.6" y="702.0"></text>
</g>
<g>
<title>kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (2 samples, 0.04%)</title><rect x="153.1" y="691.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (4 samples, 0.08%)</title><rect x="153.8" y="707.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (4 samples, 0.08%)</title><rect x="153.8" y="691.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (4 samples, 0.08%)</title><rect x="153.8" y="675.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (4 samples, 0.08%)</title><rect x="153.8" y="659.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.8" y="670.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (4 samples, 0.08%)</title><rect x="153.8" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (4 samples, 0.08%)</title><rect x="153.8" y="627.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.8" y="638.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (2 samples, 0.04%)</title><rect x="153.8" y="611.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (2 samples, 0.04%)</title><rect x="153.8" y="595.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (2 samples, 0.04%)</title><rect x="153.8" y="579.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="156.8" y="590.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.sync (2,206 samples, 43.71%)</title><rect x="154.7" y="723.0" width="515.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="157.7" y="734.0">java/io/FileDescriptor.sync</text>
</g>
<g>
<title>Java_java_io_FileDescriptor_sync (7 samples, 0.14%)</title><rect x="161.3" y="707.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="164.3" y="718.0"></text>
</g>
<g>
<title>fsync (2,171 samples, 43.02%)</title><rect x="162.9" y="707.0" width="507.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="165.9" y="718.0">fsync</text>
</g>
<g>
<title>java/io/FileOutputStream.write (1,598 samples, 31.66%)</title><rect x="670.7" y="723.0" width="373.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="673.7" y="734.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1,596 samples, 31.62%)</title><rect x="671.2" y="707.0" width="373.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="674.2" y="718.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1,576 samples, 31.23%)</title><rect x="675.9" y="691.0" width="368.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="678.9" y="702.0">Java_java_io_FileOutputStream_writeBytes</text>
</g>
<g>
<title>jni_ExceptionOccurred (4 samples, 0.08%)</title><rect x="676.6" y="675.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="679.6" y="686.0"></text>
</g>
<g>
<title>jni_GetArrayLength (5 samples, 0.10%)</title><rect x="677.5" y="675.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="680.5" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.08%)</title><rect x="678.7" y="675.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="681.7" y="686.0"></text>
</g>
<g>
<title>jni_GetObjectField (2 samples, 0.04%)</title><rect x="679.6" y="675.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="682.6" y="686.0"></text>
</g>
<g>
<title>writeBytes (1,558 samples, 30.87%)</title><rect x="680.1" y="675.0" width="364.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="683.1" y="686.0">writeBytes</text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.04%)</title><rect x="684.5" y="659.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="687.5" y="670.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.12%)</title><rect x="685.0" y="659.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="688.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="686.4" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="689.4" y="670.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.04%)</title><rect x="686.9" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="689.9" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.10%)</title><rect x="687.3" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="690.3" y="670.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.06%)</title><rect x="689.0" y="659.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="692.0" y="670.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="689.7" y="659.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="692.7" y="670.0"></text>
</g>
<g>
<title>handleWrite (7 samples, 0.14%)</title><rect x="690.1" y="659.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="693.1" y="670.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (20 samples, 0.40%)</title><rect x="691.8" y="659.0" width="4.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="694.8" y="670.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.04%)</title><rect x="694.1" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="697.1" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.12%)</title><rect x="694.8" y="643.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="697.8" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.08%)</title><rect x="695.3" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="698.3" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.08%)</title><rect x="695.3" y="611.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="698.3" y="622.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.08%)</title><rect x="695.3" y="595.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.3" y="606.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="695.5" y="579.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.5" y="590.0"></text>
</g>
<g>
<title>jni_GetArrayLength (21 samples, 0.42%)</title><rect x="696.4" y="659.0" width="5.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="699.4" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (13 samples, 0.26%)</title><rect x="697.8" y="643.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="700.8" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (11 samples, 0.22%)</title><rect x="698.3" y="627.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="701.3" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (10 samples, 0.20%)</title><rect x="698.5" y="611.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="701.5" y="622.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (9 samples, 0.18%)</title><rect x="698.8" y="595.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="701.8" y="606.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (8 samples, 0.16%)</title><rect x="699.0" y="579.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="702.0" y="590.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.06%)</title><rect x="699.5" y="563.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="702.5" y="574.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.06%)</title><rect x="700.2" y="563.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.2" y="574.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="700.4" y="547.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="703.4" y="558.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (32 samples, 0.63%)</title><rect x="701.4" y="659.0" width="7.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="704.4" y="670.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.04%)</title><rect x="705.6" y="643.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="708.6" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.12%)</title><rect x="706.0" y="643.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="709.0" y="654.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.08%)</title><rect x="706.5" y="627.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="709.5" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.08%)</title><rect x="706.5" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="709.5" y="622.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.08%)</title><rect x="706.5" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="709.5" y="606.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.08%)</title><rect x="706.5" y="579.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="709.5" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="707.0" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="710.0" y="574.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="707.4" y="643.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="710.4" y="654.0"></text>
</g>
<g>
<title>jni_GetObjectField (43 samples, 0.85%)</title><rect x="708.8" y="659.0" width="10.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="711.8" y="670.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.04%)</title><rect x="710.9" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="713.9" y="654.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (6 samples, 0.12%)</title><rect x="712.1" y="643.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="715.1" y="654.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (5 samples, 0.10%)</title><rect x="714.2" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="717.2" y="654.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.04%)</title><rect x="715.4" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="718.4" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (11 samples, 0.22%)</title><rect x="716.3" y="643.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="719.3" y="654.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.08%)</title><rect x="716.3" y="627.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="719.3" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.12%)</title><rect x="717.5" y="627.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="720.5" y="638.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.12%)</title><rect x="717.5" y="611.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="720.5" y="622.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.12%)</title><rect x="717.5" y="595.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="720.5" y="606.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.12%)</title><rect x="717.5" y="579.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="720.5" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (3 samples, 0.06%)</title><rect x="718.2" y="563.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="721.2" y="574.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="718.4" y="547.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="721.4" y="558.0"></text>
</g>
<g>
<title>write (1,392 samples, 27.58%)</title><rect x="718.9" y="659.0" width="325.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="721.9" y="670.0">write</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.04%)</title><rect x="1044.6" y="723.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.04%)</title><rect x="1044.6" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.6" y="718.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.04%)</title><rect x="1044.6" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1047.6" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.04%)</title><rect x="1044.6" y="675.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1047.6" y="686.0"></text>
</g>
<g>
<title>java/io/PrintStream.println (2 samples, 0.04%)</title><rect x="1045.0" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1048.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.10%)</title><rect x="1046.0" y="755.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1049.0" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.08%)</title><rect x="1046.2" y="739.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1049.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.06%)</title><rect x="1047.1" y="755.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1050.1" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="1047.8" y="755.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1050.8" y="766.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.mapOf (22 samples, 0.44%)</title><rect x="1049.0" y="755.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1052.0" y="766.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.toMap (20 samples, 0.40%)</title><rect x="1049.5" y="739.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1052.5" y="750.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.putAll (19 samples, 0.38%)</title><rect x="1049.7" y="723.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1052.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (19 samples, 0.38%)</title><rect x="1049.7" y="707.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1052.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (19 samples, 0.38%)</title><rect x="1049.7" y="691.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (6 samples, 0.12%)</title><rect x="1050.9" y="675.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.9" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (7 samples, 0.14%)</title><rect x="1052.5" y="675.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.5" y="686.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndCallPremain (2 samples, 0.04%)</title><rect x="1054.2" y="819.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.2" y="830.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndStartAgent (2 samples, 0.04%)</title><rect x="1054.2" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1057.2" y="814.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.04%)</title><rect x="1054.2" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.04%)</title><rect x="1054.2" y="771.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1057.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.04%)</title><rect x="1054.2" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1057.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.04%)</title><rect x="1054.2" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1057.2" y="750.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.04%)</title><rect x="1054.2" y="723.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1057.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (2 samples, 0.04%)</title><rect x="1054.2" y="707.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1057.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getLoader (2 samples, 0.04%)</title><rect x="1054.2" y="691.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1057.2" y="702.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getLoader (2 samples, 0.04%)</title><rect x="1054.2" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.2" y="686.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.04%)</title><rect x="1054.2" y="659.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1057.2" y="670.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (2 samples, 0.04%)</title><rect x="1054.2" y="643.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1057.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$3.run (2 samples, 0.04%)</title><rect x="1054.2" y="627.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1057.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$3.run (2 samples, 0.04%)</title><rect x="1054.2" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1057.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1054.2" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1057.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.ensureOpen (2 samples, 0.04%)</title><rect x="1054.2" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1057.2" y="590.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.04%)</title><rect x="1054.2" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1057.2" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (2 samples, 0.04%)</title><rect x="1054.2" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1057.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader$1.run (2 samples, 0.04%)</title><rect x="1054.2" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1057.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader$1.run (2 samples, 0.04%)</title><rect x="1054.2" y="515.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1057.2" y="526.0"></text>
</g>
<g>
<title>thread_start (579 samples, 11.47%)</title><rect x="1054.6" y="819.0" width="135.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1057.6" y="830.0">thread_start</text>
</g>
<g>
<title>_pthread_start (579 samples, 11.47%)</title><rect x="1054.6" y="803.0" width="135.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1057.6" y="814.0">_pthread_start</text>
</g>
<g>
<title>thread_native_entry(Thread*) (578 samples, 11.45%)</title><rect x="1054.9" y="787.0" width="135.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1057.9" y="798.0">thread_native_ent..</text>
</g>
<g>
<title>Thread::call_run() (578 samples, 11.45%)</title><rect x="1054.9" y="771.0" width="135.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.9" y="782.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (15 samples, 0.30%)</title><rect x="1054.9" y="755.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.9" y="766.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (15 samples, 0.30%)</title><rect x="1054.9" y="739.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1057.9" y="750.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (5 samples, 0.10%)</title><rect x="1054.9" y="723.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.9" y="734.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (5 samples, 0.10%)</title><rect x="1054.9" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.9" y="718.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (5 samples, 0.10%)</title><rect x="1054.9" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1057.9" y="702.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (3 samples, 0.06%)</title><rect x="1055.1" y="675.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.1" y="686.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.04%)</title><rect x="1055.3" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.3" y="670.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (10 samples, 0.20%)</title><rect x="1056.0" y="723.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.0" y="734.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (10 samples, 0.20%)</title><rect x="1056.0" y="707.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.0" y="718.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (10 samples, 0.20%)</title><rect x="1056.0" y="691.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.0" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 0.18%)</title><rect x="1056.3" y="675.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.3" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.18%)</title><rect x="1056.3" y="659.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1059.3" y="670.0"></text>
</g>
<g>
<title>GangWorker::loop() (32 samples, 0.63%)</title><rect x="1058.4" y="755.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.4" y="766.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 0.44%)</title><rect x="1058.4" y="739.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.4" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 0.26%)</title><rect x="1058.4" y="723.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.4" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.10%)</title><rect x="1058.4" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.4" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (5 samples, 0.10%)</title><rect x="1058.4" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.4" y="702.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.06%)</title><rect x="1058.8" y="675.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.8" y="686.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.06%)</title><rect x="1058.8" y="659.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.8" y="670.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.06%)</title><rect x="1058.8" y="643.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.8" y="654.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.04%)</title><rect x="1059.1" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.1" y="638.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (8 samples, 0.16%)</title><rect x="1059.5" y="707.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.5" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.10%)</title><rect x="1059.5" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1062.5" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.10%)</title><rect x="1059.5" y="675.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.5" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.10%)</title><rect x="1059.5" y="659.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.5" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.10%)</title><rect x="1059.5" y="643.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1062.5" y="654.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.06%)</title><rect x="1060.7" y="691.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1063.7" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.12%)</title><rect x="1061.4" y="723.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.4" y="734.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.12%)</title><rect x="1061.4" y="707.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.12%)</title><rect x="1061.4" y="691.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1064.4" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (6 samples, 0.12%)</title><rect x="1061.4" y="675.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.4" y="686.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (6 samples, 0.12%)</title><rect x="1061.4" y="659.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.4" y="670.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.12%)</title><rect x="1061.4" y="643.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1064.4" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (3 samples, 0.06%)</title><rect x="1061.4" y="627.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1064.4" y="638.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.04%)</title><rect x="1061.6" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1064.6" y="622.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.06%)</title><rect x="1062.1" y="627.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.1" y="638.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.06%)</title><rect x="1062.1" y="611.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1065.1" y="622.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.04%)</title><rect x="1062.3" y="595.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.3" y="606.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.04%)</title><rect x="1062.8" y="723.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.8" y="734.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.04%)</title><rect x="1062.8" y="707.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.8" y="718.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.04%)</title><rect x="1062.8" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.8" y="702.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_strong_code_roots(HeapRegion*) (2 samples, 0.04%)</title><rect x="1062.8" y="675.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.8" y="686.0"></text>
</g>
<g>
<title>G1CodeRootSetTable::nmethods_do(CodeBlobClosure*) (2 samples, 0.04%)</title><rect x="1062.8" y="659.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.8" y="670.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.04%)</title><rect x="1062.8" y="643.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.8" y="654.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="1063.5" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.5" y="750.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.04%)</title><rect x="1064.0" y="739.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.0" y="750.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.04%)</title><rect x="1064.0" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.0" y="734.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (2 samples, 0.04%)</title><rect x="1064.0" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.0" y="718.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (2 samples, 0.04%)</title><rect x="1064.0" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.0" y="702.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (2 samples, 0.04%)</title><rect x="1064.0" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.0" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.04%)</title><rect x="1064.0" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.0" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="1064.0" y="643.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1067.0" y="654.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (5 samples, 0.10%)</title><rect x="1064.4" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.4" y="750.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (5 samples, 0.10%)</title><rect x="1064.4" y="723.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1067.4" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (490 samples, 9.71%)</title><rect x="1065.9" y="755.0" width="114.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.9" y="766.0">JavaThread::ru..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (490 samples, 9.71%)</title><rect x="1065.9" y="739.0" width="114.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.9" y="750.0">JavaThread::th..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (479 samples, 9.49%)</title><rect x="1065.9" y="723.0" width="111.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.9" y="734.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (475 samples, 9.41%)</title><rect x="1065.9" y="707.0" width="111.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1068.9" y="718.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (431 samples, 8.54%)</title><rect x="1065.9" y="691.0" width="100.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.9" y="702.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (430 samples, 8.52%)</title><rect x="1066.1" y="675.0" width="100.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.1" y="686.0">Compile::Com..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (2 samples, 0.04%)</title><rect x="1066.1" y="659.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.1" y="670.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.04%)</title><rect x="1066.1" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1069.1" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.04%)</title><rect x="1066.1" y="627.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.1" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.04%)</title><rect x="1066.1" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.04%)</title><rect x="1066.1" y="595.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1069.1" y="606.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (233 samples, 4.62%)</title><rect x="1066.6" y="659.0" width="54.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1069.6" y="670.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (9 samples, 0.18%)</title><rect x="1066.6" y="643.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.6" y="654.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (5 samples, 0.10%)</title><rect x="1066.6" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.6" y="638.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.04%)</title><rect x="1067.0" y="611.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.0" y="622.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.04%)</title><rect x="1067.0" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.0" y="606.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 0.08%)</title><rect x="1067.7" y="627.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.7" y="638.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.04%)</title><rect x="1068.0" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.0" y="622.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.04%)</title><rect x="1068.0" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.0" y="606.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (11 samples, 0.22%)</title><rect x="1068.7" y="643.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.7" y="654.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.04%)</title><rect x="1068.7" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.7" y="638.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (3 samples, 0.06%)</title><rect x="1069.1" y="627.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.1" y="638.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (6 samples, 0.12%)</title><rect x="1069.8" y="627.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.8" y="638.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (6 samples, 0.12%)</title><rect x="1069.8" y="611.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.8" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.10%)</title><rect x="1069.8" y="595.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.8" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.06%)</title><rect x="1070.1" y="579.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.1" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (25 samples, 0.50%)</title><rect x="1071.5" y="643.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.5" y="654.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.04%)</title><rect x="1071.9" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.9" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (20 samples, 0.40%)</title><rect x="1072.6" y="627.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.6" y="638.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.14%)</title><rect x="1072.6" y="611.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.6" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (10 samples, 0.20%)</title><rect x="1074.5" y="611.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.5" y="622.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (4 samples, 0.08%)</title><rect x="1075.0" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.0" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.04%)</title><rect x="1075.4" y="579.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.4" y="590.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (4 samples, 0.08%)</title><rect x="1075.9" y="595.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1078.9" y="606.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.04%)</title><rect x="1075.9" y="579.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1078.9" y="590.0"></text>
</g>
<g>
<title>Node::clone() const (2 samples, 0.04%)</title><rect x="1076.8" y="611.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.8" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (4 samples, 0.08%)</title><rect x="1077.3" y="643.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.3" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (29 samples, 0.57%)</title><rect x="1078.2" y="643.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.2" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (2 samples, 0.04%)</title><rect x="1078.2" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.2" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (27 samples, 0.53%)</title><rect x="1078.7" y="627.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.7" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.10%)</title><rect x="1078.9" y="611.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.9" y="622.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.04%)</title><rect x="1079.2" y="595.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (7 samples, 0.14%)</title><rect x="1080.1" y="611.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.1" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (2 samples, 0.04%)</title><rect x="1081.3" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1084.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.06%)</title><rect x="1082.0" y="611.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.0" y="622.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.04%)</title><rect x="1082.2" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.2" y="606.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.04%)</title><rect x="1082.2" y="579.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.2" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.18%)</title><rect x="1082.9" y="611.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.9" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.04%)</title><rect x="1084.1" y="595.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.1" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="1084.1" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.1" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (2 samples, 0.04%)</title><rect x="1085.0" y="643.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.0" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.04%)</title><rect x="1085.5" y="643.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.5" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (2 samples, 0.04%)</title><rect x="1085.5" y="627.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (150 samples, 2.97%)</title><rect x="1086.0" y="643.0" width="35.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.0" y="654.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.12%)</title><rect x="1086.7" y="627.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1089.7" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (10 samples, 0.20%)</title><rect x="1088.1" y="627.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.1" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (4 samples, 0.08%)</title><rect x="1089.2" y="611.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.2" y="622.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.06%)</title><rect x="1089.2" y="595.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.10%)</title><rect x="1090.4" y="627.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.4" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.08%)</title><rect x="1090.6" y="611.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (14 samples, 0.28%)</title><rect x="1091.6" y="627.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.6" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (39 samples, 0.77%)</title><rect x="1094.8" y="627.0" width="9.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.8" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (3 samples, 0.06%)</title><rect x="1096.2" y="611.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (7 samples, 0.14%)</title><rect x="1096.9" y="611.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.9" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.04%)</title><rect x="1097.2" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (4 samples, 0.08%)</title><rect x="1097.6" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.6" y="606.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (3 samples, 0.06%)</title><rect x="1097.9" y="579.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.9" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.18%)</title><rect x="1098.6" y="611.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.6" y="622.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.08%)</title><rect x="1099.8" y="595.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (11 samples, 0.22%)</title><rect x="1100.7" y="611.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.7" y="622.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (2 samples, 0.04%)</title><rect x="1101.4" y="595.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.4" y="606.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.08%)</title><rect x="1101.9" y="595.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.9" y="606.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.04%)</title><rect x="1102.8" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.04%)</title><rect x="1104.0" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.04%)</title><rect x="1104.0" y="611.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (10 samples, 0.20%)</title><rect x="1104.4" y="627.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.4" y="638.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (2 samples, 0.04%)</title><rect x="1105.4" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.4" y="622.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (2 samples, 0.04%)</title><rect x="1105.8" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.8" y="622.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.04%)</title><rect x="1106.3" y="611.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.3" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.04%)</title><rect x="1106.3" y="595.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (4 samples, 0.08%)</title><rect x="1106.8" y="627.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.8" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (17 samples, 0.34%)</title><rect x="1107.7" y="627.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.7" y="638.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (4 samples, 0.08%)</title><rect x="1108.6" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.6" y="622.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="1108.9" y="595.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1111.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (8 samples, 0.16%)</title><rect x="1109.6" y="611.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.6" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.10%)</title><rect x="1111.9" y="627.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.9" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.10%)</title><rect x="1111.9" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.9" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.06%)</title><rect x="1112.4" y="595.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.4" y="606.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.06%)</title><rect x="1112.4" y="579.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.4" y="590.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.04%)</title><rect x="1112.6" y="563.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.6" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.04%)</title><rect x="1113.1" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.1" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.04%)</title><rect x="1113.1" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.1" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.06%)</title><rect x="1113.5" y="627.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.5" y="638.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.06%)</title><rect x="1113.5" y="611.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.5" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (5 samples, 0.10%)</title><rect x="1114.2" y="627.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.2" y="638.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.04%)</title><rect x="1114.2" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.2" y="622.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.04%)</title><rect x="1114.2" y="595.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.2" y="606.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (2 samples, 0.04%)</title><rect x="1114.2" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.2" y="590.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (2 samples, 0.04%)</title><rect x="1114.2" y="563.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.2" y="574.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.04%)</title><rect x="1114.2" y="547.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1117.2" y="558.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.04%)</title><rect x="1114.2" y="531.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1117.2" y="542.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="1114.2" y="515.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1117.2" y="526.0"></text>
</g>
<g>
<title>large_malloc (2 samples, 0.04%)</title><rect x="1114.2" y="499.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1117.2" y="510.0"></text>
</g>
<g>
<title>mvm_allocate_pages (2 samples, 0.04%)</title><rect x="1114.2" y="483.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1117.2" y="494.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.04%)</title><rect x="1114.2" y="467.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1117.2" y="478.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="1114.9" y="611.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1117.9" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (18 samples, 0.36%)</title><rect x="1115.4" y="627.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.4" y="638.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (10 samples, 0.20%)</title><rect x="1117.3" y="611.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.3" y="622.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.10%)</title><rect x="1117.8" y="595.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.8" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (147 samples, 2.91%)</title><rect x="1121.0" y="659.0" width="34.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.0" y="670.0">Co..</text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (48 samples, 0.95%)</title><rect x="1121.5" y="643.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (48 samples, 0.95%)</title><rect x="1121.5" y="627.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.5" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.04%)</title><rect x="1121.5" y="611.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.04%)</title><rect x="1122.2" y="611.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.12%)</title><rect x="1122.7" y="611.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (5 samples, 0.10%)</title><rect x="1122.9" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (5 samples, 0.10%)</title><rect x="1122.9" y="579.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.06%)</title><rect x="1123.4" y="563.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.04%)</title><rect x="1123.6" y="547.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (20 samples, 0.40%)</title><rect x="1124.1" y="611.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.1" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (17 samples, 0.34%)</title><rect x="1124.8" y="595.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 0.26%)</title><rect x="1125.0" y="579.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.08%)</title><rect x="1125.5" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.5" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (4 samples, 0.08%)</title><rect x="1125.5" y="547.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.5" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.06%)</title><rect x="1125.5" y="531.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.5" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 0.12%)</title><rect x="1126.4" y="563.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.04%)</title><rect x="1126.6" y="547.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (3 samples, 0.06%)</title><rect x="1127.1" y="547.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.1" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (3 samples, 0.06%)</title><rect x="1127.1" y="531.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.1" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (10 samples, 0.20%)</title><rect x="1129.0" y="611.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (6 samples, 0.12%)</title><rect x="1129.9" y="595.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (2 samples, 0.04%)</title><rect x="1130.6" y="579.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.12%)</title><rect x="1131.3" y="611.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.3" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.12%)</title><rect x="1131.3" y="595.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.3" y="606.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (4 samples, 0.08%)</title><rect x="1132.7" y="643.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.7" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.04%)</title><rect x="1132.7" y="627.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.7" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.04%)</title><rect x="1132.7" y="611.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.14%)</title><rect x="1133.7" y="643.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.14%)</title><rect x="1133.7" y="627.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (2 samples, 0.04%)</title><rect x="1133.9" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (2 samples, 0.04%)</title><rect x="1133.9" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.9" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (2 samples, 0.04%)</title><rect x="1133.9" y="579.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (3 samples, 0.06%)</title><rect x="1134.4" y="611.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (2 samples, 0.04%)</title><rect x="1134.6" y="595.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.6" y="606.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.04%)</title><rect x="1135.3" y="643.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (3 samples, 0.06%)</title><rect x="1135.8" y="643.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.8" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (3 samples, 0.06%)</title><rect x="1135.8" y="627.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.8" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.04%)</title><rect x="1136.0" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (54 samples, 1.07%)</title><rect x="1136.5" y="643.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.5" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (2 samples, 0.04%)</title><rect x="1136.5" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.5" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (2 samples, 0.04%)</title><rect x="1136.5" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.5" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.06%)</title><rect x="1136.9" y="627.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.9" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1136.9" y="611.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.9" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1136.9" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.08%)</title><rect x="1138.3" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.3" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.14%)</title><rect x="1139.3" y="627.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.3" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1140.0" y="611.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.04%)</title><rect x="1140.0" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.0" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 0.44%)</title><rect x="1140.9" y="627.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (20 samples, 0.40%)</title><rect x="1141.4" y="611.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.4" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 0.28%)</title><rect x="1142.3" y="595.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.04%)</title><rect x="1142.3" y="579.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1142.3" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.04%)</title><rect x="1142.3" y="547.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.3" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.06%)</title><rect x="1143.0" y="579.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.0" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.06%)</title><rect x="1143.0" y="563.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.0" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 0.16%)</title><rect x="1143.7" y="579.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.7" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.04%)</title><rect x="1143.7" y="563.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (6 samples, 0.12%)</title><rect x="1144.2" y="563.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (6 samples, 0.12%)</title><rect x="1144.2" y="547.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.2" y="558.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (4 samples, 0.08%)</title><rect x="1144.6" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.04%)</title><rect x="1145.6" y="595.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.04%)</title><rect x="1145.6" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.6" y="590.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (2 samples, 0.04%)</title><rect x="1145.6" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.06%)</title><rect x="1146.0" y="627.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.04%)</title><rect x="1146.7" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.7" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.14%)</title><rect x="1147.2" y="627.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.14%)</title><rect x="1147.2" y="611.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.04%)</title><rect x="1147.4" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.4" y="606.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.06%)</title><rect x="1148.1" y="595.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.1" y="606.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.04%)</title><rect x="1148.4" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.4" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (25 samples, 0.50%)</title><rect x="1149.1" y="643.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.1" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 0.46%)</title><rect x="1149.3" y="627.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.3" y="638.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (5 samples, 0.10%)</title><rect x="1149.3" y="611.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.3" y="622.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (3 samples, 0.06%)</title><rect x="1149.6" y="595.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.6" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (3 samples, 0.06%)</title><rect x="1149.6" y="579.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.04%)</title><rect x="1149.8" y="563.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.8" y="574.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1150.5" y="611.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.5" y="622.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.04%)</title><rect x="1150.5" y="595.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1150.5" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.5" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.04%)</title><rect x="1150.5" y="563.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.5" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.06%)</title><rect x="1151.4" y="611.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.04%)</title><rect x="1152.1" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.04%)</title><rect x="1152.1" y="595.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.1" y="606.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.04%)</title><rect x="1152.1" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.1" y="590.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1152.6" y="611.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.6" y="622.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.08%)</title><rect x="1153.5" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (4 samples, 0.08%)</title><rect x="1153.5" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="563.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="531.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.5" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="483.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.5" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="467.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="451.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.5" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.08%)</title><rect x="1153.5" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.5" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.06%)</title><rect x="1153.5" y="419.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.5" y="430.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.04%)</title><rect x="1153.8" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.8" y="414.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (2 samples, 0.04%)</title><rect x="1153.8" y="387.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.8" y="398.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (3 samples, 0.06%)</title><rect x="1155.4" y="659.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.4" y="670.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (2 samples, 0.04%)</title><rect x="1156.1" y="659.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.1" y="670.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (2 samples, 0.04%)</title><rect x="1156.1" y="643.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (39 samples, 0.77%)</title><rect x="1156.6" y="659.0" width="9.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (39 samples, 0.77%)</title><rect x="1156.6" y="643.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (39 samples, 0.77%)</title><rect x="1156.6" y="627.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (39 samples, 0.77%)</title><rect x="1156.6" y="611.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (39 samples, 0.77%)</title><rect x="1156.6" y="595.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (34 samples, 0.67%)</title><rect x="1156.6" y="579.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (34 samples, 0.67%)</title><rect x="1156.6" y="563.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (33 samples, 0.65%)</title><rect x="1156.6" y="547.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (32 samples, 0.63%)</title><rect x="1156.6" y="531.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (31 samples, 0.61%)</title><rect x="1156.6" y="515.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (31 samples, 0.61%)</title><rect x="1156.6" y="499.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (31 samples, 0.61%)</title><rect x="1156.6" y="483.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (29 samples, 0.57%)</title><rect x="1156.8" y="467.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (29 samples, 0.57%)</title><rect x="1156.8" y="451.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (25 samples, 0.50%)</title><rect x="1156.8" y="435.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (23 samples, 0.46%)</title><rect x="1157.0" y="419.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (23 samples, 0.46%)</title><rect x="1157.0" y="403.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.46%)</title><rect x="1157.0" y="387.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.46%)</title><rect x="1157.0" y="371.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 0.34%)</title><rect x="1157.0" y="355.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.0" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.06%)</title><rect x="1157.0" y="339.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.0" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (3 samples, 0.06%)</title><rect x="1157.0" y="323.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.0" y="334.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.04%)</title><rect x="1157.0" y="307.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.0" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.04%)</title><rect x="1157.0" y="291.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.04%)</title><rect x="1157.0" y="275.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.04%)</title><rect x="1157.0" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.26%)</title><rect x="1157.7" y="339.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.26%)</title><rect x="1157.7" y="323.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 0.26%)</title><rect x="1157.7" y="307.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 0.26%)</title><rect x="1157.7" y="291.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.22%)</title><rect x="1157.7" y="275.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.16%)</title><rect x="1158.0" y="259.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.16%)</title><rect x="1158.0" y="243.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.14%)</title><rect x="1158.2" y="227.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.14%)</title><rect x="1158.2" y="211.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.12%)</title><rect x="1158.2" y="195.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.12%)</title><rect x="1158.2" y="179.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.2" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.12%)</title><rect x="1158.2" y="163.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.12%)</title><rect x="1158.2" y="147.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.12%)</title><rect x="1158.2" y="131.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.10%)</title><rect x="1158.2" y="115.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.2" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1158.2" y="99.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.2" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1158.2" y="83.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1158.2" y="67.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1158.2" y="51.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.2" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1158.2" y="35.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1158.9" y="99.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.9" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1159.8" y="259.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.06%)</title><rect x="1161.0" y="355.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.04%)</title><rect x="1161.2" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="350.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (2 samples, 0.04%)</title><rect x="1161.2" y="323.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="334.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1161.2" y="307.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="318.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1161.2" y="291.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="302.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1161.2" y="275.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (2 samples, 0.04%)</title><rect x="1161.2" y="259.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.2" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (2 samples, 0.04%)</title><rect x="1161.2" y="243.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.2" y="254.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.04%)</title><rect x="1161.2" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="238.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.04%)</title><rect x="1161.2" y="211.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1161.2" y="195.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1161.2" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1161.2" y="163.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.04%)</title><rect x="1161.2" y="147.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (2 samples, 0.04%)</title><rect x="1161.7" y="355.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.06%)</title><rect x="1162.6" y="435.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.04%)</title><rect x="1162.9" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="430.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (2 samples, 0.04%)</title><rect x="1162.9" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.9" y="414.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1162.9" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.9" y="398.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.04%)</title><rect x="1162.9" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="382.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (2 samples, 0.04%)</title><rect x="1162.9" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.10%)</title><rect x="1164.5" y="579.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.08%)</title><rect x="1164.7" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.7" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.08%)</title><rect x="1164.7" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.08%)</title><rect x="1164.7" y="531.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.08%)</title><rect x="1164.7" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.08%)</title><rect x="1164.7" y="499.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1164.7" y="483.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1164.7" y="467.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1164.7" y="451.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1164.7" y="435.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1164.7" y="419.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1164.7" y="403.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1164.7" y="387.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1164.7" y="371.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1164.7" y="355.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1164.7" y="339.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1164.7" y="323.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1164.7" y="307.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1164.7" y="291.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1164.7" y="275.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1164.7" y="259.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.06%)</title><rect x="1164.7" y="243.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.06%)</title><rect x="1164.7" y="227.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.06%)</title><rect x="1164.7" y="211.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.06%)</title><rect x="1164.7" y="195.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.06%)</title><rect x="1164.7" y="179.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1165.0" y="163.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.0" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1165.0" y="147.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1165.0" y="131.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1165.0" y="115.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1165.0" y="99.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1165.0" y="83.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.0" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1165.0" y="67.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.0" y="78.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (4 samples, 0.08%)</title><rect x="1165.7" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.7" y="670.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="1165.9" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.9" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (38 samples, 0.75%)</title><rect x="1166.9" y="691.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="702.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (38 samples, 0.75%)</title><rect x="1166.9" y="675.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.9" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_method() (38 samples, 0.75%)</title><rect x="1166.9" y="659.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.9" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (34 samples, 0.67%)</title><rect x="1166.9" y="643.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.9" y="654.0"></text>
</g>
<g>
<title>Compilation::build_hir() (14 samples, 0.28%)</title><rect x="1166.9" y="627.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.9" y="638.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (11 samples, 0.22%)</title><rect x="1167.1" y="611.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="622.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (11 samples, 0.22%)</title><rect x="1167.1" y="595.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (11 samples, 0.22%)</title><rect x="1167.1" y="579.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (10 samples, 0.20%)</title><rect x="1167.3" y="563.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.3" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (9 samples, 0.18%)</title><rect x="1167.6" y="547.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.6" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (6 samples, 0.12%)</title><rect x="1167.8" y="531.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.10%)</title><rect x="1167.8" y="515.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (5 samples, 0.10%)</title><rect x="1167.8" y="499.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.06%)</title><rect x="1167.8" y="483.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.8" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.06%)</title><rect x="1167.8" y="467.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.06%)</title><rect x="1167.8" y="451.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.06%)</title><rect x="1167.8" y="435.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.06%)</title><rect x="1167.8" y="419.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.04%)</title><rect x="1167.8" y="403.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.04%)</title><rect x="1167.8" y="387.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.04%)</title><rect x="1167.8" y="371.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.04%)</title><rect x="1167.8" y="355.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.04%)</title><rect x="1167.8" y="339.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="350.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (2 samples, 0.04%)</title><rect x="1169.7" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="622.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (2 samples, 0.04%)</title><rect x="1169.7" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="606.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (2 samples, 0.04%)</title><rect x="1169.7" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.7" y="590.0"></text>
</g>
<g>
<title>UseCountComputer::uses_do(Instruction**) (2 samples, 0.04%)</title><rect x="1169.7" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (2 samples, 0.04%)</title><rect x="1169.7" y="547.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="558.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (2 samples, 0.04%)</title><rect x="1169.7" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (7 samples, 0.14%)</title><rect x="1170.1" y="627.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (2 samples, 0.04%)</title><rect x="1170.1" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.1" y="622.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (2 samples, 0.04%)</title><rect x="1170.1" y="595.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.1" y="606.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (2 samples, 0.04%)</title><rect x="1170.1" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (5 samples, 0.10%)</title><rect x="1170.6" y="611.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="622.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (5 samples, 0.10%)</title><rect x="1170.6" y="595.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="606.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (2 samples, 0.04%)</title><rect x="1170.8" y="579.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.8" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (12 samples, 0.24%)</title><rect x="1171.8" y="627.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.04%)</title><rect x="1171.8" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.04%)</title><rect x="1171.8" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="606.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (9 samples, 0.18%)</title><rect x="1172.5" y="611.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="622.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (3 samples, 0.06%)</title><rect x="1172.5" y="595.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="606.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (3 samples, 0.06%)</title><rect x="1172.5" y="579.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="590.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.06%)</title><rect x="1172.5" y="563.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="574.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (3 samples, 0.06%)</title><rect x="1172.5" y="547.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.5" y="558.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (5 samples, 0.10%)</title><rect x="1173.2" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.2" y="606.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (2 samples, 0.04%)</title><rect x="1173.9" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (2 samples, 0.04%)</title><rect x="1173.9" y="563.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (4 samples, 0.08%)</title><rect x="1174.8" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (4 samples, 0.08%)</title><rect x="1174.8" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.8" y="638.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="1175.0" y="611.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="622.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.04%)</title><rect x="1175.0" y="595.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="606.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (2 samples, 0.04%)</title><rect x="1175.0" y="579.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="590.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (2 samples, 0.04%)</title><rect x="1175.0" y="563.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="574.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.04%)</title><rect x="1175.7" y="691.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.04%)</title><rect x="1175.7" y="675.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.04%)</title><rect x="1175.7" y="659.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="670.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.04%)</title><rect x="1175.7" y="643.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1178.7" y="654.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.04%)</title><rect x="1175.7" y="627.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1178.7" y="638.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.04%)</title><rect x="1175.7" y="611.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1178.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (2 samples, 0.04%)</title><rect x="1176.4" y="691.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.04%)</title><rect x="1176.4" y="675.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.04%)</title><rect x="1176.4" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="670.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.04%)</title><rect x="1176.4" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (2 samples, 0.04%)</title><rect x="1176.4" y="627.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads() (2 samples, 0.04%)</title><rect x="1176.9" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.04%)</title><rect x="1177.4" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="1177.4" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="1177.4" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="1177.4" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="1177.4" y="643.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (5 samples, 0.10%)</title><rect x="1177.8" y="723.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.08%)</title><rect x="1177.8" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.08%)</title><rect x="1177.8" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.08%)</title><rect x="1177.8" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.08%)</title><rect x="1177.8" y="659.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (6 samples, 0.12%)</title><rect x="1179.0" y="723.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.0" y="734.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (3 samples, 0.06%)</title><rect x="1179.0" y="707.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.04%)</title><rect x="1179.0" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.06%)</title><rect x="1179.7" y="707.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.06%)</title><rect x="1179.7" y="691.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.06%)</title><rect x="1179.7" y="675.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="1179.7" y="659.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 0.18%)</title><rect x="1180.4" y="755.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>VMThread::loop() (9 samples, 0.18%)</title><rect x="1180.4" y="739.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (6 samples, 0.12%)</title><rect x="1181.1" y="723.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="734.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (6 samples, 0.12%)</title><rect x="1181.1" y="707.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="718.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (4 samples, 0.08%)</title><rect x="1181.1" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (4 samples, 0.08%)</title><rect x="1181.1" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (2 samples, 0.04%)</title><rect x="1181.1" y="659.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="670.0"></text>
</g>
<g>
<title>WatcherThread::run() (32 samples, 0.63%)</title><rect x="1182.5" y="755.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (31 samples, 0.61%)</title><rect x="1182.8" y="739.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (30 samples, 0.59%)</title><rect x="1183.0" y="723.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (30 samples, 0.59%)</title><rect x="1183.0" y="707.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (30 samples, 0.59%)</title><rect x="1183.0" y="691.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (29 samples, 0.57%)</title><rect x="1183.0" y="675.0" width="6.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
</g>
</svg>

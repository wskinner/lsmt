<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (12,560 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>MainKt.main (12 samples, 0.10%)</title><rect x="10.0" y="435.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>MainKt.main (12 samples, 0.10%)</title><rect x="10.0" y="419.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>StandardSerializer.&lt;init&gt; (8 samples, 0.06%)</title><rect x="10.2" y="403.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.2" y="414.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (7 samples, 0.06%)</title><rect x="10.2" y="387.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.2" y="398.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (6 samples, 0.05%)</title><rect x="10.3" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.3" y="382.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.&lt;clinit&gt; (5 samples, 0.04%)</title><rect x="10.3" y="355.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.3" y="366.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (4 samples, 0.03%)</title><rect x="10.4" y="339.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (4 samples, 0.03%)</title><rect x="10.4" y="323.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (4 samples, 0.03%)</title><rect x="10.4" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (4 samples, 0.03%)</title><rect x="10.4" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (3 samples, 0.02%)</title><rect x="10.5" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.5" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.03%)</title><rect x="11.1" y="435.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.1" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.03%)</title><rect x="11.1" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.1" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.03%)</title><rect x="11.1" y="403.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.1" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.03%)</title><rect x="11.1" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.1" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.03%)</title><rect x="11.1" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.03%)</title><rect x="11.1" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.1" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (4 samples, 0.03%)</title><rect x="11.1" y="339.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.1" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (4 samples, 0.03%)</title><rect x="11.1" y="323.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.1" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (24 samples, 0.19%)</title><rect x="11.6" y="435.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.6" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (24 samples, 0.19%)</title><rect x="11.6" y="419.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.6" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (24 samples, 0.19%)</title><rect x="11.6" y="403.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.6" y="414.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (13 samples, 0.10%)</title><rect x="11.6" y="387.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.6" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.10%)</title><rect x="11.6" y="371.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="14.6" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 0.09%)</title><rect x="12.8" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.8" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.07%)</title><rect x="12.8" y="371.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="15.8" y="382.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.02%)</title><rect x="14.2" y="435.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="17.2" y="446.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.03%)</title><rect x="14.5" y="435.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="17.5" y="446.0"></text>
</g>
<g>
<title>Interpreter (3 samples, 0.02%)</title><rect x="14.5" y="419.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (6,181 samples, 49.21%)</title><rect x="15.3" y="435.0" width="580.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.3" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (6,181 samples, 49.21%)</title><rect x="15.3" y="419.0" width="580.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.3" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (6,181 samples, 49.21%)</title><rect x="15.3" y="403.0" width="580.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.3" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (6,125 samples, 48.77%)</title><rect x="15.6" y="387.0" width="575.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.6" y="398.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (6,123 samples, 48.75%)</title><rect x="15.6" y="371.0" width="575.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.6" y="382.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>StandardSSTableManager$addTableAsync$1.run (6,123 samples, 48.75%)</title><rect x="15.6" y="355.0" width="575.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.6" y="366.0">StandardSSTableManager$addTableAsync$1.run</text>
</g>
<g>
<title>StandardSSTableManager.addTable (6,123 samples, 48.75%)</title><rect x="15.6" y="339.0" width="575.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="350.0">StandardSSTableManager.addTable</text>
</g>
<g>
<title>StandardSSTableManager.nextTableFile (3,427 samples, 27.29%)</title><rect x="15.6" y="323.0" width="322.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="18.6" y="334.0">StandardSSTableManager.nextTableFile</text>
</g>
<g>
<title>java/io/File.&lt;init&gt; (3 samples, 0.02%)</title><rect x="16.1" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.1" y="318.0"></text>
</g>
<g>
<title>java/io/File.list (3,379 samples, 26.90%)</title><rect x="16.4" y="307.0" width="317.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.4" y="318.0">java/io/File.list</text>
</g>
<g>
<title>StandardSSTableManager$nextTableFile$1$1.accept (7 samples, 0.06%)</title><rect x="16.9" y="291.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="302.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsJVMKt.startsWith$default (6 samples, 0.05%)</title><rect x="17.0" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="286.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsJVMKt.startsWith (6 samples, 0.05%)</title><rect x="17.0" y="259.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (6 samples, 0.05%)</title><rect x="17.0" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (6 samples, 0.05%)</title><rect x="17.0" y="227.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.0" y="238.0"></text>
</g>
<g>
<title>java/io/File.list (3,354 samples, 26.70%)</title><rect x="17.5" y="291.0" width="315.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.5" y="302.0">java/io/File.list</text>
</g>
<g>
<title>java/io/UnixFileSystem.list (3,354 samples, 26.70%)</title><rect x="17.5" y="275.0" width="315.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.5" y="286.0">java/io/UnixFileSystem.list</text>
</g>
<g>
<title>Java_java_io_UnixFileSystem_list (3,340 samples, 26.59%)</title><rect x="17.6" y="259.0" width="313.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="20.6" y="270.0">Java_java_io_UnixFileSystem_list</text>
</g>
<g>
<title>CFStringAppendCString (6 samples, 0.05%)</title><rect x="18.4" y="243.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="21.4" y="254.0"></text>
</g>
<g>
<title>CFStringCreateMutable (12 samples, 0.10%)</title><rect x="18.9" y="243.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="21.9" y="254.0"></text>
</g>
<g>
<title>CFStringGetLength (6 samples, 0.05%)</title><rect x="20.1" y="243.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="23.1" y="254.0"></text>
</g>
<g>
<title>CFStringNormalize (8 samples, 0.06%)</title><rect x="20.7" y="243.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="23.7" y="254.0"></text>
</g>
<g>
<title>JNU_CopyObjectArray (746 samples, 5.94%)</title><rect x="21.5" y="243.0" width="70.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="24.5" y="254.0">JNU_Copy..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (7 samples, 0.06%)</title><rect x="21.9" y="227.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.9" y="238.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (4 samples, 0.03%)</title><rect x="23.0" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.0" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.02%)</title><rect x="23.3" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.3" y="238.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (9 samples, 0.07%)</title><rect x="23.6" y="227.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.6" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.05%)</title><rect x="24.5" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.06%)</title><rect x="25.0" y="227.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="28.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.02%)</title><rect x="25.8" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="28.8" y="238.0"></text>
</g>
<g>
<title>jni_DeleteLocalRef (150 samples, 1.19%)</title><rect x="26.1" y="227.0" width="14.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="29.1" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 1097844ull&gt;::oop_access_barrier(void*, oopDesc*) (10 samples, 0.08%)</title><rect x="28.8" y="211.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.8" y="222.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue(oopDesc*) (7 samples, 0.06%)</title><rect x="29.0" y="195.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="32.0" y="206.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (5 samples, 0.04%)</title><rect x="29.9" y="211.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="32.9" y="222.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (3 samples, 0.02%)</title><rect x="30.6" y="211.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="33.6" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (14 samples, 0.11%)</title><rect x="30.9" y="211.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="33.9" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (84 samples, 0.67%)</title><rect x="32.3" y="211.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="35.3" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (18 samples, 0.14%)</title><rect x="32.4" y="195.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="35.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (4 samples, 0.03%)</title><rect x="34.1" y="195.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="37.1" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (58 samples, 0.46%)</title><rect x="34.4" y="195.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="37.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (55 samples, 0.44%)</title><rect x="34.6" y="179.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="37.6" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (46 samples, 0.37%)</title><rect x="35.5" y="163.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="38.5" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (41 samples, 0.33%)</title><rect x="35.7" y="147.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="38.7" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (6 samples, 0.05%)</title><rect x="35.8" y="131.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="38.8" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (3 samples, 0.02%)</title><rect x="36.4" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="39.4" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (4 samples, 0.03%)</title><rect x="36.7" y="131.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="39.7" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (4 samples, 0.03%)</title><rect x="37.1" y="131.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="40.1" y="142.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (4 samples, 0.03%)</title><rect x="37.4" y="131.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="40.4" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.03%)</title><rect x="38.1" y="131.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.1" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (11 samples, 0.09%)</title><rect x="38.6" y="131.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="41.6" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (6 samples, 0.05%)</title><rect x="39.0" y="115.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="42.0" y="126.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (3 samples, 0.02%)</title><rect x="39.3" y="99.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="42.3" y="110.0"></text>
</g>
<g>
<title>jni_GetObjectArrayElement (294 samples, 2.34%)</title><rect x="40.3" y="227.0" width="27.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="43.3" y="238.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.02%)</title><rect x="47.4" y="211.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="50.4" y="222.0"></text>
</g>
<g>
<title>BarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (4 samples, 0.03%)</title><rect x="47.7" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="50.7" y="222.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (40 samples, 0.32%)</title><rect x="48.5" y="211.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="51.5" y="222.0"></text>
</g>
<g>
<title>AccessInternal::field_addr(oopDesc*, long) (5 samples, 0.04%)</title><rect x="49.6" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="52.6" y="206.0"></text>
</g>
<g>
<title>CompressedOops::decode_not_null(unsigned int) (9 samples, 0.07%)</title><rect x="50.4" y="195.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="53.4" y="206.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;2670710ull, MO_UNORDERED&gt;::value, unsigned int&gt;::type RawAccessBarrier&lt;2670710ull&gt;::load_internal&lt;2670710ull, unsigned int&gt;(void*) (3 samples, 0.02%)</title><rect x="51.3" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="54.3" y="206.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;2670710ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (3 samples, 0.02%)</title><rect x="51.9" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="54.9" y="206.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;2670710ull, MO_UNORDERED&gt;::value, unsigned int&gt;::type RawAccessBarrier&lt;2670710ull&gt;::load_internal&lt;2670710ull, unsigned int&gt;(void*) (3 samples, 0.02%)</title><rect x="51.9" y="179.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="54.9" y="190.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (3 samples, 0.02%)</title><rect x="52.3" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="55.3" y="222.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (3 samples, 0.02%)</title><rect x="52.7" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="55.7" y="222.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (32 samples, 0.25%)</title><rect x="53.0" y="211.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="56.0" y="222.0"></text>
</g>
<g>
<title>JNIHandleBlock::rebuild_free_list() (7 samples, 0.06%)</title><rect x="55.4" y="195.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="58.4" y="206.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (5 samples, 0.04%)</title><rect x="56.1" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="59.1" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.08%)</title><rect x="56.6" y="211.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="59.6" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (79 samples, 0.63%)</title><rect x="57.6" y="211.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="60.6" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.08%)</title><rect x="58.0" y="195.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="61.0" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (6 samples, 0.05%)</title><rect x="58.9" y="195.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="61.9" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (53 samples, 0.42%)</title><rect x="59.5" y="195.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="62.5" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (51 samples, 0.41%)</title><rect x="59.7" y="179.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="62.7" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (47 samples, 0.37%)</title><rect x="60.1" y="163.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="63.1" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (45 samples, 0.36%)</title><rect x="60.1" y="147.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="63.1" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (5 samples, 0.04%)</title><rect x="60.2" y="131.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="63.2" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (3 samples, 0.02%)</title><rect x="60.6" y="131.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="63.6" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (3 samples, 0.02%)</title><rect x="60.9" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="63.9" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (6 samples, 0.05%)</title><rect x="61.2" y="131.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="64.2" y="142.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (4 samples, 0.03%)</title><rect x="61.9" y="131.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="64.9" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.03%)</title><rect x="62.4" y="131.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="65.4" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (15 samples, 0.12%)</title><rect x="62.9" y="131.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="65.9" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.03%)</title><rect x="63.9" y="115.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="66.9" y="126.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (3 samples, 0.02%)</title><rect x="64.8" y="195.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="67.8" y="206.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.02%)</title><rect x="65.1" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="68.1" y="222.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (13 samples, 0.10%)</title><rect x="65.4" y="211.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="68.4" y="222.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (3 samples, 0.02%)</title><rect x="65.9" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="68.9" y="206.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;2670710ull&gt;::decode&lt;oopDesc*&gt;(AccessInternal::EncodedType&lt;2670710ull, oopDesc*&gt;::type) (3 samples, 0.02%)</title><rect x="66.9" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="69.9" y="222.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;2670710ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (3 samples, 0.02%)</title><rect x="67.2" y="211.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="70.2" y="222.0"></text>
</g>
<g>
<title>unsigned long long AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength&lt;2670710ull&gt;(oopDesc*, long) (3 samples, 0.02%)</title><rect x="67.6" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="70.6" y="222.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (248 samples, 1.97%)</title><rect x="67.9" y="227.0" width="23.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="70.9" y="238.0">j..</text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (8 samples, 0.06%)</title><rect x="75.2" y="211.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="78.2" y="222.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (4 samples, 0.03%)</title><rect x="76.0" y="211.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="79.0" y="222.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (4 samples, 0.03%)</title><rect x="76.4" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="79.4" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (10 samples, 0.08%)</title><rect x="76.8" y="211.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="79.8" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (3 samples, 0.02%)</title><rect x="77.7" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="80.7" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (93 samples, 0.74%)</title><rect x="78.1" y="211.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="81.1" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (19 samples, 0.15%)</title><rect x="78.4" y="195.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="81.4" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (4 samples, 0.03%)</title><rect x="80.2" y="195.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="83.2" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (65 samples, 0.52%)</title><rect x="80.6" y="195.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="83.6" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (53 samples, 0.42%)</title><rect x="81.2" y="179.0" width="5.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="84.2" y="190.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (3 samples, 0.02%)</title><rect x="81.4" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="84.4" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (47 samples, 0.37%)</title><rect x="81.8" y="163.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="84.8" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (42 samples, 0.33%)</title><rect x="82.1" y="147.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.1" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (4 samples, 0.03%)</title><rect x="82.2" y="131.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="85.2" y="142.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (7 samples, 0.06%)</title><rect x="82.9" y="131.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="85.9" y="142.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (3 samples, 0.02%)</title><rect x="83.6" y="131.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="86.6" y="142.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (5 samples, 0.04%)</title><rect x="83.8" y="131.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="86.8" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.02%)</title><rect x="84.5" y="131.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="87.5" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (12 samples, 0.10%)</title><rect x="84.9" y="131.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="87.9" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.06%)</title><rect x="85.3" y="115.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="88.3" y="126.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (4 samples, 0.03%)</title><rect x="85.6" y="99.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="88.6" y="110.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (19 samples, 0.15%)</title><rect x="87.1" y="211.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="90.1" y="222.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (3 samples, 0.02%)</title><rect x="87.9" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="90.9" y="206.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (3 samples, 0.02%)</title><rect x="88.2" y="195.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="91.2" y="206.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::decode&lt;oopDesc*&gt;(AccessInternal::EncodedType&lt;1097844ull, oopDesc*&gt;::type) (8 samples, 0.06%)</title><rect x="88.9" y="211.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="91.9" y="222.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (3 samples, 0.02%)</title><rect x="89.7" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="92.7" y="222.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (13 samples, 0.10%)</title><rect x="90.0" y="211.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="93.0" y="222.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.02%)</title><rect x="91.2" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="94.2" y="238.0"></text>
</g>
<g>
<title>JNU_GetStringPlatformChars (3 samples, 0.02%)</title><rect x="91.5" y="243.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="94.5" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.02%)</title><rect x="92.0" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="95.0" y="254.0"></text>
</g>
<g>
<title>__opendir2$INODE64 (7 samples, 0.06%)</title><rect x="92.7" y="243.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="95.7" y="254.0"></text>
</g>
<g>
<title>__opendir_common (3 samples, 0.02%)</title><rect x="92.7" y="227.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="95.7" y="238.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.02%)</title><rect x="92.7" y="211.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="95.7" y="222.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.02%)</title><rect x="92.7" y="195.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="95.7" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="92.7" y="179.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="95.7" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (4 samples, 0.03%)</title><rect x="93.0" y="227.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="96.0" y="238.0"></text>
</g>
<g>
<title>_platform_strcmp (5 samples, 0.04%)</title><rect x="93.3" y="243.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="96.3" y="254.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.04%)</title><rect x="94.1" y="243.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="97.1" y="254.0"></text>
</g>
<g>
<title>jni_DeleteLocalRef (79 samples, 0.63%)</title><rect x="94.6" y="243.0" width="7.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="97.6" y="254.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 1097844ull&gt;::oop_access_barrier(void*, oopDesc*) (11 samples, 0.09%)</title><rect x="95.6" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="98.6" y="238.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue(oopDesc*) (7 samples, 0.06%)</title><rect x="95.7" y="211.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="98.7" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.05%)</title><rect x="97.0" y="227.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="100.0" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (46 samples, 0.37%)</title><rect x="97.6" y="227.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="100.6" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (9 samples, 0.07%)</title><rect x="97.9" y="211.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="100.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (32 samples, 0.25%)</title><rect x="98.9" y="211.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="101.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (27 samples, 0.21%)</title><rect x="99.3" y="195.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.3" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (26 samples, 0.21%)</title><rect x="99.3" y="179.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="102.3" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (24 samples, 0.19%)</title><rect x="99.3" y="163.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="102.3" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (4 samples, 0.03%)</title><rect x="99.5" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="102.5" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (4 samples, 0.03%)</title><rect x="99.9" y="147.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="102.9" y="158.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (3 samples, 0.02%)</title><rect x="100.3" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="103.3" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (9 samples, 0.07%)</title><rect x="100.8" y="147.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="103.8" y="158.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.02%)</title><rect x="100.8" y="131.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.8" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.04%)</title><rect x="101.1" y="131.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="104.1" y="142.0"></text>
</g>
<g>
<title>jni_NewObjectArray (8 samples, 0.06%)</title><rect x="102.3" y="243.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="105.3" y="254.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (5 samples, 0.04%)</title><rect x="102.4" y="227.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="105.4" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.04%)</title><rect x="102.4" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="105.4" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.03%)</title><rect x="102.4" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="105.4" y="206.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.02%)</title><rect x="102.4" y="179.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="105.4" y="190.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="102.4" y="163.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="105.4" y="174.0"></text>
</g>
<g>
<title>jni_NewString (3 samples, 0.02%)</title><rect x="103.0" y="243.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="106.0" y="254.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (94 samples, 0.75%)</title><rect x="103.3" y="243.0" width="8.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="106.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (37 samples, 0.29%)</title><rect x="107.1" y="227.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="110.1" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (8 samples, 0.06%)</title><rect x="107.1" y="211.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="110.1" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (26 samples, 0.21%)</title><rect x="108.0" y="211.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="111.0" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (25 samples, 0.20%)</title><rect x="108.1" y="195.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="111.1" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (20 samples, 0.16%)</title><rect x="108.6" y="179.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="111.6" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (17 samples, 0.14%)</title><rect x="108.7" y="163.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="111.7" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (4 samples, 0.03%)</title><rect x="108.7" y="147.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="111.7" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (3 samples, 0.02%)</title><rect x="109.4" y="147.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="112.4" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.03%)</title><rect x="110.0" y="147.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="113.0" y="158.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (6 samples, 0.05%)</title><rect x="110.8" y="227.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="113.8" y="238.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::decode&lt;oopDesc*&gt;(AccessInternal::EncodedType&lt;1097844ull, oopDesc*&gt;::type) (3 samples, 0.02%)</title><rect x="111.4" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="114.4" y="238.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;2670710ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (5 samples, 0.04%)</title><rect x="111.7" y="227.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="114.7" y="238.0"></text>
</g>
<g>
<title>jsqrt (6 samples, 0.05%)</title><rect x="112.1" y="243.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="115.1" y="254.0"></text>
</g>
<g>
<title>newStringPlatform (1,150 samples, 9.16%)</title><rect x="112.9" y="243.0" width="108.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="115.9" y="254.0">newStringPlat..</text>
</g>
<g>
<title>CFStringAppendCString (7 samples, 0.06%)</title><rect x="113.7" y="227.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="116.7" y="238.0"></text>
</g>
<g>
<title>_platform_strlen (3 samples, 0.02%)</title><rect x="114.1" y="211.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="117.1" y="222.0"></text>
</g>
<g>
<title>CFStringCreateMutable (185 samples, 1.47%)</title><rect x="114.4" y="227.0" width="17.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="117.4" y="238.0"></text>
</g>
<g>
<title>_CFGetTSDCreateIfNeeded (10 samples, 0.08%)</title><rect x="119.5" y="211.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="122.5" y="222.0"></text>
</g>
<g>
<title>__CFTSDGetTable (4 samples, 0.03%)</title><rect x="120.1" y="195.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="123.1" y="206.0"></text>
</g>
<g>
<title>_CFRuntimeCreateInstance (111 samples, 0.88%)</title><rect x="120.5" y="211.0" width="10.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="123.5" y="222.0"></text>
</g>
<g>
<title>CFAllocatorAllocate (3 samples, 0.02%)</title><rect x="122.6" y="195.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="125.6" y="206.0"></text>
</g>
<g>
<title>__CFAllocatorSystemAllocate (6 samples, 0.05%)</title><rect x="122.8" y="195.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="125.8" y="206.0"></text>
</g>
<g>
<title>malloc_zone_calloc (65 samples, 0.52%)</title><rect x="123.6" y="195.0" width="6.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="126.6" y="206.0"></text>
</g>
<g>
<title>default_zone_calloc (9 samples, 0.07%)</title><rect x="123.8" y="179.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="126.8" y="190.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (54 samples, 0.43%)</title><rect x="124.6" y="179.0" width="5.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="127.6" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (49 samples, 0.39%)</title><rect x="125.1" y="163.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="128.1" y="174.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.03%)</title><rect x="128.3" y="147.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="131.3" y="158.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (10 samples, 0.08%)</title><rect x="128.7" y="147.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="131.7" y="158.0"></text>
</g>
<g>
<title>object_setClass (12 samples, 0.10%)</title><rect x="129.7" y="195.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="132.7" y="206.0"></text>
</g>
<g>
<title>malloc_zone_calloc (7 samples, 0.06%)</title><rect x="131.1" y="211.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="134.1" y="222.0"></text>
</g>
<g>
<title>CFStringGetCString (52 samples, 0.41%)</title><rect x="131.8" y="227.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="134.8" y="238.0"></text>
</g>
<g>
<title>__CFStrConvertBytesToUnicode (19 samples, 0.15%)</title><rect x="133.6" y="211.0" width="1.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="136.6" y="222.0"></text>
</g>
<g>
<title>__CFStringEncodeByteStream (13 samples, 0.10%)</title><rect x="135.4" y="211.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="138.4" y="222.0"></text>
</g>
<g>
<title>CFStringNormalize (20 samples, 0.16%)</title><rect x="136.6" y="227.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="139.6" y="238.0"></text>
</g>
<g>
<title>_CFRelease (227 samples, 1.81%)</title><rect x="139.4" y="227.0" width="21.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="142.4" y="238.0">_..</text>
</g>
<g>
<title>__CFAllocatorSystemDeallocate (4 samples, 0.03%)</title><rect x="142.0" y="211.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="145.0" y="222.0"></text>
</g>
<g>
<title>__CFStringDeallocate (110 samples, 0.88%)</title><rect x="142.5" y="211.0" width="10.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="145.5" y="222.0"></text>
</g>
<g>
<title>CFAllocatorDeallocate (5 samples, 0.04%)</title><rect x="143.1" y="195.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="146.1" y="206.0"></text>
</g>
<g>
<title>__CFAllocatorSystemDeallocate (4 samples, 0.03%)</title><rect x="143.6" y="195.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="146.6" y="206.0"></text>
</g>
<g>
<title>free_tiny (88 samples, 0.70%)</title><rect x="144.2" y="195.0" width="8.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="147.2" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (63 samples, 0.50%)</title><rect x="146.5" y="179.0" width="5.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="149.5" y="190.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (19 samples, 0.15%)</title><rect x="150.1" y="163.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="153.1" y="174.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (6 samples, 0.05%)</title><rect x="151.9" y="163.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="154.9" y="174.0"></text>
</g>
<g>
<title>malloc_zone_free (3 samples, 0.02%)</title><rect x="152.5" y="195.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="155.5" y="206.0"></text>
</g>
<g>
<title>default_zone_free (4 samples, 0.03%)</title><rect x="152.8" y="211.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="155.8" y="222.0"></text>
</g>
<g>
<title>free_tiny (65 samples, 0.52%)</title><rect x="153.2" y="211.0" width="6.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="156.2" y="222.0"></text>
</g>
<g>
<title>tiny_free_no_lock (39 samples, 0.31%)</title><rect x="155.6" y="195.0" width="3.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="158.6" y="206.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (16 samples, 0.13%)</title><rect x="157.7" y="179.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="160.7" y="190.0"></text>
</g>
<g>
<title>malloc_zone_free (6 samples, 0.05%)</title><rect x="159.3" y="211.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="162.3" y="222.0"></text>
</g>
<g>
<title>szone_free (7 samples, 0.06%)</title><rect x="160.0" y="211.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="163.0" y="222.0"></text>
</g>
<g>
<title>__CFStringAppendBytes (194 samples, 1.54%)</title><rect x="160.8" y="227.0" width="18.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="163.8" y="238.0"></text>
</g>
<g>
<title>_CFGetTSDCreateIfNeeded (4 samples, 0.03%)</title><rect x="163.2" y="211.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="166.2" y="222.0"></text>
</g>
<g>
<title>__CFStringChangeSizeMultiple (119 samples, 0.95%)</title><rect x="163.7" y="211.0" width="11.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="166.7" y="222.0"></text>
</g>
<g>
<title>__CFStrAllocateMutableContents (71 samples, 0.57%)</title><rect x="167.3" y="195.0" width="6.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="170.3" y="206.0"></text>
</g>
<g>
<title>malloc_zone_malloc (65 samples, 0.52%)</title><rect x="167.8" y="179.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="170.8" y="190.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (59 samples, 0.47%)</title><rect x="168.3" y="163.0" width="5.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="171.3" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (50 samples, 0.40%)</title><rect x="169.1" y="147.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="172.1" y="158.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (7 samples, 0.06%)</title><rect x="172.1" y="131.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="175.1" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (12 samples, 0.10%)</title><rect x="172.7" y="131.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="175.7" y="142.0"></text>
</g>
<g>
<title>default_zone_good_size (10 samples, 0.08%)</title><rect x="173.9" y="195.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="176.9" y="206.0"></text>
</g>
<g>
<title>__CFStringDecodeByteStream3 (29 samples, 0.23%)</title><rect x="174.9" y="211.0" width="2.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="177.9" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.04%)</title><rect x="177.1" y="195.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="180.1" y="206.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.02%)</title><rect x="177.6" y="211.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="180.6" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (6 samples, 0.05%)</title><rect x="177.9" y="211.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="180.9" y="222.0"></text>
</g>
<g>
<title>malloc_good_size (3 samples, 0.02%)</title><rect x="178.5" y="211.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="181.5" y="222.0"></text>
</g>
<g>
<title>szone_good_size (3 samples, 0.02%)</title><rect x="178.7" y="211.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="181.7" y="222.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (3 samples, 0.02%)</title><rect x="179.6" y="227.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="182.6" y="238.0"></text>
</g>
<g>
<title>free (16 samples, 0.13%)</title><rect x="179.9" y="227.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="182.9" y="238.0"></text>
</g>
<g>
<title>szone_size (9 samples, 0.07%)</title><rect x="180.5" y="211.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="183.5" y="222.0"></text>
</g>
<g>
<title>tiny_size (7 samples, 0.06%)</title><rect x="180.7" y="195.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="183.7" y="206.0"></text>
</g>
<g>
<title>free_tiny (19 samples, 0.15%)</title><rect x="181.4" y="227.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="184.4" y="238.0"></text>
</g>
<g>
<title>jni_NewString (298 samples, 2.37%)</title><rect x="183.1" y="227.0" width="28.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="186.1" y="238.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (4 samples, 0.03%)</title><rect x="185.7" y="211.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="188.7" y="222.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (7 samples, 0.06%)</title><rect x="186.2" y="211.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="189.2" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.03%)</title><rect x="186.9" y="211.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="189.9" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (47 samples, 0.37%)</title><rect x="187.6" y="211.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="190.6" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (12 samples, 0.10%)</title><rect x="187.8" y="195.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="190.8" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (30 samples, 0.24%)</title><rect x="189.1" y="195.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="192.1" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (28 samples, 0.22%)</title><rect x="189.1" y="179.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="192.1" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (25 samples, 0.20%)</title><rect x="189.3" y="163.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="192.3" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (25 samples, 0.20%)</title><rect x="189.3" y="147.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="192.3" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (5 samples, 0.04%)</title><rect x="190.1" y="131.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="193.1" y="142.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (6 samples, 0.05%)</title><rect x="191.1" y="131.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="194.1" y="142.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.02%)</title><rect x="191.4" y="115.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="194.4" y="126.0"></text>
</g>
<g>
<title>java_lang_String::create_oop_from_unicode(unsigned short const*, int, Thread*) (203 samples, 1.62%)</title><rect x="192.1" y="211.0" width="19.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.1" y="222.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short const*, int, Thread*) (202 samples, 1.61%)</title><rect x="192.2" y="195.0" width="18.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="195.2" y="206.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (4 samples, 0.03%)</title><rect x="193.5" y="179.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="196.5" y="190.0"></text>
</g>
<g>
<title>UNICODE::is_latin1(unsigned short const*, int) (8 samples, 0.06%)</title><rect x="194.0" y="179.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="197.0" y="190.0"></text>
</g>
<g>
<title>java_lang_String::basic_create(int, bool, Thread*) (174 samples, 1.39%)</title><rect x="194.8" y="179.0" width="16.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="197.8" y="190.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (9 samples, 0.07%)</title><rect x="196.3" y="163.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="199.3" y="174.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (6 samples, 0.05%)</title><rect x="196.6" y="147.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="199.6" y="158.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (6 samples, 0.05%)</title><rect x="197.3" y="163.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="200.3" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (63 samples, 0.50%)</title><rect x="197.9" y="163.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="200.9" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (56 samples, 0.45%)</title><rect x="198.6" y="147.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="201.6" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (46 samples, 0.37%)</title><rect x="198.8" y="131.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="201.8" y="142.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (12 samples, 0.10%)</title><rect x="199.2" y="115.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="202.2" y="126.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (5 samples, 0.04%)</title><rect x="199.9" y="99.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="202.9" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (3 samples, 0.02%)</title><rect x="200.7" y="115.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="203.7" y="126.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (6 samples, 0.05%)</title><rect x="201.0" y="115.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="204.0" y="126.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.03%)</title><rect x="201.6" y="115.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="204.6" y="126.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (10 samples, 0.08%)</title><rect x="201.9" y="115.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="204.9" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="202.6" y="99.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="205.6" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.02%)</title><rect x="203.5" y="131.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="206.5" y="142.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (69 samples, 0.55%)</title><rect x="203.8" y="163.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="206.8" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (56 samples, 0.45%)</title><rect x="204.8" y="147.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="207.8" y="158.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (44 samples, 0.35%)</title><rect x="205.4" y="131.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="208.4" y="142.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::check_out_of_memory() (3 samples, 0.02%)</title><rect x="206.7" y="115.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="209.7" y="126.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (6 samples, 0.05%)</title><rect x="207.0" y="115.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="210.0" y="126.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (3 samples, 0.02%)</title><rect x="207.3" y="99.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="210.3" y="110.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (9 samples, 0.07%)</title><rect x="208.5" y="115.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="211.5" y="126.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (5 samples, 0.04%)</title><rect x="208.9" y="99.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="211.9" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.03%)</title><rect x="209.6" y="131.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="212.6" y="142.0"></text>
</g>
<g>
<title>void ModRefBarrierSet::AccessBarrier&lt;573558ull, G1BarrierSet&gt;::oop_store_in_heap&lt;unsigned int&gt;(unsigned int*, oopDesc*) (9 samples, 0.07%)</title><rect x="210.3" y="163.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="213.3" y="174.0"></text>
</g>
<g>
<title>malloc (88 samples, 0.70%)</title><rect x="211.1" y="227.0" width="8.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="214.1" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (82 samples, 0.65%)</title><rect x="211.7" y="211.0" width="7.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="214.7" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (6 samples, 0.05%)</title><rect x="212.2" y="195.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="215.2" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (70 samples, 0.56%)</title><rect x="212.7" y="195.0" width="6.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="215.7" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (62 samples, 0.49%)</title><rect x="213.5" y="179.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="216.5" y="190.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (7 samples, 0.06%)</title><rect x="217.3" y="163.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="220.3" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (14 samples, 0.11%)</title><rect x="218.0" y="163.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="221.0" y="174.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="219.0" y="147.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="222.0" y="158.0"></text>
</g>
<g>
<title>objc_destructInstance (3 samples, 0.02%)</title><rect x="219.4" y="227.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="222.4" y="238.0"></text>
</g>
<g>
<title>szone_free (7 samples, 0.06%)</title><rect x="219.8" y="227.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="222.8" y="238.0"></text>
</g>
<g>
<title>szone_size (5 samples, 0.04%)</title><rect x="220.4" y="227.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="223.4" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.04%)</title><rect x="221.1" y="243.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="224.1" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (11 samples, 0.09%)</title><rect x="221.6" y="243.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="224.6" y="254.0"></text>
</g>
<g>
<title>readdir$INODE64 (1,125 samples, 8.96%)</title><rect x="222.6" y="243.0" width="105.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="225.6" y="254.0">readdir$INODE64</text>
</g>
<g>
<title>_readdir_unlocked$INODE64 (9 samples, 0.07%)</title><rect x="222.9" y="227.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="225.9" y="238.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1,113 samples, 8.86%)</title><rect x="223.7" y="227.0" width="104.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="226.7" y="238.0">rcmd_af.cano..</text>
</g>
<g>
<title>rpc_errlist (31 samples, 0.25%)</title><rect x="328.3" y="243.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="331.3" y="254.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (5 samples, 0.04%)</title><rect x="331.6" y="259.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="334.6" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.02%)</title><rect x="332.1" y="259.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="335.1" y="270.0"></text>
</g>
<g>
<title>readdir$INODE64 (3 samples, 0.02%)</title><rect x="332.3" y="259.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="335.3" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (13 samples, 0.10%)</title><rect x="332.6" y="291.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="335.6" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (13 samples, 0.10%)</title><rect x="332.6" y="275.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.6" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (12 samples, 0.10%)</title><rect x="332.7" y="259.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.7" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (12 samples, 0.10%)</title><rect x="332.7" y="243.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="335.7" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (3 samples, 0.02%)</title><rect x="332.7" y="227.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.7" y="238.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (3 samples, 0.02%)</title><rect x="332.7" y="211.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="335.7" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.07%)</title><rect x="333.0" y="227.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="336.0" y="238.0"></text>
</g>
<g>
<title>checkcast_arraycopy (4 samples, 0.03%)</title><rect x="333.5" y="211.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="336.5" y="222.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.02%)</title><rect x="333.8" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.8" y="318.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.02%)</title><rect x="333.8" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="336.8" y="302.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsKt.removePrefix (37 samples, 0.29%)</title><rect x="334.1" y="307.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="337.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.02%)</title><rect x="335.0" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.02%)</title><rect x="335.0" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.0" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.02%)</title><rect x="335.0" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.0" y="270.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsKt.startsWith$default (24 samples, 0.19%)</title><rect x="335.3" y="291.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="338.3" y="302.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsKt.startsWith (24 samples, 0.19%)</title><rect x="335.3" y="275.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.3" y="286.0"></text>
</g>
<g>
<title>kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (4 samples, 0.03%)</title><rect x="335.4" y="259.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.4" y="270.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsJVMKt.startsWith$default (19 samples, 0.15%)</title><rect x="335.8" y="259.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.8" y="270.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsJVMKt.startsWith (17 samples, 0.14%)</title><rect x="336.0" y="243.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (17 samples, 0.14%)</title><rect x="336.0" y="227.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (14 samples, 0.11%)</title><rect x="336.3" y="211.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.3" y="222.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.06%)</title><rect x="336.9" y="195.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="339.9" y="206.0"></text>
</g>
<g>
<title>StandardSerializer.serialize (2,695 samples, 21.46%)</title><rect x="337.6" y="323.0" width="253.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.6" y="334.0">StandardSerializer.serialize</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2,580 samples, 20.54%)</title><rect x="337.7" y="307.0" width="242.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="340.7" y="318.0">com/dslplatform/json/DslJson.ser..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2,573 samples, 20.49%)</title><rect x="337.7" y="291.0" width="241.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.7" y="302.0">com/dslplatform/json/DslJson.ser..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (2,569 samples, 20.45%)</title><rect x="337.7" y="275.0" width="241.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.7" y="286.0">com/dslplatform/json/DslJson$3.w..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (2,569 samples, 20.45%)</title><rect x="337.7" y="259.0" width="241.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.7" y="270.0">com/dslplatform/json/DslJson$3.w..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (2,569 samples, 20.45%)</title><rect x="337.7" y="243.0" width="241.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.7" y="254.0">com/dslplatform/json/DslJson.ser..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (1,574 samples, 12.53%)</title><rect x="342.8" y="227.0" width="147.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.8" y="238.0">com/dslplatform/jso..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (1,566 samples, 12.47%)</title><rect x="343.5" y="211.0" width="147.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.5" y="222.0">com/dslplatform/jso..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (956 samples, 7.61%)</title><rect x="343.7" y="195.0" width="89.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="346.7" y="206.0">com/dslpla..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (948 samples, 7.55%)</title><rect x="343.9" y="179.0" width="89.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.9" y="190.0">com/dslpla..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (946 samples, 7.53%)</title><rect x="344.1" y="163.0" width="88.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.1" y="174.0">com/dslpla..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (603 samples, 4.80%)</title><rect x="349.4" y="147.0" width="56.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="352.4" y="158.0">com/ds..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (591 samples, 4.71%)</title><rect x="350.6" y="131.0" width="55.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.6" y="142.0">com/d..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (527 samples, 4.20%)</title><rect x="350.8" y="115.0" width="49.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.8" y="126.0">com/d..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (344 samples, 2.74%)</title><rect x="352.5" y="99.0" width="32.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.5" y="110.0">co..</text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (196 samples, 1.56%)</title><rect x="366.3" y="83.0" width="18.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.3" y="94.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.06%)</title><rect x="384.0" y="67.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.0" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (164 samples, 1.31%)</title><rect x="384.9" y="99.0" width="15.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.9" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (24 samples, 0.19%)</title><rect x="393.2" y="83.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.2" y="94.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (12 samples, 0.10%)</title><rect x="395.5" y="83.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.5" y="94.0"></text>
</g>
<g>
<title>itable stub (39 samples, 0.31%)</title><rect x="396.6" y="83.0" width="3.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="399.6" y="94.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (14 samples, 0.11%)</title><rect x="400.3" y="115.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.3" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (11 samples, 0.09%)</title><rect x="400.5" y="99.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.5" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (11 samples, 0.09%)</title><rect x="400.5" y="83.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.5" y="94.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (11 samples, 0.09%)</title><rect x="400.5" y="67.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="403.5" y="78.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (9 samples, 0.07%)</title><rect x="400.7" y="51.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.7" y="62.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.writeFirstBuf (5 samples, 0.04%)</title><rect x="401.1" y="35.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.1" y="46.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (48 samples, 0.38%)</title><rect x="401.6" y="115.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="404.6" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (43 samples, 0.34%)</title><rect x="402.0" y="99.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.0" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (43 samples, 0.34%)</title><rect x="402.0" y="83.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.0" y="94.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (43 samples, 0.34%)</title><rect x="402.0" y="67.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="405.0" y="78.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.04%)</title><rect x="405.5" y="51.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.5" y="62.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.04%)</title><rect x="405.5" y="35.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.5" y="46.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (4 samples, 0.03%)</title><rect x="406.1" y="147.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.1" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (53 samples, 0.42%)</title><rect x="406.5" y="147.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.5" y="158.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.06%)</title><rect x="409.2" y="131.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="412.2" y="142.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (6 samples, 0.05%)</title><rect x="409.3" y="115.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="412.3" y="126.0"></text>
</g>
<g>
<title>java/lang/String.length (17 samples, 0.14%)</title><rect x="409.8" y="131.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.8" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (87 samples, 0.69%)</title><rect x="411.4" y="147.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.4" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (83 samples, 0.66%)</title><rect x="411.8" y="131.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.8" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (82 samples, 0.65%)</title><rect x="411.9" y="115.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="414.9" y="126.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (53 samples, 0.42%)</title><rect x="419.6" y="147.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.6" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.03%)</title><rect x="419.7" y="131.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="422.7" y="142.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.02%)</title><rect x="419.8" y="115.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="422.8" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.02%)</title><rect x="419.8" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="422.8" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.02%)</title><rect x="419.8" y="83.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="422.8" y="94.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.02%)</title><rect x="419.8" y="67.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="422.8" y="78.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.02%)</title><rect x="419.8" y="51.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="422.8" y="62.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (48 samples, 0.38%)</title><rect x="420.1" y="131.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="423.1" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (44 samples, 0.35%)</title><rect x="420.5" y="115.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.5" y="126.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (11 samples, 0.09%)</title><rect x="424.6" y="147.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.6" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (77 samples, 0.61%)</title><rect x="425.7" y="147.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.7" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (76 samples, 0.61%)</title><rect x="425.8" y="131.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.8" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (71 samples, 0.57%)</title><rect x="426.3" y="115.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.3" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (17 samples, 0.14%)</title><rect x="431.4" y="99.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.4" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (6 samples, 0.05%)</title><rect x="433.0" y="179.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.0" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (608 samples, 4.84%)</title><rect x="433.5" y="195.0" width="57.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="436.5" y="206.0">com/ds..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.extractActualType (25 samples, 0.20%)</title><rect x="438.6" y="179.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.6" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (389 samples, 3.10%)</title><rect x="440.9" y="179.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="443.9" y="190.0">com..</text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (334 samples, 2.66%)</title><rect x="445.8" y="163.0" width="31.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.8" y="174.0">co..</text>
</g>
<g>
<title>java/lang/Class.getName (14 samples, 0.11%)</title><rect x="454.9" y="147.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="457.9" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 0.10%)</title><rect x="455.0" y="131.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="458.0" y="142.0"></text>
</g>
<g>
<title>java/util/HashSet.add (223 samples, 1.78%)</title><rect x="456.3" y="147.0" width="20.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="459.3" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.put (219 samples, 1.74%)</title><rect x="456.6" y="131.0" width="20.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="459.6" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (168 samples, 1.34%)</title><rect x="458.0" y="115.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.0" y="126.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (168 samples, 1.34%)</title><rect x="458.0" y="99.0" width="15.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="461.0" y="110.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.04%)</title><rect x="473.4" y="83.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.4" y="94.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 0.29%)</title><rect x="473.8" y="115.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.8" y="126.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.06%)</title><rect x="476.5" y="99.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.5" y="110.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (8 samples, 0.06%)</title><rect x="476.5" y="83.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.5" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.iterator (3 samples, 0.02%)</title><rect x="477.2" y="163.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (140 samples, 1.11%)</title><rect x="477.5" y="179.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.5" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (24 samples, 0.19%)</title><rect x="482.9" y="163.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.9" y="174.0"></text>
</g>
<g>
<title>itable stub (28 samples, 0.22%)</title><rect x="485.2" y="163.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="488.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (29 samples, 0.23%)</title><rect x="487.9" y="163.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="490.9" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (4 samples, 0.03%)</title><rect x="490.6" y="227.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="493.6" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (509 samples, 4.05%)</title><rect x="491.0" y="227.0" width="47.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.0" y="238.0">com/..</text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.enlargeOrFlush (461 samples, 3.67%)</title><rect x="495.2" y="211.0" width="43.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.2" y="222.0">com/..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (459 samples, 3.65%)</title><rect x="495.4" y="195.0" width="43.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="498.4" y="206.0">java..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (448 samples, 3.57%)</title><rect x="495.5" y="179.0" width="42.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.5" y="190.0">java..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (447 samples, 3.56%)</title><rect x="495.6" y="163.0" width="42.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.6" y="174.0">jav..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (447 samples, 3.56%)</title><rect x="495.6" y="147.0" width="42.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="498.6" y="158.0">jav..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (441 samples, 3.51%)</title><rect x="496.2" y="131.0" width="41.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="499.2" y="142.0">Jav..</text>
</g>
<g>
<title>writeBytes (438 samples, 3.49%)</title><rect x="496.5" y="115.0" width="41.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="499.5" y="126.0">wri..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.02%)</title><rect x="496.9" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="499.9" y="110.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.02%)</title><rect x="497.2" y="99.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="500.2" y="110.0"></text>
</g>
<g>
<title>jni_GetArrayLength (6 samples, 0.05%)</title><rect x="498.0" y="99.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="501.0" y="110.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (12 samples, 0.10%)</title><rect x="498.5" y="99.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="501.5" y="110.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (9 samples, 0.07%)</title><rect x="498.7" y="83.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="501.7" y="94.0"></text>
</g>
<g>
<title>jni_GetObjectField (4 samples, 0.03%)</title><rect x="499.7" y="99.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="502.7" y="110.0"></text>
</g>
<g>
<title>write (399 samples, 3.18%)</title><rect x="500.1" y="99.0" width="37.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="503.1" y="110.0">write</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.08%)</title><rect x="537.6" y="179.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="540.6" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (202 samples, 1.61%)</title><rect x="538.8" y="227.0" width="19.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="541.8" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (194 samples, 1.54%)</title><rect x="539.6" y="211.0" width="18.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.6" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (183 samples, 1.46%)</title><rect x="540.6" y="195.0" width="17.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="543.6" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (58 samples, 0.46%)</title><rect x="557.8" y="227.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="560.8" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (57 samples, 0.45%)</title><rect x="557.9" y="211.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="560.9" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (57 samples, 0.45%)</title><rect x="557.9" y="195.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="560.9" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (4 samples, 0.03%)</title><rect x="563.3" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.3" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (162 samples, 1.29%)</title><rect x="563.7" y="227.0" width="15.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.7" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (162 samples, 1.29%)</title><rect x="563.7" y="211.0" width="15.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.7" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (162 samples, 1.29%)</title><rect x="563.7" y="195.0" width="15.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.7" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (126 samples, 1.00%)</title><rect x="567.1" y="179.0" width="11.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.1" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (4 samples, 0.03%)</title><rect x="579.0" y="275.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.0" y="286.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.flush (7 samples, 0.06%)</title><rect x="579.4" y="291.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="582.4" y="302.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (7 samples, 0.06%)</title><rect x="579.4" y="275.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.4" y="286.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (7 samples, 0.06%)</title><rect x="579.4" y="259.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="582.4" y="270.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (7 samples, 0.06%)</title><rect x="579.4" y="243.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="582.4" y="254.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (7 samples, 0.06%)</title><rect x="579.4" y="227.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="582.4" y="238.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (7 samples, 0.06%)</title><rect x="579.4" y="211.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="582.4" y="222.0"></text>
</g>
<g>
<title>writeBytes (7 samples, 0.06%)</title><rect x="579.4" y="195.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="582.4" y="206.0"></text>
</g>
<g>
<title>write (6 samples, 0.05%)</title><rect x="579.5" y="179.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="582.5" y="190.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (56 samples, 0.45%)</title><rect x="580.3" y="307.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.3" y="318.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (8 samples, 0.06%)</title><rect x="580.3" y="291.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.3" y="302.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (7 samples, 0.06%)</title><rect x="580.4" y="275.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="583.4" y="286.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (7 samples, 0.06%)</title><rect x="580.4" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="583.4" y="270.0"></text>
</g>
<g>
<title>fileOpen (6 samples, 0.05%)</title><rect x="580.4" y="243.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="583.4" y="254.0"></text>
</g>
<g>
<title>module_mutex (3 samples, 0.02%)</title><rect x="580.6" y="227.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="583.6" y="238.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (48 samples, 0.38%)</title><rect x="581.0" y="291.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.0" y="302.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (48 samples, 0.38%)</title><rect x="581.0" y="275.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="584.0" y="286.0"></text>
</g>
<g>
<title>fileOpen (47 samples, 0.37%)</title><rect x="581.1" y="259.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="584.1" y="270.0"></text>
</g>
<g>
<title>module_mutex (42 samples, 0.33%)</title><rect x="581.6" y="243.0" width="3.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="584.6" y="254.0"></text>
</g>
<g>
<title>kotlin/io/CloseableKt.closeFinally (56 samples, 0.45%)</title><rect x="585.5" y="307.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.5" y="318.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.close (56 samples, 0.45%)</title><rect x="585.5" y="291.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.5" y="302.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.closeAll (54 samples, 0.43%)</title><rect x="585.7" y="275.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.7" y="286.0"></text>
</g>
<g>
<title>java/io/FileOutputStream$1.close (53 samples, 0.42%)</title><rect x="585.8" y="259.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.8" y="270.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close (53 samples, 0.42%)</title><rect x="585.8" y="243.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.8" y="254.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close0 (51 samples, 0.41%)</title><rect x="585.8" y="227.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.8" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (50 samples, 0.40%)</title><rect x="585.9" y="211.0" width="4.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="588.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (50 samples, 0.40%)</title><rect x="591.3" y="387.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="594.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (50 samples, 0.40%)</title><rect x="591.3" y="371.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (48 samples, 0.38%)</title><rect x="591.5" y="355.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (43 samples, 0.34%)</title><rect x="591.9" y="339.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (43 samples, 0.34%)</title><rect x="591.9" y="323.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.9" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (41 samples, 0.33%)</title><rect x="592.1" y="307.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="595.1" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (39 samples, 0.31%)</title><rect x="592.3" y="291.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="595.3" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (38 samples, 0.30%)</title><rect x="592.3" y="275.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="595.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializeAgentPropertiesToByteArray (3 samples, 0.02%)</title><rect x="596.2" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializePropertiesToByteArray (3 samples, 0.02%)</title><rect x="596.2" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="599.2" y="430.0"></text>
</g>
<g>
<title>java/util/Properties.store (3 samples, 0.02%)</title><rect x="596.2" y="403.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="599.2" y="414.0"></text>
</g>
<g>
<title>java/util/Properties.store0 (3 samples, 0.02%)</title><rect x="596.2" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.2" y="398.0"></text>
</g>
<g>
<title>java/util/Date.toString (3 samples, 0.02%)</title><rect x="596.2" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="599.2" y="382.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt$thread$thread$1.run (5,106 samples, 40.65%)</title><rect x="596.5" y="435.0" width="479.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="599.5" y="446.0">kotlin/concurrent/ThreadsKt$thread$thread$1.run</text>
</g>
<g>
<title>MainKt$main$1.invoke (5,106 samples, 40.65%)</title><rect x="596.5" y="419.0" width="479.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="599.5" y="430.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt$main$1.invoke (5,106 samples, 40.65%)</title><rect x="596.5" y="403.0" width="479.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.5" y="414.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt.test (5,106 samples, 40.65%)</title><rect x="596.5" y="387.0" width="479.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="599.5" y="398.0">MainKt.test</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.03%)</title><rect x="617.5" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="620.5" y="382.0"></text>
</g>
<g>
<title>StandardLogStructuredMergeTree.put (4,411 samples, 35.12%)</title><rect x="617.9" y="371.0" width="414.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.9" y="382.0">StandardLogStructuredMergeTree.put</text>
</g>
<g>
<title>StandardMemTable.put (1,840 samples, 14.65%)</title><rect x="624.9" y="355.0" width="172.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="627.9" y="366.0">StandardMemTable.put</text>
</g>
<g>
<title>java/util/TreeMap.put (1,834 samples, 14.60%)</title><rect x="625.5" y="339.0" width="172.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.5" y="350.0">java/util/TreeMap.put</text>
</g>
<g>
<title>java/lang/String.compareTo (81 samples, 0.64%)</title><rect x="714.7" y="323.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (80 samples, 0.64%)</title><rect x="714.8" y="307.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="717.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (10 samples, 0.08%)</title><rect x="721.4" y="291.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.4" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (8 samples, 0.06%)</title><rect x="722.3" y="323.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="725.3" y="334.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (6 samples, 0.05%)</title><rect x="722.5" y="307.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="725.5" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (795 samples, 6.33%)</title><rect x="723.1" y="323.0" width="74.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="726.1" y="334.0">java/uti..</text>
</g>
<g>
<title>java/util/TreeMap.parentOf (5 samples, 0.04%)</title><rect x="725.8" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.8" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (12 samples, 0.10%)</title><rect x="726.4" y="307.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.4" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (745 samples, 5.93%)</title><rect x="727.5" y="307.0" width="70.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.5" y="318.0">java/ut..</text>
</g>
<g>
<title>java/util/TreeMap.setColor (3 samples, 0.02%)</title><rect x="797.5" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.5" y="318.0"></text>
</g>
<g>
<title>StandardMemTable.size (6 samples, 0.05%)</title><rect x="797.8" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.8" y="366.0"></text>
</g>
<g>
<title>StandardSSTableManager.addTableAsync (24 samples, 0.19%)</title><rect x="798.3" y="355.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="801.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (22 samples, 0.18%)</title><rect x="798.5" y="339.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (20 samples, 0.16%)</title><rect x="798.7" y="323.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (19 samples, 0.15%)</title><rect x="798.8" y="307.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (18 samples, 0.14%)</title><rect x="798.8" y="291.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="801.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 0.14%)</title><rect x="798.8" y="275.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="801.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 0.14%)</title><rect x="798.8" y="259.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 0.14%)</title><rect x="798.8" y="243.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 0.14%)</title><rect x="798.8" y="227.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="801.8" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (18 samples, 0.14%)</title><rect x="798.8" y="211.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.8" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (18 samples, 0.14%)</title><rect x="798.8" y="195.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="801.8" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.14%)</title><rect x="798.9" y="179.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="801.9" y="190.0"></text>
</g>
<g>
<title>StandardWriteAheadLogManager.append (2,459 samples, 19.58%)</title><rect x="800.6" y="355.0" width="231.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="803.6" y="366.0">StandardWriteAheadLogManager.ap..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2,198 samples, 17.50%)</title><rect x="803.1" y="339.0" width="206.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="806.1" y="350.0">com/dslplatform/json/DslJso..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (1,805 samples, 14.37%)</title><rect x="807.5" y="323.0" width="169.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.5" y="334.0">com/dslplatform/json/D..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (1,097 samples, 8.73%)</title><rect x="808.0" y="307.0" width="103.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="811.0" y="318.0">com/dslplatf..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (1,088 samples, 8.66%)</title><rect x="808.6" y="291.0" width="102.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.6" y="302.0">com/dslplatf..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (1,087 samples, 8.65%)</title><rect x="808.7" y="275.0" width="102.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.7" y="286.0">com/dslplatf..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (718 samples, 5.72%)</title><rect x="815.0" y="259.0" width="67.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.0" y="270.0">com/dsl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (708 samples, 5.64%)</title><rect x="815.9" y="243.0" width="66.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="818.9" y="254.0">com/dsl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (627 samples, 4.99%)</title><rect x="816.2" y="227.0" width="58.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="819.2" y="238.0">com/ds..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (377 samples, 3.00%)</title><rect x="817.7" y="211.0" width="35.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="820.7" y="222.0">com..</text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (221 samples, 1.76%)</title><rect x="832.1" y="195.0" width="20.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="835.1" y="206.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.06%)</title><rect x="852.3" y="179.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="855.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (234 samples, 1.86%)</title><rect x="853.1" y="211.0" width="22.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="856.1" y="222.0">j..</text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (3 samples, 0.02%)</title><rect x="865.0" y="195.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.0" y="206.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (3 samples, 0.02%)</title><rect x="865.0" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="868.0" y="190.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.02%)</title><rect x="865.0" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="868.0" y="174.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.02%)</title><rect x="865.0" y="147.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.0" y="158.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.02%)</title><rect x="865.0" y="131.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="868.0" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.02%)</title><rect x="865.0" y="115.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="868.0" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (25 samples, 0.20%)</title><rect x="865.3" y="195.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.3" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (25 samples, 0.20%)</title><rect x="867.7" y="195.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.7" y="206.0"></text>
</g>
<g>
<title>itable stub (52 samples, 0.41%)</title><rect x="870.0" y="195.0" width="4.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="873.0" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (20 samples, 0.16%)</title><rect x="875.1" y="227.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="878.1" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (17 samples, 0.14%)</title><rect x="875.4" y="211.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="878.4" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (17 samples, 0.14%)</title><rect x="875.4" y="195.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="878.4" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (17 samples, 0.14%)</title><rect x="875.4" y="179.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="878.4" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.ensureCapacity (5 samples, 0.04%)</title><rect x="875.4" y="163.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="878.4" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (12 samples, 0.10%)</title><rect x="875.8" y="163.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="878.8" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.writeFirstBuf (10 samples, 0.08%)</title><rect x="876.0" y="147.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="879.0" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (58 samples, 0.46%)</title><rect x="877.0" y="227.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="880.0" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (56 samples, 0.45%)</title><rect x="877.1" y="211.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="880.1" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (56 samples, 0.45%)</title><rect x="877.1" y="195.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="880.1" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (56 samples, 0.45%)</title><rect x="877.1" y="179.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="880.1" y="190.0"></text>
</g>
<g>
<title>java/lang/String.charAt (11 samples, 0.09%)</title><rect x="881.2" y="163.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (10 samples, 0.08%)</title><rect x="881.3" y="147.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="884.3" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (4 samples, 0.03%)</title><rect x="882.4" y="259.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.4" y="270.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (66 samples, 0.53%)</title><rect x="882.8" y="259.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="885.8" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.03%)</title><rect x="887.1" y="243.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="890.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.02%)</title><rect x="887.2" y="227.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="890.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.length (16 samples, 0.13%)</title><rect x="887.5" y="243.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="890.5" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (73 samples, 0.58%)</title><rect x="889.0" y="259.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="892.0" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (73 samples, 0.58%)</title><rect x="889.0" y="243.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="892.0" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (67 samples, 0.53%)</title><rect x="889.6" y="227.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="892.6" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (67 samples, 0.53%)</title><rect x="895.8" y="259.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="898.8" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (59 samples, 0.47%)</title><rect x="896.6" y="243.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="899.6" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (52 samples, 0.41%)</title><rect x="897.3" y="227.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="900.3" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (6 samples, 0.05%)</title><rect x="901.5" y="211.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="904.5" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (10 samples, 0.08%)</title><rect x="902.1" y="259.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="905.1" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (82 samples, 0.65%)</title><rect x="903.1" y="259.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.1" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (81 samples, 0.64%)</title><rect x="903.2" y="243.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="906.2" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (74 samples, 0.59%)</title><rect x="903.8" y="227.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.8" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (20 samples, 0.16%)</title><rect x="908.9" y="211.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="911.9" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (3 samples, 0.02%)</title><rect x="910.8" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="913.8" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (703 samples, 5.60%)</title><rect x="911.1" y="307.0" width="66.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="914.1" y="318.0">com/dsl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.extractActualType (11 samples, 0.09%)</title><rect x="913.2" y="291.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.2" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (534 samples, 4.25%)</title><rect x="914.3" y="291.0" width="50.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="917.3" y="302.0">com/d..</text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (458 samples, 3.65%)</title><rect x="921.3" y="275.0" width="43.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="924.3" y="286.0">com/..</text>
</g>
<g>
<title>java/lang/Class.getName (7 samples, 0.06%)</title><rect x="934.1" y="259.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="937.1" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.06%)</title><rect x="934.1" y="243.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.1" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.add (315 samples, 2.51%)</title><rect x="934.7" y="259.0" width="29.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="937.7" y="270.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (312 samples, 2.48%)</title><rect x="935.0" y="243.0" width="29.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.0" y="254.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (224 samples, 1.78%)</title><rect x="935.8" y="227.0" width="21.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="938.8" y="238.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (224 samples, 1.78%)</title><rect x="935.8" y="211.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.8" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.03%)</title><rect x="956.4" y="195.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="959.4" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (80 samples, 0.64%)</title><rect x="956.8" y="227.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="959.8" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.06%)</title><rect x="963.7" y="211.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="966.7" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (7 samples, 0.06%)</title><rect x="963.7" y="195.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="966.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (133 samples, 1.06%)</title><rect x="964.6" y="291.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="967.6" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (20 samples, 0.16%)</title><rect x="972.1" y="275.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="975.1" y="286.0"></text>
</g>
<g>
<title>itable stub (32 samples, 0.25%)</title><rect x="974.0" y="275.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="977.0" y="286.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.flush (300 samples, 2.39%)</title><rect x="977.1" y="323.0" width="28.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.1" y="334.0">co..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (280 samples, 2.23%)</title><rect x="979.0" y="307.0" width="26.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="982.0" y="318.0">j..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (237 samples, 1.89%)</title><rect x="980.6" y="291.0" width="22.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="983.6" y="302.0">j..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (234 samples, 1.86%)</title><rect x="980.9" y="275.0" width="22.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.9" y="286.0">j..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (233 samples, 1.86%)</title><rect x="981.0" y="259.0" width="21.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="984.0" y="270.0">j..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (230 samples, 1.83%)</title><rect x="981.2" y="243.0" width="21.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="984.2" y="254.0">J..</text>
</g>
<g>
<title>writeBytes (227 samples, 1.81%)</title><rect x="981.5" y="227.0" width="21.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="984.5" y="238.0">w..</text>
</g>
<g>
<title>jni_ExceptionOccurred (3 samples, 0.02%)</title><rect x="982.0" y="211.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="985.0" y="222.0"></text>
</g>
<g>
<title>jni_GetArrayLength (3 samples, 0.02%)</title><rect x="982.3" y="211.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="985.3" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.06%)</title><rect x="982.6" y="211.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="985.6" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (6 samples, 0.05%)</title><rect x="982.7" y="195.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="985.7" y="206.0"></text>
</g>
<g>
<title>jni_GetObjectField (9 samples, 0.07%)</title><rect x="983.3" y="211.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="986.3" y="222.0"></text>
</g>
<g>
<title>write (199 samples, 1.58%)</title><rect x="984.2" y="211.0" width="18.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="987.2" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (8 samples, 0.06%)</title><rect x="1002.9" y="291.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1005.9" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (18 samples, 0.14%)</title><rect x="1003.6" y="291.0" width="1.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1006.6" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (46 samples, 0.37%)</title><rect x="1005.3" y="323.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1008.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (17 samples, 0.14%)</title><rect x="1007.8" y="307.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1010.8" y="318.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (179 samples, 1.43%)</title><rect x="1009.6" y="339.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1012.6" y="350.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (179 samples, 1.43%)</title><rect x="1009.6" y="323.0" width="16.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1012.6" y="334.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (97 samples, 0.77%)</title><rect x="1013.8" y="307.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1016.8" y="318.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (97 samples, 0.77%)</title><rect x="1013.8" y="291.0" width="9.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1016.8" y="302.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (96 samples, 0.76%)</title><rect x="1013.9" y="275.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1016.9" y="286.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (96 samples, 0.76%)</title><rect x="1013.9" y="259.0" width="9.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1016.9" y="270.0"></text>
</g>
<g>
<title>writeBytes (96 samples, 0.76%)</title><rect x="1013.9" y="243.0" width="9.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1016.9" y="254.0"></text>
</g>
<g>
<title>jni_GetArrayLength (3 samples, 0.02%)</title><rect x="1014.2" y="227.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1017.2" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.05%)</title><rect x="1014.5" y="227.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1017.5" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.03%)</title><rect x="1014.7" y="211.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1017.7" y="222.0"></text>
</g>
<g>
<title>write (82 samples, 0.65%)</title><rect x="1015.3" y="227.0" width="7.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1018.3" y="238.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.04%)</title><rect x="1023.0" y="307.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1026.0" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (32 samples, 0.25%)</title><rect x="1023.4" y="307.0" width="3.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1026.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (55 samples, 0.44%)</title><rect x="1026.4" y="339.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (53 samples, 0.42%)</title><rect x="1026.6" y="323.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1029.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (53 samples, 0.42%)</title><rect x="1026.6" y="307.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1029.6" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (37 samples, 0.29%)</title><rect x="1028.1" y="291.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1031.1" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (18 samples, 0.14%)</title><rect x="1029.9" y="275.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1032.9" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (5 samples, 0.04%)</title><rect x="1031.6" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1034.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.03%)</title><rect x="1032.7" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1035.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.03%)</title><rect x="1033.1" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1036.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.02%)</title><rect x="1033.2" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.2" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (32 samples, 0.25%)</title><rect x="1033.5" y="371.0" width="3.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1036.5" y="382.0"></text>
</g>
<g>
<title>kotlin/TuplesKt.to (22 samples, 0.18%)</title><rect x="1036.5" y="371.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1039.5" y="382.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.mapOf (401 samples, 3.19%)</title><rect x="1038.6" y="371.0" width="37.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1041.6" y="382.0">kot..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.02%)</title><rect x="1040.8" y="355.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.8" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.02%)</title><rect x="1040.8" y="339.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.8" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.02%)</title><rect x="1040.8" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.8" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.02%)</title><rect x="1040.8" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.8" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.02%)</title><rect x="1040.8" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1043.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.02%)</title><rect x="1040.8" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.8" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (4 samples, 0.03%)</title><rect x="1041.1" y="355.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1044.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (4 samples, 0.03%)</title><rect x="1041.1" y="339.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1044.1" y="350.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.toMap (370 samples, 2.95%)</title><rect x="1041.5" y="355.0" width="34.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1044.5" y="366.0">ko..</text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.putAll (370 samples, 2.95%)</title><rect x="1041.5" y="339.0" width="34.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1044.5" y="350.0">ko..</text>
</g>
<g>
<title>java/util/HashMap.put (312 samples, 2.48%)</title><rect x="1041.9" y="323.0" width="29.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1044.9" y="334.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.08%)</title><rect x="1043.1" y="307.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1046.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (290 samples, 2.31%)</title><rect x="1044.0" y="307.0" width="27.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.0" y="318.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (15 samples, 0.12%)</title><rect x="1051.7" y="291.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (15 samples, 0.12%)</title><rect x="1051.7" y="275.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1054.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (48 samples, 0.38%)</title><rect x="1053.1" y="291.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1056.1" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (35 samples, 0.28%)</title><rect x="1057.6" y="291.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1060.6" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (110 samples, 0.88%)</title><rect x="1060.9" y="291.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1063.9" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$Entry.&lt;init&gt; (10 samples, 0.08%)</title><rect x="1067.1" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1070.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (10 samples, 0.08%)</title><rect x="1067.1" y="259.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1070.1" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (34 samples, 0.27%)</title><rect x="1068.1" y="275.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1071.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.09%)</title><rect x="1071.2" y="323.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1074.2" y="334.0"></text>
</g>
<g>
<title>kotlin/Pair.component1 (32 samples, 0.25%)</title><rect x="1072.3" y="323.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1075.3" y="334.0"></text>
</g>
<g>
<title>kotlin/Pair.component2 (10 samples, 0.08%)</title><rect x="1075.3" y="323.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.3" y="334.0"></text>
</g>
<g>
<title>thread_start (1,209 samples, 9.63%)</title><rect x="1076.4" y="435.0" width="113.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1079.4" y="446.0">thread_start</text>
</g>
<g>
<title>_pthread_start (1,209 samples, 9.63%)</title><rect x="1076.4" y="419.0" width="113.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1079.4" y="430.0">_pthread_start</text>
</g>
<g>
<title>thread_native_entry(Thread*) (1,209 samples, 9.63%)</title><rect x="1076.4" y="403.0" width="113.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1079.4" y="414.0">thread_native_..</text>
</g>
<g>
<title>Thread::call_run() (1,209 samples, 9.63%)</title><rect x="1076.4" y="387.0" width="113.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="398.0">Thread::call_r..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (95 samples, 0.76%)</title><rect x="1076.4" y="371.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.4" y="382.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (72 samples, 0.57%)</title><rect x="1076.4" y="355.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="366.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (72 samples, 0.57%)</title><rect x="1076.4" y="339.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.4" y="350.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (72 samples, 0.57%)</title><rect x="1076.4" y="323.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.4" y="334.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (72 samples, 0.57%)</title><rect x="1076.4" y="307.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="318.0"></text>
</g>
<g>
<title>G1RefineCardConcurrentlyClosure::do_card_ptr(signed char*, unsigned int) (72 samples, 0.57%)</title><rect x="1076.4" y="291.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.4" y="302.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (72 samples, 0.57%)</title><rect x="1076.4" y="275.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.4" y="286.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (66 samples, 0.53%)</title><rect x="1077.0" y="259.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.0" y="270.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (33 samples, 0.26%)</title><rect x="1077.5" y="243.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.5" y="254.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (15 samples, 0.12%)</title><rect x="1079.2" y="227.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.2" y="238.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (4 samples, 0.03%)</title><rect x="1080.3" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.3" y="222.0"></text>
</g>
<g>
<title>HeapRegion::is_obj_dead_with_size(oopDesc*, G1CMBitMap const*, unsigned long*) const (4 samples, 0.03%)</title><rect x="1081.0" y="243.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.0" y="254.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (18 samples, 0.14%)</title><rect x="1081.4" y="243.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.4" y="254.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_reference(void*, unsigned int) (3 samples, 0.02%)</title><rect x="1082.0" y="227.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.0" y="238.0"></text>
</g>
<g>
<title>void G1ConcurrentRefineOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.05%)</title><rect x="1082.5" y="227.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.5" y="238.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (23 samples, 0.18%)</title><rect x="1083.2" y="355.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.2" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (12 samples, 0.10%)</title><rect x="1083.2" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.2" y="350.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (12 samples, 0.10%)</title><rect x="1083.2" y="323.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.2" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (12 samples, 0.10%)</title><rect x="1083.2" y="307.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.2" y="318.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (8 samples, 0.06%)</title><rect x="1083.4" y="291.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.4" y="302.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (8 samples, 0.06%)</title><rect x="1083.4" y="275.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.4" y="286.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (3 samples, 0.02%)</title><rect x="1083.7" y="259.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.7" y="270.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (11 samples, 0.09%)</title><rect x="1084.3" y="339.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.3" y="350.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (11 samples, 0.09%)</title><rect x="1084.3" y="323.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.3" y="334.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (11 samples, 0.09%)</title><rect x="1084.3" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.3" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (11 samples, 0.09%)</title><rect x="1084.3" y="291.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.3" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.09%)</title><rect x="1084.3" y="275.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1087.3" y="286.0"></text>
</g>
<g>
<title>GangWorker::loop() (862 samples, 6.86%)</title><rect x="1085.4" y="371.0" width="81.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.4" y="382.0">GangWorke..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (150 samples, 1.19%)</title><rect x="1085.4" y="355.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.4" y="366.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (150 samples, 1.19%)</title><rect x="1085.4" y="339.0" width="14.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.4" y="350.0"></text>
</g>
<g>
<title>G1CMBitMap::iterate(G1CMBitMapClosure*, MemRegion) (135 samples, 1.07%)</title><rect x="1085.4" y="323.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.4" y="334.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (124 samples, 0.99%)</title><rect x="1086.2" y="307.0" width="11.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.2" y="318.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) (8 samples, 0.06%)</title><rect x="1086.9" y="291.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.9" y="302.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) (10 samples, 0.08%)</title><rect x="1087.7" y="291.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.7" y="302.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (95 samples, 0.76%)</title><rect x="1088.9" y="291.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.9" y="302.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1CMOopClosure&gt;(G1CMOopClosure*) (89 samples, 0.71%)</title><rect x="1089.3" y="275.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.3" y="286.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (9 samples, 0.07%)</title><rect x="1089.9" y="259.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.9" y="270.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements&lt;unsigned int, G1CMOopClosure&gt;(objArrayOopDesc*, G1CMOopClosure*) (4 samples, 0.03%)</title><rect x="1090.9" y="259.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.9" y="270.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (68 samples, 0.54%)</title><rect x="1091.3" y="259.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.3" y="270.0"></text>
</g>
<g>
<title>void G1CMOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (56 samples, 0.45%)</title><rect x="1092.4" y="243.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.4" y="254.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (55 samples, 0.44%)</title><rect x="1092.5" y="227.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.5" y="238.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (26 samples, 0.21%)</title><rect x="1095.2" y="211.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.2" y="222.0"></text>
</g>
<g>
<title>G1CMTask::drain_satb_buffers() (14 samples, 0.11%)</title><rect x="1098.2" y="323.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.2" y="334.0"></text>
</g>
<g>
<title>SATBMarkQueueSet::apply_closure_to_completed_buffer(SATBBufferClosure*) (13 samples, 0.10%)</title><rect x="1098.3" y="307.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.3" y="318.0"></text>
</g>
<g>
<title>G1CMSATBBufferClosure::do_buffer(void**, unsigned long) (13 samples, 0.10%)</title><rect x="1098.3" y="291.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.3" y="302.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (12 samples, 0.10%)</title><rect x="1098.4" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.4" y="286.0"></text>
</g>
<g>
<title>G1ConcurrentMark::mark_in_next_bitmap(unsigned int, HeapRegion*, oopDesc*) (12 samples, 0.10%)</title><rect x="1098.4" y="259.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.4" y="270.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (30 samples, 0.24%)</title><rect x="1099.5" y="355.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.5" y="366.0"></text>
</g>
<g>
<title>G1ConcurrentMark::scan_root_region(HeapRegion*, unsigned int) (30 samples, 0.24%)</title><rect x="1099.5" y="339.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.5" y="350.0"></text>
</g>
<g>
<title>int oopDesc::oop_iterate_size&lt;G1RootRegionScanClosure&gt;(G1RootRegionScanClosure*) (29 samples, 0.23%)</title><rect x="1099.5" y="323.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.5" y="334.0"></text>
</g>
<g>
<title>void G1RootRegionScanClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.02%)</title><rect x="1100.4" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.4" y="318.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (14 samples, 0.11%)</title><rect x="1100.9" y="307.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.9" y="318.0"></text>
</g>
<g>
<title>void G1RootRegionScanClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (11 samples, 0.09%)</title><rect x="1101.2" y="291.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.2" y="302.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::work(unsigned int) (3 samples, 0.02%)</title><rect x="1102.3" y="355.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.3" y="366.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (3 samples, 0.02%)</title><rect x="1102.3" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.3" y="350.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (3 samples, 0.02%)</title><rect x="1102.3" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.3" y="334.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (532 samples, 4.24%)</title><rect x="1102.6" y="355.0" width="50.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.6" y="366.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (526 samples, 4.19%)</title><rect x="1102.6" y="339.0" width="49.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.6" y="350.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (506 samples, 4.03%)</title><rect x="1102.6" y="323.0" width="47.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.6" y="334.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (496 samples, 3.95%)</title><rect x="1102.6" y="307.0" width="46.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.6" y="318.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.02%)</title><rect x="1109.0" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.0" y="302.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (424 samples, 3.38%)</title><rect x="1109.3" y="291.0" width="39.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.3" y="302.0">voi..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (332 samples, 2.64%)</title><rect x="1117.1" y="275.0" width="31.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.1" y="286.0">G1..</text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (55 samples, 0.44%)</title><rect x="1128.9" y="259.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.9" y="270.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (3 samples, 0.02%)</title><rect x="1134.1" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.1" y="270.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (4 samples, 0.03%)</title><rect x="1134.4" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.4" y="270.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (10 samples, 0.08%)</title><rect x="1134.9" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.9" y="270.0"></text>
</g>
<g>
<title>void ObjArrayKlass::oop_oop_iterate_elements&lt;unsigned int, G1ScanEvacuatedObjClosure&gt;(objArrayOopDesc*, G1ScanEvacuatedObjClosure*) (8 samples, 0.06%)</title><rect x="1135.8" y="259.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.8" y="270.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (8 samples, 0.06%)</title><rect x="1135.8" y="243.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.8" y="254.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (125 samples, 1.00%)</title><rect x="1136.5" y="259.0" width="11.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.5" y="270.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::enqueue_card_if_tracked&lt;unsigned int&gt;(unsigned int*, oopDesc*) (22 samples, 0.18%)</title><rect x="1138.0" y="243.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.0" y="254.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (87 samples, 0.69%)</title><rect x="1140.1" y="243.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="254.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.05%)</title><rect x="1148.3" y="275.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.3" y="286.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;ObjArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.02%)</title><rect x="1148.9" y="275.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.9" y="286.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (10 samples, 0.08%)</title><rect x="1149.2" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="318.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (20 samples, 0.16%)</title><rect x="1150.2" y="323.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.2" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (13 samples, 0.10%)</title><rect x="1150.2" y="307.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.2" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (13 samples, 0.10%)</title><rect x="1150.2" y="291.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.2" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.10%)</title><rect x="1150.2" y="275.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.2" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.10%)</title><rect x="1150.2" y="259.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1153.2" y="270.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (5 samples, 0.04%)</title><rect x="1152.0" y="339.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.0" y="350.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.04%)</title><rect x="1152.0" y="323.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.0" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (5 samples, 0.04%)</title><rect x="1152.0" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.0" y="318.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (5 samples, 0.04%)</title><rect x="1152.0" y="291.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.0" y="302.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (5 samples, 0.04%)</title><rect x="1152.0" y="275.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.0" y="286.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.04%)</title><rect x="1152.0" y="259.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.0" y="270.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (3 samples, 0.02%)</title><rect x="1152.0" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.0" y="254.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.02%)</title><rect x="1152.0" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.0" y="238.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.02%)</title><rect x="1152.0" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.0" y="222.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (119 samples, 0.95%)</title><rect x="1152.6" y="355.0" width="11.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.6" y="366.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (119 samples, 0.95%)</title><rect x="1152.6" y="339.0" width="11.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.6" y="350.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (119 samples, 0.95%)</title><rect x="1152.6" y="323.0" width="11.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="334.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator::move_if_below_tams() (5 samples, 0.04%)</title><rect x="1152.6" y="307.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="318.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::rebuild_rem_set_in_region(G1CMBitMap const*, HeapWord*, HeapWord*, HeapRegion*, MemRegion) (112 samples, 0.89%)</title><rect x="1153.1" y="307.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.1" y="318.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (16 samples, 0.13%)</title><rect x="1155.1" y="291.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.1" y="302.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (11 samples, 0.09%)</title><rect x="1155.5" y="275.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.5" y="286.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (6 samples, 0.05%)</title><rect x="1156.0" y="259.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::scan_for_references(oopDesc*, MemRegion) (69 samples, 0.55%)</title><rect x="1156.7" y="291.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.7" y="302.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.02%)</title><rect x="1159.3" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.3" y="286.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (37 samples, 0.29%)</title><rect x="1159.7" y="275.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.7" y="286.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_reference(void*, unsigned int) (4 samples, 0.03%)</title><rect x="1160.8" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.8" y="270.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (18 samples, 0.14%)</title><rect x="1161.5" y="259.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="270.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (3 samples, 0.02%)</title><rect x="1163.3" y="291.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="302.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (7 samples, 0.06%)</title><rect x="1163.8" y="355.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="366.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (4 samples, 0.03%)</title><rect x="1164.1" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.1" y="350.0"></text>
</g>
<g>
<title>CardTable::clear(MemRegion) (3 samples, 0.02%)</title><rect x="1164.2" y="323.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.2" y="334.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (13 samples, 0.10%)</title><rect x="1164.8" y="355.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.8" y="366.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (13 samples, 0.10%)</title><rect x="1164.8" y="339.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1167.8" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (174 samples, 1.39%)</title><rect x="1166.4" y="371.0" width="16.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.4" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (174 samples, 1.39%)</title><rect x="1166.4" y="355.0" width="16.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.4" y="366.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (165 samples, 1.31%)</title><rect x="1166.4" y="339.0" width="15.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.4" y="350.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (149 samples, 1.19%)</title><rect x="1166.4" y="323.0" width="14.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.4" y="334.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (122 samples, 0.97%)</title><rect x="1166.4" y="307.0" width="11.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.4" y="318.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (121 samples, 0.96%)</title><rect x="1166.5" y="291.0" width="11.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.5" y="302.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (71 samples, 0.57%)</title><rect x="1166.7" y="275.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.7" y="286.0"></text>
</g>
<g>
<title>Compile::Output() (7 samples, 0.06%)</title><rect x="1166.7" y="259.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.7" y="270.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.02%)</title><rect x="1166.7" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="254.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (4 samples, 0.03%)</title><rect x="1167.0" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.0" y="254.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.02%)</title><rect x="1167.5" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.5" y="270.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.02%)</title><rect x="1167.5" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.5" y="254.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.06%)</title><rect x="1168.0" y="259.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.0" y="270.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.06%)</title><rect x="1168.0" y="243.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.0" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 0.37%)</title><rect x="1168.9" y="259.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.9" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.03%)</title><rect x="1169.4" y="243.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.02%)</title><rect x="1169.8" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.8" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.06%)</title><rect x="1170.1" y="243.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.1" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.02%)</title><rect x="1170.5" y="227.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.5" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.06%)</title><rect x="1170.8" y="243.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.06%)</title><rect x="1171.5" y="243.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.5" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.02%)</title><rect x="1171.7" y="227.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.7" y="238.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.03%)</title><rect x="1172.9" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="254.0"></text>
</g>
<g>
<title>Chunk::next_chop() (4 samples, 0.03%)</title><rect x="1172.9" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="238.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (4 samples, 0.03%)</title><rect x="1172.9" y="211.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="222.0"></text>
</g>
<g>
<title>free_large (4 samples, 0.03%)</title><rect x="1172.9" y="195.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1175.9" y="206.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (4 samples, 0.03%)</title><rect x="1172.9" y="179.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1175.9" y="190.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (4 samples, 0.03%)</title><rect x="1172.9" y="163.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1175.9" y="174.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 0.32%)</title><rect x="1173.4" y="275.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.4" y="286.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (7 samples, 0.06%)</title><rect x="1173.5" y="259.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 0.06%)</title><rect x="1173.5" y="243.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.5" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (15 samples, 0.12%)</title><rect x="1174.7" y="259.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.03%)</title><rect x="1175.2" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.2" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (3 samples, 0.02%)</title><rect x="1175.3" y="227.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="238.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.04%)</title><rect x="1175.6" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="254.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.04%)</title><rect x="1175.6" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.6" y="238.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.04%)</title><rect x="1176.1" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="270.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.04%)</title><rect x="1176.1" y="243.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="254.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.02%)</title><rect x="1176.6" y="259.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.6" y="270.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.02%)</title><rect x="1176.6" y="243.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.05%)</title><rect x="1177.1" y="275.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.05%)</title><rect x="1177.1" y="259.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.05%)</title><rect x="1177.1" y="243.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.04%)</title><rect x="1177.1" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.04%)</title><rect x="1177.1" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.02%)</title><rect x="1177.2" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.02%)</title><rect x="1177.2" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.02%)</title><rect x="1177.2" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.02%)</title><rect x="1177.2" y="147.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.2" y="158.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (24 samples, 0.19%)</title><rect x="1178.0" y="307.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="318.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (24 samples, 0.19%)</title><rect x="1178.0" y="291.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="302.0"></text>
</g>
<g>
<title>Compilation::compile_method() (24 samples, 0.19%)</title><rect x="1178.0" y="275.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="286.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (21 samples, 0.17%)</title><rect x="1178.0" y="259.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.0" y="270.0"></text>
</g>
<g>
<title>Compilation::build_hir() (8 samples, 0.06%)</title><rect x="1178.0" y="243.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="254.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (6 samples, 0.05%)</title><rect x="1178.1" y="227.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="238.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (6 samples, 0.05%)</title><rect x="1178.1" y="211.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (6 samples, 0.05%)</title><rect x="1178.1" y="195.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.03%)</title><rect x="1178.2" y="179.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.03%)</title><rect x="1178.2" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.02%)</title><rect x="1178.3" y="147.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="158.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (12 samples, 0.10%)</title><rect x="1178.8" y="243.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (4 samples, 0.03%)</title><rect x="1178.8" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (4 samples, 0.03%)</title><rect x="1178.8" y="211.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (8 samples, 0.06%)</title><rect x="1179.2" y="227.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.2" y="238.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (3 samples, 0.02%)</title><rect x="1179.2" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.2" y="222.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (3 samples, 0.02%)</title><rect x="1179.2" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.2" y="206.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.02%)</title><rect x="1179.2" y="179.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="190.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (3 samples, 0.02%)</title><rect x="1179.5" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (3 samples, 0.02%)</title><rect x="1179.9" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (3 samples, 0.02%)</title><rect x="1179.9" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>CompileQueue::get() (14 samples, 0.11%)</title><rect x="1180.6" y="323.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 0.10%)</title><rect x="1180.7" y="307.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 0.10%)</title><rect x="1180.7" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.02%)</title><rect x="1180.7" y="275.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1183.7" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (9 samples, 0.07%)</title><rect x="1181.0" y="275.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.07%)</title><rect x="1181.0" y="259.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (3 samples, 0.02%)</title><rect x="1181.9" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (6 samples, 0.05%)</title><rect x="1182.2" y="339.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 0.03%)</title><rect x="1182.2" y="323.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 0.03%)</title><rect x="1182.2" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>VMThread::run() (25 samples, 0.20%)</title><rect x="1182.8" y="371.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>VMThread::loop() (25 samples, 0.20%)</title><rect x="1182.8" y="355.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.02%)</title><rect x="1183.0" y="339.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (20 samples, 0.16%)</title><rect x="1183.2" y="339.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (20 samples, 0.16%)</title><rect x="1183.2" y="323.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (19 samples, 0.15%)</title><rect x="1183.2" y="307.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (19 samples, 0.15%)</title><rect x="1183.2" y="291.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.2" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (6 samples, 0.05%)</title><rect x="1183.7" y="275.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_cset() (3 samples, 0.02%)</title><rect x="1184.5" y="275.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="286.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (3 samples, 0.02%)</title><rect x="1184.5" y="259.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="270.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*) (3 samples, 0.02%)</title><rect x="1184.5" y="243.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="254.0"></text>
</g>
<g>
<title>WatcherThread::run() (51 samples, 0.41%)</title><rect x="1185.1" y="371.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.1" y="382.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (51 samples, 0.41%)</title><rect x="1185.1" y="355.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (51 samples, 0.41%)</title><rect x="1185.1" y="339.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.1" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (51 samples, 0.41%)</title><rect x="1185.1" y="323.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.1" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (49 samples, 0.39%)</title><rect x="1185.2" y="307.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (48 samples, 0.38%)</title><rect x="1185.2" y="291.0" width="4.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1188.2" y="302.0"></text>
</g>
</g>
</svg>

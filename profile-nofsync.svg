<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (7,483 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>MainKt.main (5 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>MainKt.main (5 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>StandardSerializer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="10.0" y="467.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (3 samples, 0.04%)</title><rect x="10.0" y="451.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (2 samples, 0.03%)</title><rect x="10.2" y="435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.2" y="446.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.03%)</title><rect x="10.8" y="499.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.8" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="10.8" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.03%)</title><rect x="10.8" y="467.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="478.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.08%)</title><rect x="11.1" y="499.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="14.1" y="510.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (4 samples, 0.05%)</title><rect x="11.4" y="483.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.4" y="494.0"></text>
</g>
<g>
<title>com/intellij/rt/execution/application/AppMainV2$1.run (2 samples, 0.03%)</title><rect x="12.0" y="499.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.0" y="510.0"></text>
</g>
<g>
<title>java/net/Socket.&lt;init&gt; (2 samples, 0.03%)</title><rect x="12.0" y="483.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.0" y="494.0"></text>
</g>
<g>
<title>java/net/Socket.&lt;init&gt; (2 samples, 0.03%)</title><rect x="12.0" y="467.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.0" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,703 samples, 36.12%)</title><rect x="12.4" y="499.0" width="426.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.4" y="510.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,702 samples, 36.11%)</title><rect x="12.5" y="483.0" width="426.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.5" y="494.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,702 samples, 36.11%)</title><rect x="12.5" y="467.0" width="426.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.5" y="478.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,683 samples, 35.85%)</title><rect x="12.5" y="451.0" width="423.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.5" y="462.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (2,683 samples, 35.85%)</title><rect x="12.5" y="435.0" width="423.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.5" y="446.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>StandardSSTableManager$addTableAsync$1.run (2,682 samples, 35.84%)</title><rect x="12.7" y="419.0" width="422.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.7" y="430.0">StandardSSTableManager$addTableAsync$1.run</text>
</g>
<g>
<title>StandardSSTableManager.addTable (2,682 samples, 35.84%)</title><rect x="12.7" y="403.0" width="422.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.7" y="414.0">StandardSSTableManager.addTable</text>
</g>
<g>
<title>StandardSSTableManager.nextTableFile (3 samples, 0.04%)</title><rect x="12.7" y="387.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.03%)</title><rect x="12.8" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.8" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.03%)</title><rect x="12.8" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.03%)</title><rect x="12.8" y="339.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.8" y="350.0"></text>
</g>
<g>
<title>StandardSerializer.serialize (2,679 samples, 35.80%)</title><rect x="13.2" y="387.0" width="422.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="398.0">StandardSerializer.serialize</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2,527 samples, 33.77%)</title><rect x="13.5" y="371.0" width="398.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.5" y="382.0">com/dslplatform/json/DslJson.serialize</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2,522 samples, 33.70%)</title><rect x="13.5" y="355.0" width="397.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.5" y="366.0">com/dslplatform/json/DslJson.serialize</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (2,522 samples, 33.70%)</title><rect x="13.5" y="339.0" width="397.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.5" y="350.0">com/dslplatform/json/DslJson$3.write</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (2,522 samples, 33.70%)</title><rect x="13.5" y="323.0" width="397.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="334.0">com/dslplatform/json/DslJson$3.write</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (2,522 samples, 33.70%)</title><rect x="13.5" y="307.0" width="397.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="318.0">com/dslplatform/json/DslJson.serializeMap</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (1,580 samples, 21.11%)</title><rect x="22.5" y="291.0" width="249.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.5" y="302.0">com/dslplatform/json/DslJson.seri..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (1,541 samples, 20.59%)</title><rect x="28.1" y="275.0" width="243.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.1" y="286.0">com/dslplatform/json/DslJson.ser..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (945 samples, 12.63%)</title><rect x="50.4" y="259.0" width="149.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.4" y="270.0">com/dslplatform/jso..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (932 samples, 12.45%)</title><rect x="52.4" y="243.0" width="147.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.4" y="254.0">com/dslplatform/js..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (930 samples, 12.43%)</title><rect x="52.7" y="227.0" width="146.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="55.7" y="238.0">com/dslplatform/js..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (593 samples, 7.92%)</title><rect x="63.3" y="211.0" width="93.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="66.3" y="222.0">com/dslplat..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (566 samples, 7.56%)</title><rect x="66.9" y="195.0" width="89.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.9" y="206.0">com/dslpla..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (134 samples, 1.79%)</title><rect x="118.2" y="179.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.2" y="190.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (61 samples, 0.82%)</title><rect x="129.7" y="163.0" width="9.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="132.7" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.03%)</title><rect x="136.0" y="147.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="139.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (19 samples, 0.25%)</title><rect x="136.3" y="147.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.3" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (22 samples, 0.29%)</title><rect x="139.3" y="179.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.3" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (7 samples, 0.09%)</title><rect x="141.7" y="163.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="144.7" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (7 samples, 0.09%)</title><rect x="141.7" y="147.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.7" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (7 samples, 0.09%)</title><rect x="141.7" y="131.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.7" y="142.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.ensureCapacity (2 samples, 0.03%)</title><rect x="141.7" y="115.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="144.7" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (5 samples, 0.07%)</title><rect x="142.0" y="115.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.0" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.writeFirstBuf (3 samples, 0.04%)</title><rect x="142.3" y="99.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.3" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (49 samples, 0.65%)</title><rect x="142.8" y="179.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="145.8" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (35 samples, 0.47%)</title><rect x="145.0" y="163.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.0" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (35 samples, 0.47%)</title><rect x="145.0" y="147.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.0" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (35 samples, 0.47%)</title><rect x="145.0" y="131.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.0" y="142.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.11%)</title><rect x="149.1" y="115.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.1" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (8 samples, 0.11%)</title><rect x="149.1" y="99.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.1" y="110.0"></text>
</g>
<g>
<title>itable stub (36 samples, 0.48%)</title><rect x="150.5" y="179.0" width="5.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="153.5" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (4 samples, 0.05%)</title><rect x="156.2" y="195.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.2" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (4 samples, 0.05%)</title><rect x="156.2" y="179.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.2" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (4 samples, 0.05%)</title><rect x="156.2" y="163.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.2" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (4 samples, 0.05%)</title><rect x="156.2" y="147.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="159.2" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (28 samples, 0.37%)</title><rect x="156.8" y="211.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.8" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (116 samples, 1.55%)</title><rect x="161.2" y="211.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="164.2" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (22 samples, 0.29%)</title><rect x="174.8" y="195.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (16 samples, 0.21%)</title><rect x="175.7" y="179.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.7" y="190.0"></text>
</g>
<g>
<title>java/lang/String.length (8 samples, 0.11%)</title><rect x="178.3" y="195.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.3" y="206.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.05%)</title><rect x="178.9" y="179.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="181.9" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (5 samples, 0.07%)</title><rect x="179.5" y="211.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.5" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (5 samples, 0.07%)</title><rect x="179.5" y="195.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.5" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (5 samples, 0.07%)</title><rect x="179.5" y="179.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.5" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (24 samples, 0.32%)</title><rect x="180.3" y="211.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.3" y="222.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (14 samples, 0.19%)</title><rect x="181.4" y="195.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="184.4" y="206.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (14 samples, 0.19%)</title><rect x="181.4" y="179.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="184.4" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (14 samples, 0.19%)</title><rect x="181.4" y="163.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="184.4" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (13 samples, 0.17%)</title><rect x="181.4" y="147.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="184.4" y="158.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (10 samples, 0.13%)</title><rect x="181.9" y="131.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="184.9" y="142.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (10 samples, 0.13%)</title><rect x="181.9" y="115.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="184.9" y="126.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (8 samples, 0.11%)</title><rect x="181.9" y="99.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="184.9" y="110.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (7 samples, 0.09%)</title><rect x="181.9" y="83.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="184.9" y="94.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (4 samples, 0.05%)</title><rect x="182.2" y="67.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="185.2" y="78.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (4 samples, 0.05%)</title><rect x="182.2" y="51.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="185.2" y="62.0"></text>
</g>
<g>
<title>HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="182.5" y="35.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="185.5" y="46.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="183.6" y="195.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.6" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="183.6" y="179.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.6" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (93 samples, 1.24%)</title><rect x="184.1" y="211.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.1" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (4 samples, 0.05%)</title><rect x="198.8" y="211.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (4 samples, 0.05%)</title><rect x="198.8" y="195.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.8" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (427 samples, 5.71%)</title><rect x="199.4" y="259.0" width="67.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.4" y="270.0">com/dsl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.extractActualType (85 samples, 1.14%)</title><rect x="220.4" y="243.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.4" y="254.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (125 samples, 1.67%)</title><rect x="233.8" y="243.0" width="19.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.8" y="254.0"></text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (98 samples, 1.31%)</title><rect x="234.9" y="227.0" width="15.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.9" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="242.0" y="211.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.0" y="222.0"></text>
</g>
<g>
<title>java/util/HashSet.add (51 samples, 0.68%)</title><rect x="242.3" y="211.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.3" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.put (49 samples, 0.65%)</title><rect x="242.6" y="195.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.6" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (39 samples, 0.52%)</title><rect x="244.2" y="179.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.2" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.07%)</title><rect x="249.5" y="163.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.5" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (5 samples, 0.07%)</title><rect x="249.5" y="147.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.13%)</title><rect x="250.3" y="227.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.03%)</title><rect x="251.0" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (4 samples, 0.05%)</title><rect x="251.3" y="211.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList$COWIterator.hasNext (4 samples, 0.05%)</title><rect x="251.9" y="227.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.iterator (6 samples, 0.08%)</title><rect x="252.5" y="227.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (5 samples, 0.07%)</title><rect x="252.7" y="211.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (84 samples, 1.12%)</title><rect x="253.5" y="243.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (8 samples, 0.11%)</title><rect x="263.9" y="227.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (10 samples, 0.13%)</title><rect x="265.1" y="227.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.1" y="238.0"></text>
</g>
<g>
<title>itable stub (28 samples, 0.37%)</title><rect x="266.7" y="259.0" width="4.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="269.7" y="270.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.enlargeOrFlush (3 samples, 0.04%)</title><rect x="271.1" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.1" y="286.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (2 samples, 0.03%)</title><rect x="271.1" y="259.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.1" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="271.1" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.1" y="254.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (17 samples, 0.23%)</title><rect x="271.6" y="291.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.6" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (604 samples, 8.07%)</title><rect x="274.3" y="291.0" width="95.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.3" y="302.0">com/dslplat..</text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.enlargeOrFlush (477 samples, 6.37%)</title><rect x="287.2" y="275.0" width="75.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.2" y="286.0">com/dslp..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (477 samples, 6.37%)</title><rect x="287.2" y="259.0" width="75.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.2" y="270.0">java/io/..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (462 samples, 6.17%)</title><rect x="287.4" y="243.0" width="72.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.4" y="254.0">java/io/..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (460 samples, 6.15%)</title><rect x="287.5" y="227.0" width="72.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.5" y="238.0">java/io/..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (460 samples, 6.15%)</title><rect x="287.5" y="211.0" width="72.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.5" y="222.0">java/io/..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (459 samples, 6.13%)</title><rect x="287.7" y="195.0" width="72.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="290.7" y="206.0">Java_jav..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="287.9" y="179.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="290.9" y="190.0"></text>
</g>
<g>
<title>writeBytes (456 samples, 6.09%)</title><rect x="288.2" y="179.0" width="71.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="291.2" y="190.0">writeBytes</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="288.6" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="291.6" y="174.0"></text>
</g>
<g>
<title>jni_GetArrayLength (3 samples, 0.04%)</title><rect x="289.3" y="163.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="292.3" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.15%)</title><rect x="289.7" y="163.0" width="1.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="292.7" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (8 samples, 0.11%)</title><rect x="290.2" y="147.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="293.2" y="158.0"></text>
</g>
<g>
<title>jni_GetObjectField (11 samples, 0.15%)</title><rect x="291.5" y="163.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="294.5" y="174.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (3 samples, 0.04%)</title><rect x="291.6" y="147.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="294.6" y="158.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.03%)</title><rect x="292.4" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="295.4" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="292.7" y="147.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="295.7" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="292.9" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="295.9" y="142.0"></text>
</g>
<g>
<title>write (424 samples, 5.67%)</title><rect x="293.2" y="163.0" width="66.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="296.2" y="174.0">write</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (13 samples, 0.17%)</title><rect x="360.4" y="243.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="363.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (41 samples, 0.55%)</title><rect x="362.4" y="275.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (38 samples, 0.51%)</title><rect x="362.9" y="259.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.05%)</title><rect x="368.9" y="275.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="371.9" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.getKey (3 samples, 0.04%)</title><rect x="369.5" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.5" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (260 samples, 3.47%)</title><rect x="370.0" y="291.0" width="41.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.0" y="302.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (260 samples, 3.47%)</title><rect x="370.0" y="275.0" width="41.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.0" y="286.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (243 samples, 3.25%)</title><rect x="372.7" y="259.0" width="38.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="375.7" y="270.0">jav..</text>
</g>
<g>
<title>java/util/TreeMap.successor (230 samples, 3.07%)</title><rect x="374.7" y="243.0" width="36.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.7" y="254.0">jav..</text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.flush (5 samples, 0.07%)</title><rect x="411.2" y="355.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.2" y="366.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (5 samples, 0.07%)</title><rect x="411.2" y="339.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.2" y="350.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (5 samples, 0.07%)</title><rect x="411.2" y="323.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.2" y="334.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (5 samples, 0.07%)</title><rect x="411.2" y="307.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.2" y="318.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (5 samples, 0.07%)</title><rect x="411.2" y="291.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="414.2" y="302.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (5 samples, 0.07%)</title><rect x="411.2" y="275.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="414.2" y="286.0"></text>
</g>
<g>
<title>writeBytes (5 samples, 0.07%)</title><rect x="411.2" y="259.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="414.2" y="270.0"></text>
</g>
<g>
<title>write (5 samples, 0.07%)</title><rect x="411.2" y="243.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="414.2" y="254.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (92 samples, 1.23%)</title><rect x="412.1" y="371.0" width="14.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.1" y="382.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (13 samples, 0.17%)</title><rect x="412.1" y="355.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="415.1" y="366.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (13 samples, 0.17%)</title><rect x="412.1" y="339.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.1" y="350.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (13 samples, 0.17%)</title><rect x="412.1" y="323.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.1" y="334.0"></text>
</g>
<g>
<title>fileOpen (13 samples, 0.17%)</title><rect x="412.1" y="307.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="415.1" y="318.0"></text>
</g>
<g>
<title>module_mutex (12 samples, 0.16%)</title><rect x="412.3" y="291.0" width="1.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="415.3" y="302.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (79 samples, 1.06%)</title><rect x="414.2" y="355.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="417.2" y="366.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (79 samples, 1.06%)</title><rect x="414.2" y="339.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.2" y="350.0"></text>
</g>
<g>
<title>fileOpen (79 samples, 1.06%)</title><rect x="414.2" y="323.0" width="12.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="417.2" y="334.0"></text>
</g>
<g>
<title>JNU_GetStringPlatformChars (3 samples, 0.04%)</title><rect x="414.2" y="307.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="417.2" y="318.0"></text>
</g>
<g>
<title>jni_GetObjectField (2 samples, 0.03%)</title><rect x="414.2" y="291.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="417.2" y="302.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (2 samples, 0.03%)</title><rect x="414.2" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="417.2" y="286.0"></text>
</g>
<g>
<title>module_mutex (75 samples, 1.00%)</title><rect x="414.8" y="307.0" width="11.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="417.8" y="318.0"></text>
</g>
<g>
<title>kotlin/io/CloseableKt.closeFinally (57 samples, 0.76%)</title><rect x="426.6" y="371.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.6" y="382.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.close (57 samples, 0.76%)</title><rect x="426.6" y="355.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.6" y="366.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.closeAll (57 samples, 0.76%)</title><rect x="426.6" y="339.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="429.6" y="350.0"></text>
</g>
<g>
<title>java/io/FileOutputStream$1.close (57 samples, 0.76%)</title><rect x="426.6" y="323.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="429.6" y="334.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close (57 samples, 0.76%)</title><rect x="426.6" y="307.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.6" y="318.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close0 (57 samples, 0.76%)</title><rect x="426.6" y="291.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="429.6" y="302.0"></text>
</g>
<g>
<title>rpc_errlist (57 samples, 0.76%)</title><rect x="426.6" y="275.0" width="9.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="429.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 0.24%)</title><rect x="435.6" y="451.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 0.24%)</title><rect x="435.6" y="435.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (18 samples, 0.24%)</title><rect x="435.6" y="419.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2 samples, 0.03%)</title><rect x="435.6" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.03%)</title><rect x="435.6" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (16 samples, 0.21%)</title><rect x="435.9" y="403.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (16 samples, 0.21%)</title><rect x="435.9" y="387.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.9" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (13 samples, 0.17%)</title><rect x="436.4" y="371.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="439.4" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.15%)</title><rect x="436.7" y="355.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="439.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.13%)</title><rect x="436.9" y="339.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="439.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/InnocuousThread.run (4 samples, 0.05%)</title><rect x="438.9" y="499.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="441.9" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4 samples, 0.05%)</title><rect x="438.9" y="483.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/ref/CleanerImpl.run (4 samples, 0.05%)</title><rect x="438.9" y="467.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="441.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/ref/PhantomCleanable.clean (4 samples, 0.05%)</title><rect x="438.9" y="451.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.9" y="462.0"></text>
</g>
<g>
<title>java/io/FileCleanable.performCleanup (4 samples, 0.05%)</title><rect x="438.9" y="435.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="441.9" y="446.0"></text>
</g>
<g>
<title>java/io/FileCleanable.cleanupClose0 (4 samples, 0.05%)</title><rect x="438.9" y="419.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.9" y="430.0"></text>
</g>
<g>
<title>rpc_errlist (3 samples, 0.04%)</title><rect x="439.1" y="403.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="442.1" y="414.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt$thread$thread$1.run (4,543 samples, 60.71%)</title><rect x="439.5" y="499.0" width="716.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="442.5" y="510.0">kotlin/concurrent/ThreadsKt$thread$thread$1.run</text>
</g>
<g>
<title>MainKt$main$1.invoke (4,543 samples, 60.71%)</title><rect x="439.5" y="483.0" width="716.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.5" y="494.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt$main$1.invoke (4,543 samples, 60.71%)</title><rect x="439.5" y="467.0" width="716.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.5" y="478.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt.test (4,543 samples, 60.71%)</title><rect x="439.5" y="451.0" width="716.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.5" y="462.0">MainKt.test</text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (3 samples, 0.04%)</title><rect x="470.6" y="435.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="473.6" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.05%)</title><rect x="471.2" y="435.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="474.2" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="471.4" y="419.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="474.4" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="471.4" y="403.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="474.4" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="471.4" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="474.4" y="398.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.03%)</title><rect x="471.4" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="474.4" y="382.0"></text>
</g>
<g>
<title>StandardLogStructuredMergeTree.put (3,964 samples, 52.97%)</title><rect x="471.9" y="435.0" width="625.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.9" y="446.0">StandardLogStructuredMergeTree.put</text>
</g>
<g>
<title>StandardMemTable.put (1,630 samples, 21.78%)</title><rect x="481.3" y="419.0" width="257.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.3" y="430.0">StandardMemTable.put</text>
</g>
<g>
<title>java/util/TreeMap.put (1,621 samples, 21.66%)</title><rect x="482.8" y="403.0" width="255.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.8" y="414.0">java/util/TreeMap.put</text>
</g>
<g>
<title>java/lang/String.compareTo (70 samples, 0.94%)</title><rect x="618.8" y="387.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (70 samples, 0.94%)</title><rect x="618.8" y="371.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (12 samples, 0.16%)</title><rect x="628.0" y="355.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.0" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$Entry.&lt;init&gt; (16 samples, 0.21%)</title><rect x="629.9" y="387.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="632.9" y="398.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.11%)</title><rect x="631.1" y="371.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.1" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (672 samples, 8.98%)</title><rect x="632.4" y="387.0" width="106.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.4" y="398.0">java/util/Tre..</text>
</g>
<g>
<title>java/util/TreeMap.parentOf (6 samples, 0.08%)</title><rect x="634.8" y="371.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.8" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (23 samples, 0.31%)</title><rect x="635.7" y="371.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.7" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (627 samples, 8.38%)</title><rect x="639.3" y="371.0" width="98.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.3" y="382.0">java/util/Tr..</text>
</g>
<g>
<title>StandardMemTable.size (10 samples, 0.13%)</title><rect x="738.4" y="419.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.4" y="430.0"></text>
</g>
<g>
<title>StandardSSTableManager.addTableAsync (16 samples, 0.21%)</title><rect x="740.0" y="419.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="743.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (16 samples, 0.21%)</title><rect x="740.0" y="403.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="743.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 0.21%)</title><rect x="740.0" y="387.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="743.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (16 samples, 0.21%)</title><rect x="740.0" y="371.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="743.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (16 samples, 0.21%)</title><rect x="740.0" y="355.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="743.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 0.20%)</title><rect x="740.1" y="339.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="743.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 0.20%)</title><rect x="740.1" y="323.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.20%)</title><rect x="740.1" y="307.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="743.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.19%)</title><rect x="740.3" y="291.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="743.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.19%)</title><rect x="740.3" y="275.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="743.3" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (14 samples, 0.19%)</title><rect x="740.3" y="259.0" width="2.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="743.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.17%)</title><rect x="740.4" y="243.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="743.4" y="254.0"></text>
</g>
<g>
<title>StandardWriteAheadLogManager.append (2,246 samples, 30.01%)</title><rect x="742.5" y="419.0" width="354.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="745.5" y="430.0">StandardWriteAheadLogManager.append</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2,012 samples, 26.89%)</title><rect x="744.4" y="403.0" width="317.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.4" y="414.0">com/dslplatform/json/DslJson.serialize</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (1,625 samples, 21.72%)</title><rect x="749.9" y="387.0" width="256.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="752.9" y="398.0">com/dslplatform/json/DslJson.seria..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (1,005 samples, 13.43%)</title><rect x="773.4" y="371.0" width="158.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.4" y="382.0">com/dslplatform/json..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (970 samples, 12.96%)</title><rect x="778.9" y="355.0" width="153.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.9" y="366.0">com/dslplatform/jso..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (966 samples, 12.91%)</title><rect x="779.5" y="339.0" width="152.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="782.5" y="350.0">com/dslplatform/jso..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (703 samples, 9.39%)</title><rect x="792.6" y="323.0" width="110.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.6" y="334.0">com/dslplatfo..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (647 samples, 8.65%)</title><rect x="800.8" y="307.0" width="102.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.8" y="318.0">com/dslplatf..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (183 samples, 2.45%)</title><rect x="851.6" y="291.0" width="28.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.6" y="302.0">co..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (73 samples, 0.98%)</title><rect x="868.9" y="275.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="871.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.03%)</title><rect x="876.7" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="879.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (22 samples, 0.29%)</title><rect x="877.0" y="259.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="880.0" y="270.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (37 samples, 0.49%)</title><rect x="880.5" y="291.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="883.5" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (14 samples, 0.19%)</title><rect x="884.1" y="275.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="887.1" y="286.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (14 samples, 0.19%)</title><rect x="884.1" y="259.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="887.1" y="270.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (14 samples, 0.19%)</title><rect x="884.1" y="243.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="887.1" y="254.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.ensureCapacity (2 samples, 0.03%)</title><rect x="884.1" y="227.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="887.1" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (12 samples, 0.16%)</title><rect x="884.4" y="227.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="887.4" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.writeFirstBuf (7 samples, 0.09%)</title><rect x="885.2" y="211.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="888.2" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (60 samples, 0.80%)</title><rect x="886.3" y="291.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="889.3" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (42 samples, 0.56%)</title><rect x="889.1" y="275.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="892.1" y="286.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (42 samples, 0.56%)</title><rect x="889.1" y="259.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="892.1" y="270.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (42 samples, 0.56%)</title><rect x="889.1" y="243.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="892.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.11%)</title><rect x="894.3" y="227.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.3" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (8 samples, 0.11%)</title><rect x="894.3" y="211.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.3" y="222.0"></text>
</g>
<g>
<title>itable stub (45 samples, 0.60%)</title><rect x="895.7" y="291.0" width="7.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="898.7" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (3 samples, 0.04%)</title><rect x="902.8" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="905.8" y="318.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (3 samples, 0.04%)</title><rect x="902.8" y="291.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="905.8" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (3 samples, 0.04%)</title><rect x="902.8" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="905.8" y="286.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (3 samples, 0.04%)</title><rect x="902.8" y="259.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="905.8" y="270.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (3 samples, 0.04%)</title><rect x="902.8" y="243.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="905.8" y="254.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (27 samples, 0.36%)</title><rect x="903.5" y="323.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.5" y="334.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (116 samples, 1.55%)</title><rect x="907.7" y="323.0" width="18.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="910.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (30 samples, 0.40%)</title><rect x="919.7" y="307.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.7" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (25 samples, 0.33%)</title><rect x="920.5" y="291.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.length (10 samples, 0.13%)</title><rect x="924.4" y="307.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="927.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.coder (6 samples, 0.08%)</title><rect x="925.1" y="291.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.1" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (10 samples, 0.13%)</title><rect x="926.0" y="323.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="929.0" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (10 samples, 0.13%)</title><rect x="926.0" y="307.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="929.0" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (10 samples, 0.13%)</title><rect x="926.0" y="291.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="929.0" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (7 samples, 0.09%)</title><rect x="927.6" y="323.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="930.6" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="928.4" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="931.4" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="928.4" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="931.4" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (19 samples, 0.25%)</title><rect x="928.7" y="323.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="931.7" y="334.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (444 samples, 5.93%)</title><rect x="931.9" y="371.0" width="70.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="934.9" y="382.0">com/dslp..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.extractActualType (80 samples, 1.07%)</title><rect x="950.8" y="355.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="953.8" y="366.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (150 samples, 2.00%)</title><rect x="963.4" y="355.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="966.4" y="366.0">c..</text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (129 samples, 1.72%)</title><rect x="964.5" y="339.0" width="20.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="967.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.04%)</title><rect x="965.4" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="968.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.add (120 samples, 1.60%)</title><rect x="965.9" y="323.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="968.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (119 samples, 1.59%)</title><rect x="966.1" y="307.0" width="18.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="969.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (36 samples, 0.48%)</title><rect x="967.2" y="291.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="970.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (34 samples, 0.45%)</title><rect x="967.5" y="275.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="970.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (76 samples, 1.02%)</title><rect x="972.9" y="291.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="975.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.04%)</title><rect x="984.4" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="987.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (3 samples, 0.04%)</title><rect x="984.4" y="259.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="987.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.11%)</title><rect x="984.8" y="339.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (3 samples, 0.04%)</title><rect x="985.2" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="988.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (3 samples, 0.04%)</title><rect x="985.6" y="323.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="988.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList$COWIterator.hasNext (3 samples, 0.04%)</title><rect x="986.1" y="339.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="989.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.iterator (3 samples, 0.04%)</title><rect x="986.6" y="339.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="989.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (3 samples, 0.04%)</title><rect x="986.6" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="989.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (94 samples, 1.26%)</title><rect x="987.1" y="355.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (5 samples, 0.07%)</title><rect x="999.0" y="339.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1002.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (13 samples, 0.17%)</title><rect x="999.8" y="339.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1002.8" y="350.0"></text>
</g>
<g>
<title>itable stub (27 samples, 0.36%)</title><rect x="1001.9" y="371.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1004.9" y="382.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.flush (295 samples, 3.94%)</title><rect x="1006.1" y="387.0" width="46.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1009.1" y="398.0">com/..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (285 samples, 3.81%)</title><rect x="1007.7" y="371.0" width="45.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1010.7" y="382.0">java..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (239 samples, 3.19%)</title><rect x="1010.2" y="355.0" width="37.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1013.2" y="366.0">jav..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (235 samples, 3.14%)</title><rect x="1010.9" y="339.0" width="37.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1013.9" y="350.0">jav..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (232 samples, 3.10%)</title><rect x="1011.3" y="323.0" width="36.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1014.3" y="334.0">jav..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (232 samples, 3.10%)</title><rect x="1011.3" y="307.0" width="36.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1014.3" y="318.0">Jav..</text>
</g>
<g>
<title>writeBytes (230 samples, 3.07%)</title><rect x="1011.7" y="291.0" width="36.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1014.7" y="302.0">wri..</text>
</g>
<g>
<title>jni_ExceptionOccurred (2 samples, 0.03%)</title><rect x="1012.4" y="275.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1015.4" y="286.0"></text>
</g>
<g>
<title>jni_GetArrayLength (2 samples, 0.03%)</title><rect x="1012.8" y="275.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1015.8" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="1013.1" y="275.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1016.1" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1013.2" y="259.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1016.2" y="270.0"></text>
</g>
<g>
<title>jni_GetObjectField (5 samples, 0.07%)</title><rect x="1013.5" y="275.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1016.5" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.04%)</title><rect x="1013.7" y="259.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.7" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.03%)</title><rect x="1013.9" y="243.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.9" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title><rect x="1013.9" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.9" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.03%)</title><rect x="1013.9" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.9" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)</title><rect x="1013.9" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.9" y="206.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.03%)</title><rect x="1013.9" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.9" y="190.0"></text>
</g>
<g>
<title>write (213 samples, 2.85%)</title><rect x="1014.3" y="275.0" width="33.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1017.3" y="286.0">wr..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (30 samples, 0.40%)</title><rect x="1047.9" y="355.0" width="4.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1050.9" y="366.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.reset (2 samples, 0.03%)</title><rect x="1052.7" y="387.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1055.7" y="398.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (4 samples, 0.05%)</title><rect x="1053.0" y="387.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1056.0" y="398.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (4 samples, 0.05%)</title><rect x="1053.0" y="371.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1056.0" y="382.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (4 samples, 0.05%)</title><rect x="1053.0" y="355.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1056.0" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (51 samples, 0.68%)</title><rect x="1053.6" y="387.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1056.6" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (27 samples, 0.36%)</title><rect x="1057.4" y="371.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.4" y="382.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (173 samples, 2.31%)</title><rect x="1061.6" y="403.0" width="27.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.6" y="414.0">j..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (173 samples, 2.31%)</title><rect x="1061.6" y="387.0" width="27.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1064.6" y="398.0">j..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (83 samples, 1.11%)</title><rect x="1072.0" y="371.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1075.0" y="382.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (81 samples, 1.08%)</title><rect x="1072.4" y="355.0" width="12.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1075.4" y="366.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (81 samples, 1.08%)</title><rect x="1072.4" y="339.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1075.4" y="350.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (81 samples, 1.08%)</title><rect x="1072.4" y="323.0" width="12.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1075.4" y="334.0"></text>
</g>
<g>
<title>writeBytes (80 samples, 1.07%)</title><rect x="1072.5" y="307.0" width="12.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1075.5" y="318.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.09%)</title><rect x="1072.5" y="291.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1075.5" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="1073.2" y="275.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1076.2" y="286.0"></text>
</g>
<g>
<title>write (72 samples, 0.96%)</title><rect x="1073.8" y="291.0" width="11.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1076.8" y="302.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.04%)</title><rect x="1085.1" y="371.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1088.1" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (21 samples, 0.28%)</title><rect x="1085.6" y="371.0" width="3.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1088.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (49 samples, 0.65%)</title><rect x="1088.9" y="403.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1091.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.05%)</title><rect x="1089.2" y="387.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1092.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (43 samples, 0.57%)</title><rect x="1089.9" y="387.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1092.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (43 samples, 0.57%)</title><rect x="1089.9" y="371.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1092.9" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (30 samples, 0.40%)</title><rect x="1091.9" y="355.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1094.9" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (13 samples, 0.17%)</title><rect x="1094.6" y="339.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1097.6" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.03%)</title><rect x="1096.6" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1099.6" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.03%)</title><rect x="1097.1" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1100.1" y="446.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.03%)</title><rect x="1097.1" y="419.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1100.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (3 samples, 0.04%)</title><rect x="1097.4" y="435.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1100.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1097.6" y="419.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1100.6" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (28 samples, 0.37%)</title><rect x="1097.9" y="435.0" width="4.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1100.9" y="446.0"></text>
</g>
<g>
<title>kotlin/TuplesKt.to (23 samples, 0.31%)</title><rect x="1102.3" y="435.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1105.3" y="446.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.mapOf (317 samples, 4.24%)</title><rect x="1106.0" y="435.0" width="49.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1109.0" y="446.0">kotli..</text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.toMap (297 samples, 3.97%)</title><rect x="1109.1" y="419.0" width="46.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1112.1" y="430.0">kotl..</text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.putAll (297 samples, 3.97%)</title><rect x="1109.1" y="403.0" width="46.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.1" y="414.0">kotl..</text>
</g>
<g>
<title>java/util/HashMap.put (251 samples, 3.35%)</title><rect x="1109.7" y="387.0" width="39.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1112.7" y="398.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (20 samples, 0.27%)</title><rect x="1111.6" y="371.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1114.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.11%)</title><rect x="1113.5" y="355.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (216 samples, 2.89%)</title><rect x="1114.8" y="371.0" width="34.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.8" y="382.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.07%)</title><rect x="1127.1" y="355.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1130.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (5 samples, 0.07%)</title><rect x="1127.1" y="339.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1130.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (32 samples, 0.43%)</title><rect x="1127.9" y="355.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1130.9" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (28 samples, 0.37%)</title><rect x="1132.9" y="355.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1135.9" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (73 samples, 0.98%)</title><rect x="1137.3" y="355.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1140.3" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1143.8" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.8" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$Entry.&lt;init&gt; (7 samples, 0.09%)</title><rect x="1144.1" y="339.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1147.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (7 samples, 0.09%)</title><rect x="1144.1" y="323.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1147.1" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (23 samples, 0.31%)</title><rect x="1145.2" y="339.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1148.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.04%)</title><rect x="1148.8" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.16%)</title><rect x="1149.3" y="387.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1152.3" y="398.0"></text>
</g>
<g>
<title>kotlin/Pair.component1 (26 samples, 0.35%)</title><rect x="1151.2" y="387.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1154.2" y="398.0"></text>
</g>
<g>
<title>kotlin/Pair.component2 (4 samples, 0.05%)</title><rect x="1155.3" y="387.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1158.3" y="398.0"></text>
</g>
<g>
<title>thread_start (215 samples, 2.87%)</title><rect x="1156.1" y="499.0" width="33.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1159.1" y="510.0">th..</text>
</g>
<g>
<title>_pthread_start (215 samples, 2.87%)</title><rect x="1156.1" y="483.0" width="33.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1159.1" y="494.0">_p..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (214 samples, 2.86%)</title><rect x="1156.3" y="467.0" width="33.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1159.3" y="478.0">th..</text>
</g>
<g>
<title>Thread::call_run() (214 samples, 2.86%)</title><rect x="1156.3" y="451.0" width="33.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.3" y="462.0">Th..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (15 samples, 0.20%)</title><rect x="1156.3" y="435.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (15 samples, 0.20%)</title><rect x="1156.3" y="419.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (9 samples, 0.12%)</title><rect x="1156.3" y="403.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.3" y="414.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (9 samples, 0.12%)</title><rect x="1156.3" y="387.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.3" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (7 samples, 0.09%)</title><rect x="1156.6" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="382.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (5 samples, 0.07%)</title><rect x="1156.7" y="355.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.7" y="366.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (5 samples, 0.07%)</title><rect x="1156.7" y="339.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.7" y="350.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (2 samples, 0.03%)</title><rect x="1157.0" y="323.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.0" y="334.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (2 samples, 0.03%)</title><rect x="1157.0" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.0" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (6 samples, 0.08%)</title><rect x="1157.7" y="403.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.7" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.08%)</title><rect x="1157.7" y="387.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.7" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.08%)</title><rect x="1157.7" y="371.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.7" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 0.08%)</title><rect x="1157.7" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.07%)</title><rect x="1157.8" y="339.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1160.8" y="350.0"></text>
</g>
<g>
<title>GangWorker::loop() (48 samples, 0.64%)</title><rect x="1158.6" y="435.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.6" y="446.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (4 samples, 0.05%)</title><rect x="1158.6" y="419.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.6" y="430.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::do_serial_work() (2 samples, 0.03%)</title><rect x="1158.6" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.6" y="414.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.03%)</title><rect x="1158.6" y="387.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.6" y="398.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title><rect x="1158.6" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.6" y="382.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (29 samples, 0.39%)</title><rect x="1159.3" y="419.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="430.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (28 samples, 0.37%)</title><rect x="1159.3" y="403.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.3" y="414.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (20 samples, 0.27%)</title><rect x="1159.3" y="387.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.3" y="398.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (20 samples, 0.27%)</title><rect x="1159.3" y="371.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.3" y="382.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (14 samples, 0.19%)</title><rect x="1160.2" y="355.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.2" y="366.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (12 samples, 0.16%)</title><rect x="1160.5" y="339.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.5" y="350.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (3 samples, 0.04%)</title><rect x="1161.3" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.3" y="334.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.04%)</title><rect x="1161.9" y="323.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.9" y="334.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.04%)</title><rect x="1161.9" y="307.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.9" y="318.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (7 samples, 0.09%)</title><rect x="1162.4" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.4" y="398.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.05%)</title><rect x="1162.4" y="371.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.4" y="382.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.05%)</title><rect x="1162.4" y="355.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.05%)</title><rect x="1162.4" y="339.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.4" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.05%)</title><rect x="1162.4" y="323.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1165.4" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.03%)</title><rect x="1163.2" y="371.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1166.2" y="382.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (6 samples, 0.08%)</title><rect x="1163.8" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.8" y="430.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (5 samples, 0.07%)</title><rect x="1164.0" y="403.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.0" y="414.0"></text>
</g>
<g>
<title>CardTable::clear(MemRegion) (2 samples, 0.03%)</title><rect x="1164.3" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="398.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="1164.3" y="371.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1167.3" y="382.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1164.9" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.9" y="430.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="1164.9" y="403.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.9" y="414.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1164.9" y="387.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="398.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (5 samples, 0.07%)</title><rect x="1165.2" y="419.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.2" y="430.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (5 samples, 0.07%)</title><rect x="1165.2" y="403.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1168.2" y="414.0"></text>
</g>
<g>
<title>JavaThread::run() (108 samples, 1.44%)</title><rect x="1166.2" y="435.0" width="17.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.2" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (108 samples, 1.44%)</title><rect x="1166.2" y="419.0" width="17.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.2" y="430.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 1.39%)</title><rect x="1166.2" y="403.0" width="16.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.2" y="414.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (99 samples, 1.32%)</title><rect x="1166.2" y="387.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.2" y="398.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (80 samples, 1.07%)</title><rect x="1166.2" y="371.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.2" y="382.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (80 samples, 1.07%)</title><rect x="1166.2" y="355.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.2" y="366.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 0.68%)</title><rect x="1166.2" y="339.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.2" y="350.0"></text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.07%)</title><rect x="1166.2" y="323.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.2" y="334.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.04%)</title><rect x="1166.2" y="307.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.2" y="318.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.03%)</title><rect x="1166.7" y="307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.7" y="318.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.03%)</title><rect x="1167.0" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.0" y="334.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.05%)</title><rect x="1167.3" y="323.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.3" y="334.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.03%)</title><rect x="1167.6" y="307.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.6" y="318.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.09%)</title><rect x="1167.9" y="323.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.09%)</title><rect x="1167.9" y="307.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.9" y="318.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.04%)</title><rect x="1168.6" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.6" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 0.44%)</title><rect x="1169.0" y="323.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.0" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.04%)</title><rect x="1169.2" y="307.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.03%)</title><rect x="1169.8" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.8" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (15 samples, 0.20%)</title><rect x="1170.1" y="307.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.1" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.03%)</title><rect x="1170.6" y="291.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.6" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.08%)</title><rect x="1171.1" y="291.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.1" y="302.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.04%)</title><rect x="1171.1" y="275.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.1" y="286.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.03%)</title><rect x="1171.2" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.04%)</title><rect x="1172.0" y="291.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.07%)</title><rect x="1173.0" y="307.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.0" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.03%)</title><rect x="1173.3" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.3" y="302.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.03%)</title><rect x="1173.8" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="318.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 0.33%)</title><rect x="1174.2" y="339.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="350.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (8 samples, 0.11%)</title><rect x="1174.2" y="323.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.2" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 0.11%)</title><rect x="1174.2" y="307.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1174.4" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1174.7" y="291.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.03%)</title><rect x="1174.7" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.7" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.03%)</title><rect x="1175.2" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.2" y="302.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.03%)</title><rect x="1175.5" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="334.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.03%)</title><rect x="1175.5" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 0.09%)</title><rect x="1175.8" y="323.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1176.0" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="318.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.03%)</title><rect x="1176.9" y="323.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.03%)</title><rect x="1176.9" y="307.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="318.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.03%)</title><rect x="1176.9" y="291.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="302.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.03%)</title><rect x="1176.9" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="286.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.07%)</title><rect x="1177.2" y="323.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.07%)</title><rect x="1177.2" y="307.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="318.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (2 samples, 0.03%)</title><rect x="1177.5" y="291.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1178.2" y="339.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1178.2" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1178.2" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1178.2" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1178.2" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1178.2" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1178.2" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1178.2" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1178.2" y="211.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1178.2" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1178.2" y="179.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1178.2" y="163.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1178.2" y="147.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1178.2" y="131.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="142.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (18 samples, 0.24%)</title><rect x="1178.8" y="371.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (17 samples, 0.23%)</title><rect x="1178.8" y="355.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Compilation::compile_method() (17 samples, 0.23%)</title><rect x="1178.8" y="339.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (17 samples, 0.23%)</title><rect x="1178.8" y="323.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Compilation::build_hir() (10 samples, 0.13%)</title><rect x="1178.8" y="307.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (2 samples, 0.03%)</title><rect x="1178.8" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (7 samples, 0.09%)</title><rect x="1179.1" y="291.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="302.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (7 samples, 0.09%)</title><rect x="1179.1" y="275.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (7 samples, 0.09%)</title><rect x="1179.1" y="259.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 0.08%)</title><rect x="1179.3" y="243.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.3" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (6 samples, 0.08%)</title><rect x="1179.3" y="227.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.05%)</title><rect x="1179.3" y="211.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.04%)</title><rect x="1179.3" y="195.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.04%)</title><rect x="1179.3" y="179.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.3" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.03%)</title><rect x="1179.3" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.03%)</title><rect x="1179.3" y="147.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="158.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (6 samples, 0.08%)</title><rect x="1180.5" y="307.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="318.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.03%)</title><rect x="1180.5" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="302.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.03%)</title><rect x="1180.5" y="275.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="286.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.05%)</title><rect x="1180.9" y="291.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (3 samples, 0.04%)</title><rect x="1180.9" y="275.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (3 samples, 0.04%)</title><rect x="1180.9" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.04%)</title><rect x="1180.9" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="254.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (2 samples, 0.03%)</title><rect x="1180.9" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>CompileQueue::get() (5 samples, 0.07%)</title><rect x="1181.8" y="387.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.07%)</title><rect x="1181.8" y="371.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.07%)</title><rect x="1181.8" y="355.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.04%)</title><rect x="1182.1" y="339.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1182.1" y="323.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (4 samples, 0.05%)</title><rect x="1182.6" y="403.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.04%)</title><rect x="1182.7" y="387.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.04%)</title><rect x="1182.7" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.04%)</title><rect x="1182.7" y="355.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.04%)</title><rect x="1182.7" y="339.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1185.7" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (13 samples, 0.17%)</title><rect x="1183.2" y="435.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="446.0"></text>
</g>
<g>
<title>VMThread::loop() (13 samples, 0.17%)</title><rect x="1183.2" y="419.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="430.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.05%)</title><rect x="1183.2" y="403.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.03%)</title><rect x="1183.4" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title><rect x="1183.4" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="382.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title><rect x="1183.4" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="366.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.03%)</title><rect x="1183.4" y="339.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1186.4" y="350.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (8 samples, 0.11%)</title><rect x="1184.0" y="403.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="414.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (8 samples, 0.11%)</title><rect x="1184.0" y="387.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (7 samples, 0.09%)</title><rect x="1184.0" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (7 samples, 0.09%)</title><rect x="1184.0" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport*, bool, bool) (2 samples, 0.03%)</title><rect x="1184.5" y="339.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="350.0"></text>
</g>
<g>
<title>MemoryService::gc_begin(GCMemoryManager*, bool, bool, bool, bool) (2 samples, 0.03%)</title><rect x="1184.5" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="334.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(CollectedHeap*, bool) (2 samples, 0.03%)</title><rect x="1184.8" y="339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="350.0"></text>
</g>
<g>
<title>WatcherThread::run() (30 samples, 0.40%)</title><rect x="1185.3" y="435.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="446.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (29 samples, 0.39%)</title><rect x="1185.4" y="419.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="430.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (29 samples, 0.39%)</title><rect x="1185.4" y="403.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="414.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (29 samples, 0.39%)</title><rect x="1185.4" y="387.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (28 samples, 0.37%)</title><rect x="1185.6" y="371.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (28 samples, 0.37%)</title><rect x="1185.6" y="355.0" width="4.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1188.6" y="366.0"></text>
</g>
</g>
</svg>

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (2,744 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>MainKt.main (4 samples, 0.15%)</title><rect x="10.0" y="1315.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>MainKt.main (4 samples, 0.15%)</title><rect x="10.0" y="1299.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>StandardLogStructuredMergeTree.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.0" y="1283.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>StandardLogStructuredMergeTree.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.0" y="1267.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>MainKt$main$tree$1.invoke (1 samples, 0.04%)</title><rect x="10.0" y="1251.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>MainKt$main$tree$1.invoke (1 samples, 0.04%)</title><rect x="10.0" y="1235.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.0" y="1219.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.0" y="1203.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.0" y="1187.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="10.0" y="1171.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="10.0" y="1155.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="10.0" y="1139.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="10.0" y="1123.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="10.0" y="1107.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="10.0" y="1091.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="10.0" y="1075.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="10.0" y="1059.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="1043.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="1027.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="995.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="963.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>StandardSSTableManager.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1283.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.newCachedThreadPool (1 samples, 0.04%)</title><rect x="10.4" y="1267.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1251.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1235.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1219.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1203.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.findVarHandle (1 samples, 0.04%)</title><rect x="10.4" y="1187.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.getFieldVarHandle (1 samples, 0.04%)</title><rect x="10.4" y="1171.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.getFieldVarHandleCommon (1 samples, 0.04%)</title><rect x="10.4" y="1155.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandles.makeFieldHandle (1 samples, 0.04%)</title><rect x="10.4" y="1139.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadOnly.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1123.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1107.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.linkFromStatic (1 samples, 0.04%)</title><rect x="10.4" y="1091.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1075.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName.&lt;init&gt; (1 samples, 0.04%)</title><rect x="10.4" y="1059.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.init (1 samples, 0.04%)</title><rect x="10.4" y="1043.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.4" y="1054.0"></text>
</g>
<g>
<title>MHN_init_Mem (1 samples, 0.04%)</title><rect x="10.4" y="1027.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="13.4" y="1038.0"></text>
</g>
<g>
<title>MethodHandles::init_MemberName(Handle, Handle, Thread*) (1 samples, 0.04%)</title><rect x="10.4" y="1011.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.4" y="1022.0"></text>
</g>
<g>
<title>CallInfo::CallInfo(Method*, Klass*, Thread*) (1 samples, 0.04%)</title><rect x="10.4" y="995.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.4" y="1006.0"></text>
</g>
<g>
<title>CallInfo::set_resolved_method_name(Thread*) (1 samples, 0.04%)</title><rect x="10.4" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.4" y="990.0"></text>
</g>
<g>
<title>ResolvedMethodTable::add_method(Handle) (1 samples, 0.04%)</title><rect x="10.4" y="963.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.4" y="974.0"></text>
</g>
<g>
<title>ResolvedMethodTable::basic_add(Method*, Handle) (1 samples, 0.04%)</title><rect x="10.4" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.4" y="958.0"></text>
</g>
<g>
<title>Hashtable&lt;WeakHandle&lt;(WeakHandleType)0&gt;, (MemoryType)1&gt;::new_entry(unsigned int, WeakHandle&lt;(WeakHandleType)0&gt;) (1 samples, 0.04%)</title><rect x="10.4" y="931.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.4" y="942.0"></text>
</g>
<g>
<title>BasicHashtable&lt;(MemoryType)1&gt;::new_entry(unsigned int) (1 samples, 0.04%)</title><rect x="10.4" y="915.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.9" y="1283.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.9" y="1267.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.9" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.9" y="1251.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="10.9" y="1235.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="10.9" y="1219.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.9" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="10.9" y="1203.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="1214.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="10.9" y="1187.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="10.9" y="1171.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="10.9" y="1155.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.9" y="1139.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.9" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.9" y="1123.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="10.9" y="1107.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.9" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="10.9" y="1091.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="10.9" y="1075.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.9" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.04%)</title><rect x="10.9" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.9" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.getResource (1 samples, 0.04%)</title><rect x="10.9" y="1043.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.9" y="1054.0"></text>
</g>
<g>
<title>java/io/File.exists (1 samples, 0.04%)</title><rect x="10.9" y="1027.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.9" y="1038.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes (1 samples, 0.04%)</title><rect x="10.9" y="1011.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="1022.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes0 (1 samples, 0.04%)</title><rect x="10.9" y="995.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.9" y="1006.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="10.9" y="979.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.9" y="990.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt.thread$default (1 samples, 0.04%)</title><rect x="11.3" y="1283.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.3" y="1294.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt.thread (1 samples, 0.04%)</title><rect x="11.3" y="1267.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.start (1 samples, 0.04%)</title><rect x="11.3" y="1251.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.start0 (1 samples, 0.04%)</title><rect x="11.3" y="1235.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.3" y="1246.0"></text>
</g>
<g>
<title>JVM_StartThread (1 samples, 0.04%)</title><rect x="11.3" y="1219.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.3" y="1230.0"></text>
</g>
<g>
<title>os::create_thread(Thread*, os::ThreadType, unsigned long) (1 samples, 0.04%)</title><rect x="11.3" y="1203.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.3" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="11.3" y="1187.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.3" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="11.3" y="1171.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.3" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="11.3" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.3" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="11.3" y="1139.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="14.3" y="1150.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.04%)</title><rect x="11.7" y="1315.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.7" y="1326.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="11.7" y="1299.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.7" y="1310.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="11.7" y="1283.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.7" y="1294.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.04%)</title><rect x="11.7" y="1267.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.7" y="1278.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.04%)</title><rect x="11.7" y="1251.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.7" y="1262.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.04%)</title><rect x="11.7" y="1235.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.7" y="1246.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.04%)</title><rect x="11.7" y="1219.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.7" y="1230.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.04%)</title><rect x="12.2" y="1315.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="15.2" y="1326.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.04%)</title><rect x="12.6" y="1315.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="15.6" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="12.6" y="1299.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.6" y="1310.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.04%)</title><rect x="12.6" y="1283.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.6" y="1294.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.07%)</title><rect x="13.0" y="1315.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="16.0" y="1326.0"></text>
</g>
<g>
<title>Interpreter (2 samples, 0.07%)</title><rect x="13.0" y="1299.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="16.0" y="1310.0"></text>
</g>
<g>
<title>com/intellij/rt/execution/application/AppMainV2$1.run (2 samples, 0.07%)</title><rect x="13.9" y="1315.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.9" y="1326.0"></text>
</g>
<g>
<title>java/net/Socket.&lt;init&gt; (2 samples, 0.07%)</title><rect x="13.9" y="1299.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="1310.0"></text>
</g>
<g>
<title>java/net/Socket.&lt;init&gt; (2 samples, 0.07%)</title><rect x="13.9" y="1283.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="1294.0"></text>
</g>
<g>
<title>java/net/Socket.connect (1 samples, 0.04%)</title><rect x="13.9" y="1267.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.9" y="1278.0"></text>
</g>
<g>
<title>java/net/Socket.connect (1 samples, 0.04%)</title><rect x="13.9" y="1251.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.9" y="1262.0"></text>
</g>
<g>
<title>java/net/SocksSocketImpl.connect (1 samples, 0.04%)</title><rect x="13.9" y="1235.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.9" y="1246.0"></text>
</g>
<g>
<title>java/net/AbstractPlainSocketImpl.connect (1 samples, 0.04%)</title><rect x="13.9" y="1219.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.9" y="1230.0"></text>
</g>
<g>
<title>java/net/AbstractPlainSocketImpl.connectToAddress (1 samples, 0.04%)</title><rect x="13.9" y="1203.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.9" y="1214.0"></text>
</g>
<g>
<title>java/net/AbstractPlainSocketImpl.doConnect (1 samples, 0.04%)</title><rect x="13.9" y="1187.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.9" y="1198.0"></text>
</g>
<g>
<title>java/net/PlainSocketImpl.socketConnect (1 samples, 0.04%)</title><rect x="13.9" y="1171.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.9" y="1182.0"></text>
</g>
<g>
<title>java/net/NetworkInterface.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="13.9" y="1155.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.9" y="1166.0"></text>
</g>
<g>
<title>java/net/DefaultInterface.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="13.9" y="1139.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.9" y="1150.0"></text>
</g>
<g>
<title>java/net/DefaultInterface.chooseDefaultInterface (1 samples, 0.04%)</title><rect x="13.9" y="1123.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.9" y="1134.0"></text>
</g>
<g>
<title>java/net/NetworkInterface.getNetworkInterfaces (1 samples, 0.04%)</title><rect x="13.9" y="1107.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1118.0"></text>
</g>
<g>
<title>java/net/NetworkInterface.getAll (1 samples, 0.04%)</title><rect x="13.9" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.9" y="1102.0"></text>
</g>
<g>
<title>Java_java_net_NetworkInterface_getAll (1 samples, 0.04%)</title><rect x="13.9" y="1075.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="16.9" y="1086.0"></text>
</g>
<g>
<title>enumInterfaces (1 samples, 0.04%)</title><rect x="13.9" y="1059.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="16.9" y="1070.0"></text>
</g>
<g>
<title>if_nametoindex (1 samples, 0.04%)</title><rect x="13.9" y="1043.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="16.9" y="1054.0"></text>
</g>
<g>
<title>getifaddrs (1 samples, 0.04%)</title><rect x="13.9" y="1027.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.9" y="1038.0"></text>
</g>
<g>
<title>xports (1 samples, 0.04%)</title><rect x="13.9" y="1011.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="16.9" y="1022.0"></text>
</g>
<g>
<title>java/net/Socket.setImpl (1 samples, 0.04%)</title><rect x="14.3" y="1267.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.3" y="1278.0"></text>
</g>
<g>
<title>java/net/PlainSocketImpl.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="14.3" y="1251.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.3" y="1262.0"></text>
</g>
<g>
<title>java/net/PlainSocketImpl.initProto (1 samples, 0.04%)</title><rect x="14.3" y="1235.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="17.3" y="1246.0"></text>
</g>
<g>
<title>__socketpair (1 samples, 0.04%)</title><rect x="14.3" y="1219.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="17.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/Thread.run (30 samples, 1.09%)</title><rect x="14.7" y="1315.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (30 samples, 1.09%)</title><rect x="14.7" y="1299.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (30 samples, 1.09%)</title><rect x="14.7" y="1283.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (29 samples, 1.06%)</title><rect x="14.7" y="1267.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (29 samples, 1.06%)</title><rect x="14.7" y="1251.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.7" y="1262.0"></text>
</g>
<g>
<title>StandardSSTableManager$addTableAsync$1.run (29 samples, 1.06%)</title><rect x="14.7" y="1235.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.7" y="1246.0"></text>
</g>
<g>
<title>StandardSSTableManager.addTable (29 samples, 1.06%)</title><rect x="14.7" y="1219.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.7" y="1230.0"></text>
</g>
<g>
<title>StandardSSTableManager.nextTableFile (7 samples, 0.26%)</title><rect x="14.7" y="1203.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.7" y="1214.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="15.2" y="1187.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.2" y="1198.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="15.2" y="1171.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="18.2" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.04%)</title><rect x="15.2" y="1155.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="18.2" y="1166.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.04%)</title><rect x="15.2" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.2" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.04%)</title><rect x="15.2" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.04%)</title><rect x="15.2" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.2" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.04%)</title><rect x="15.2" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="18.2" y="1102.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="15.2" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.2" y="1086.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="15.2" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="18.2" y="1070.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="15.2" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.2" y="1054.0"></text>
</g>
<g>
<title>JvmtiExport::post_dynamic_code_generated(char const*, void const*, void const*) (1 samples, 0.04%)</title><rect x="15.2" y="1027.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.2" y="1038.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="15.2" y="1011.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="18.2" y="1022.0"></text>
</g>
<g>
<title>java/io/File.&lt;init&gt; (1 samples, 0.04%)</title><rect x="15.6" y="1187.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.6" y="1198.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.normalize (1 samples, 0.04%)</title><rect x="15.6" y="1171.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="1182.0"></text>
</g>
<g>
<title>java/io/File.list (4 samples, 0.15%)</title><rect x="16.0" y="1187.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="1198.0"></text>
</g>
<g>
<title>StandardSSTableManager$nextTableFile$1$1.accept (1 samples, 0.04%)</title><rect x="16.5" y="1171.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="16.5" y="1155.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.5" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="16.5" y="1139.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.5" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="16.5" y="1123.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="16.5" y="1107.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.5" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="16.5" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="16.5" y="1075.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.5" y="1086.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="16.5" y="1059.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="16.5" y="1043.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="16.5" y="1027.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="16.5" y="1011.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.5" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="16.5" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.5" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="16.5" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="16.5" y="963.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="16.5" y="947.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="16.5" y="931.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.5" y="942.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="16.5" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.5" y="926.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="16.5" y="899.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="16.5" y="883.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="16.5" y="867.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="19.5" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="16.5" y="851.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="19.5" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="16.5" y="835.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="19.5" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="16.5" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.5" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="16.5" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="19.5" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="16.5" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="19.5" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="16.5" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.5" y="782.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.04%)</title><rect x="16.5" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.5" y="766.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.04%)</title><rect x="16.5" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.5" y="750.0"></text>
</g>
<g>
<title>ResourceHashtable&lt;LocalVariableTableElement, LocalVariableTableElement*, &amp;(LVT_Hash::hash(LocalVariableTableElement const&amp;)), &amp;(LVT_Hash::equals(LocalVariableTableElement const&amp;, LocalVariableTableElement const&amp;)), 256u, (ResourceObj::allocation_type)1, (MemoryType)7&gt;::put(LocalVariableTableElement const&amp;, LocalVariableTableElement* const&amp;) (1 samples, 0.04%)</title><rect x="16.5" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.5" y="734.0"></text>
</g>
<g>
<title>java/io/File.list (2 samples, 0.07%)</title><rect x="16.9" y="1171.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1182.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.list (2 samples, 0.07%)</title><rect x="16.9" y="1155.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="1166.0"></text>
</g>
<g>
<title>Java_java_io_UnixFileSystem_list (2 samples, 0.07%)</title><rect x="16.9" y="1139.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="19.9" y="1150.0"></text>
</g>
<g>
<title>readdir$INODE64 (2 samples, 0.07%)</title><rect x="16.9" y="1123.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="19.9" y="1134.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.07%)</title><rect x="16.9" y="1107.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="19.9" y="1118.0"></text>
</g>
<g>
<title>StandardSerializer.serialize (22 samples, 0.80%)</title><rect x="17.7" y="1203.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.writeValue (21 samples, 0.77%)</title><rect x="17.7" y="1187.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._writeValueAndClose (20 samples, 0.73%)</title><rect x="17.7" y="1171.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.close (1 samples, 0.04%)</title><rect x="17.7" y="1155.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._flushBuffer (1 samples, 0.04%)</title><rect x="17.7" y="1139.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="1150.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.04%)</title><rect x="17.7" y="1123.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="1134.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.04%)</title><rect x="17.7" y="1107.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.7" y="1118.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.04%)</title><rect x="17.7" y="1091.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="20.7" y="1102.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.04%)</title><rect x="17.7" y="1075.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="20.7" y="1086.0"></text>
</g>
<g>
<title>write (1 samples, 0.04%)</title><rect x="17.7" y="1059.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="20.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.serializeValue (19 samples, 0.69%)</title><rect x="18.2" y="1155.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider._serialize (19 samples, 0.69%)</title><rect x="18.2" y="1139.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (19 samples, 0.69%)</title><rect x="18.2" y="1123.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (19 samples, 0.69%)</title><rect x="18.2" y="1107.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeWithoutTypeInfo (19 samples, 0.69%)</title><rect x="18.2" y="1091.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeFields (19 samples, 0.69%)</title><rect x="18.2" y="1075.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (13 samples, 0.47%)</title><rect x="18.2" y="1059.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (13 samples, 0.47%)</title><rect x="18.2" y="1043.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeStartObject (1 samples, 0.04%)</title><rect x="18.2" y="1027.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonWriteContext.createChildObjectContext (1 samples, 0.04%)</title><rect x="18.2" y="1011.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonWriteContext.&lt;init&gt; (1 samples, 0.04%)</title><rect x="18.2" y="995.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeWithoutTypeInfo (12 samples, 0.44%)</title><rect x="18.6" y="1027.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeFields (8 samples, 0.29%)</title><rect x="20.3" y="1011.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/NumberSerializers$IntegerSerializer.serialize (3 samples, 0.11%)</title><rect x="22.0" y="995.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeNumber (3 samples, 0.11%)</title><rect x="22.0" y="979.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._flushBuffer (3 samples, 0.11%)</title><rect x="22.0" y="963.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.0" y="974.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (3 samples, 0.11%)</title><rect x="22.0" y="947.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.0" y="958.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (3 samples, 0.11%)</title><rect x="22.0" y="931.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.0" y="942.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3 samples, 0.11%)</title><rect x="22.0" y="915.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="25.0" y="926.0"></text>
</g>
<g>
<title>writeBytes (3 samples, 0.11%)</title><rect x="22.0" y="899.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="25.0" y="910.0"></text>
</g>
<g>
<title>write (3 samples, 0.11%)</title><rect x="22.0" y="883.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="25.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic.serialize (1 samples, 0.04%)</title><rect x="23.3" y="995.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$StringKeySerializer.serialize (1 samples, 0.04%)</title><rect x="23.3" y="979.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeFieldName (1 samples, 0.04%)</title><rect x="23.3" y="963.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic.serialize (2 samples, 0.07%)</title><rect x="23.8" y="1059.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic._findAndAddDynamic (1 samples, 0.04%)</title><rect x="24.2" y="1043.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.findAndAddKeySerializer (1 samples, 0.04%)</title><rect x="24.2" y="1027.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (1 samples, 0.04%)</title><rect x="24.2" y="1011.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (1 samples, 0.04%)</title><rect x="24.2" y="995.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createKeySerializer (1 samples, 0.04%)</title><rect x="24.2" y="979.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findKeySerializer (1 samples, 0.04%)</title><rect x="24.2" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (1 samples, 0.04%)</title><rect x="24.2" y="947.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.2" y="958.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (4 samples, 0.15%)</title><rect x="24.6" y="1059.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.6" y="1070.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (4 samples, 0.15%)</title><rect x="24.6" y="1043.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.6" y="1054.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (3 samples, 0.11%)</title><rect x="25.1" y="1027.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.1" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.11%)</title><rect x="25.1" y="1011.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createGenerator (1 samples, 0.04%)</title><rect x="26.3" y="1171.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createGenerator (1 samples, 0.04%)</title><rect x="26.3" y="1155.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.3" y="1166.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (1 samples, 0.04%)</title><rect x="26.3" y="1139.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.3" y="1150.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (1 samples, 0.04%)</title><rect x="26.3" y="1123.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.3" y="1134.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (1 samples, 0.04%)</title><rect x="26.3" y="1107.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="29.3" y="1118.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (1 samples, 0.04%)</title><rect x="26.3" y="1091.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.3" y="1102.0"></text>
</g>
<g>
<title>fileOpen (1 samples, 0.04%)</title><rect x="26.3" y="1075.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="29.3" y="1086.0"></text>
</g>
<g>
<title>module_mutex (1 samples, 0.04%)</title><rect x="26.3" y="1059.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="29.3" y="1070.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (1 samples, 0.04%)</title><rect x="26.8" y="1187.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.8" y="1198.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (1 samples, 0.04%)</title><rect x="26.8" y="1171.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.8" y="1182.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (1 samples, 0.04%)</title><rect x="26.8" y="1155.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.8" y="1166.0"></text>
</g>
<g>
<title>fileOpen (1 samples, 0.04%)</title><rect x="26.8" y="1139.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="29.8" y="1150.0"></text>
</g>
<g>
<title>module_mutex (1 samples, 0.04%)</title><rect x="26.8" y="1123.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="29.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.04%)</title><rect x="27.2" y="1267.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.poll (1 samples, 0.04%)</title><rect x="27.2" y="1251.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/TimeUnit.toNanos (1 samples, 0.04%)</title><rect x="27.2" y="1235.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.2" y="1246.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt$thread$thread$1.run (1,843 samples, 67.16%)</title><rect x="27.6" y="1315.0" width="792.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.6" y="1326.0">kotlin/concurrent/ThreadsKt$thread$thread$1.run</text>
</g>
<g>
<title>MainKt$main$1.invoke (1,843 samples, 67.16%)</title><rect x="27.6" y="1299.0" width="792.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.6" y="1310.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt$main$1.invoke (1,843 samples, 67.16%)</title><rect x="27.6" y="1283.0" width="792.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.6" y="1294.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt.test (1,843 samples, 67.16%)</title><rect x="27.6" y="1267.0" width="792.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.6" y="1278.0">MainKt.test</text>
</g>
<g>
<title>I2C/C2I adapters(0xbb000000)@0x000000011a6d7580 (1 samples, 0.04%)</title><rect x="31.1" y="1251.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="34.1" y="1262.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (2 samples, 0.07%)</title><rect x="31.5" y="1251.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="34.5" y="1262.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.04%)</title><rect x="31.5" y="1235.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="34.5" y="1246.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="31.5" y="1219.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="34.5" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.04%)</title><rect x="31.9" y="1235.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="34.9" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="31.9" y="1219.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="34.9" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="31.9" y="1203.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="34.9" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.04%)</title><rect x="31.9" y="1187.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="34.9" y="1198.0"></text>
</g>
<g>
<title>StandardLogStructuredMergeTree.put (1,818 samples, 66.25%)</title><rect x="32.4" y="1251.0" width="781.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.4" y="1262.0">StandardLogStructuredMergeTree.put</text>
</g>
<g>
<title>StandardMemTable.put (39 samples, 1.42%)</title><rect x="32.4" y="1235.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.4" y="1246.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (39 samples, 1.42%)</title><rect x="32.4" y="1219.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (3 samples, 0.11%)</title><rect x="35.8" y="1203.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (2 samples, 0.07%)</title><rect x="36.2" y="1187.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.2" y="1198.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (28 samples, 1.02%)</title><rect x="37.1" y="1203.0" width="12.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.1" y="1214.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (24 samples, 0.87%)</title><rect x="38.4" y="1187.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.4" y="1198.0"></text>
</g>
<g>
<title>java/util/TreeMap.setColor (1 samples, 0.04%)</title><rect x="48.7" y="1187.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.7" y="1198.0"></text>
</g>
<g>
<title>StandardWriteAheadLogManager.append (1,779 samples, 64.83%)</title><rect x="49.1" y="1235.0" width="765.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.1" y="1246.0">StandardWriteAheadLogManager.append</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.writeValueAsBytes (277 samples, 10.09%)</title><rect x="49.1" y="1219.0" width="119.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.1" y="1230.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 0.40%)</title><rect x="50.0" y="1203.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.33%)</title><rect x="50.0" y="1187.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.&lt;init&gt; (1 samples, 0.04%)</title><rect x="50.9" y="1171.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.&lt;init&gt; (1 samples, 0.04%)</title><rect x="50.9" y="1155.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.&lt;init&gt; (1 samples, 0.04%)</title><rect x="50.9" y="1139.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.11%)</title><rect x="51.3" y="1171.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.11%)</title><rect x="51.3" y="1155.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.&lt;init&gt; (3 samples, 0.11%)</title><rect x="52.6" y="1171.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (3 samples, 0.11%)</title><rect x="52.6" y="1155.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (2 samples, 0.07%)</title><rect x="53.0" y="1139.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ExtensionsKt.registerKotlinModule (1 samples, 0.04%)</title><rect x="53.0" y="1123.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.0" y="1134.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.04%)</title><rect x="53.4" y="1123.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._writeValueAndClose (2 samples, 0.07%)</title><rect x="53.9" y="1187.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/ByteArrayBuilder.toByteArray (1 samples, 0.04%)</title><rect x="54.7" y="1203.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.7" y="1214.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (1 samples, 0.04%)</title><rect x="54.7" y="1187.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.7" y="1198.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (1 samples, 0.04%)</title><rect x="54.7" y="1171.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.7" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (1 samples, 0.04%)</title><rect x="54.7" y="1155.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="57.7" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.04%)</title><rect x="54.7" y="1139.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._writeValueAndClose (249 samples, 9.07%)</title><rect x="55.2" y="1203.0" width="107.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.2" y="1214.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.close (8 samples, 0.29%)</title><rect x="56.0" y="1187.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.0" y="1198.0"></text>
</g>
<g>
<title>I2C/C2I adapters(0xb0000000)@0x000000011a6d2800 (1 samples, 0.04%)</title><rect x="56.9" y="1171.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._flushBuffer (2 samples, 0.07%)</title><rect x="57.3" y="1171.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/ByteArrayBuilder.write (2 samples, 0.07%)</title><rect x="57.3" y="1155.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.04%)</title><rect x="57.3" y="1139.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.3" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="57.7" y="1139.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="60.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._releaseBuffers (1 samples, 0.04%)</title><rect x="58.2" y="1171.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.releaseWriteEncodingBuffer (1 samples, 0.04%)</title><rect x="58.2" y="1155.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseByteBuffer (1 samples, 0.04%)</title><rect x="58.2" y="1139.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.04%)</title><rect x="58.2" y="1123.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LIL_V (1 samples, 0.04%)</title><rect x="58.2" y="1107.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$Array.setVolatile (1 samples, 0.04%)</title><rect x="58.2" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$Array.runtimeTypeCheck (1 samples, 0.04%)</title><rect x="58.2" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.04%)</title><rect x="58.2" y="1059.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.2" y="1070.0"></text>
</g>
<g>
<title>Runtime1::is_instance_of(oopDesc*, oopDesc*) (1 samples, 0.04%)</title><rect x="58.2" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="61.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/ByteArrayBuilder.close (1 samples, 0.04%)</title><rect x="58.6" y="1171.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/ByteArrayBuilder.write (1 samples, 0.04%)</title><rect x="59.0" y="1171.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._serializerProvider (8 samples, 0.29%)</title><rect x="59.5" y="1187.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.createInstance (8 samples, 0.29%)</title><rect x="59.5" y="1171.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.createInstance (8 samples, 0.29%)</title><rect x="59.5" y="1155.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.&lt;init&gt; (8 samples, 0.29%)</title><rect x="59.5" y="1139.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.&lt;init&gt; (8 samples, 0.29%)</title><rect x="59.5" y="1123.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.&lt;init&gt; (8 samples, 0.29%)</title><rect x="59.5" y="1107.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.getReadOnlyLookupMap (7 samples, 0.26%)</title><rect x="59.5" y="1091.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache._makeReadOnlyLookupMap (7 samples, 0.26%)</title><rect x="59.5" y="1075.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.from (7 samples, 0.26%)</title><rect x="59.5" y="1059.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.&lt;init&gt; (7 samples, 0.26%)</title><rect x="59.5" y="1043.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.findSize (1 samples, 0.04%)</title><rect x="59.9" y="1027.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.04%)</title><rect x="60.3" y="1027.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.entrySet (4 samples, 0.15%)</title><rect x="60.7" y="1027.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.04%)</title><rect x="62.5" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.serializeValue (231 samples, 8.42%)</title><rect x="62.9" y="1187.0" width="99.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.9" y="1198.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findTypedValueSerializer (144 samples, 5.25%)</title><rect x="62.9" y="1171.0" width="61.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.9" y="1182.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findValueSerializer (112 samples, 4.08%)</title><rect x="63.3" y="1155.0" width="48.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.3" y="1166.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createAndCacheUntypedSerializer (80 samples, 2.92%)</title><rect x="63.8" y="1139.0" width="34.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.8" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createUntypedSerializer (72 samples, 2.62%)</title><rect x="63.8" y="1123.0" width="30.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.8" y="1134.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory.createSerializer (72 samples, 2.62%)</title><rect x="63.8" y="1107.0" width="30.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.8" y="1118.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.introspect (37 samples, 1.35%)</title><rect x="65.0" y="1091.0" width="16.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.getClassIntrospector (1 samples, 0.04%)</title><rect x="65.0" y="1075.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (36 samples, 1.31%)</title><rect x="65.5" y="1075.0" width="15.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (36 samples, 1.31%)</title><rect x="65.5" y="1059.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdJdkCollectionDesc (35 samples, 1.28%)</title><rect x="65.5" y="1043.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._isStdJDKCollection (4 samples, 0.15%)</title><rect x="65.5" y="1027.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (1 samples, 0.04%)</title><rect x="66.3" y="1011.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="66.3" y="995.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="66.3" y="979.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="69.3" y="990.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (1 samples, 0.04%)</title><rect x="66.8" y="1011.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._resolveAnnotatedClass (31 samples, 1.13%)</title><rect x="67.2" y="1027.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolve (31 samples, 1.13%)</title><rect x="67.2" y="1011.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.&lt;init&gt; (8 samples, 0.29%)</title><rect x="67.2" y="995.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="70.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.getAnnotationIntrospector (1 samples, 0.04%)</title><rect x="68.1" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.getAnnotationIntrospector (1 samples, 0.04%)</title><rect x="68.1" y="963.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.findMixInClassFor (4 samples, 0.15%)</title><rect x="68.5" y="979.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.findMixInClassFor (3 samples, 0.11%)</title><rect x="68.9" y="963.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (1 samples, 0.04%)</title><rect x="68.9" y="947.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.07%)</title><rect x="69.3" y="947.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.07%)</title><rect x="69.3" y="931.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (1 samples, 0.04%)</title><rect x="70.2" y="979.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.2" y="990.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="70.2" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.2" y="974.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="70.2" y="947.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.2" y="958.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.04%)</title><rect x="70.2" y="931.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveFully (23 samples, 0.84%)</title><rect x="70.6" y="995.0" width="9.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.&lt;init&gt; (1 samples, 0.04%)</title><rect x="70.6" y="979.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (20 samples, 0.73%)</title><rect x="71.1" y="979.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperInterfaces (3 samples, 0.11%)</title><rect x="71.1" y="963.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._contains (1 samples, 0.04%)</title><rect x="71.5" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.5" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="71.9" y="947.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.9" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="71.9" y="931.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (13 samples, 0.47%)</title><rect x="72.4" y="963.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperInterfaces (1 samples, 0.04%)</title><rect x="72.8" y="947.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._contains (1 samples, 0.04%)</title><rect x="72.8" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (3 samples, 0.11%)</title><rect x="73.2" y="947.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBase.getInterfaces (1 samples, 0.04%)</title><rect x="74.1" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBase.getInterfaces (3 samples, 0.11%)</title><rect x="74.5" y="947.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.5" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.singletonList (3 samples, 0.11%)</title><rect x="74.5" y="931.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.5" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.15%)</title><rect x="75.8" y="947.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.8" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.15%)</title><rect x="75.8" y="931.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.8" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayItr.hasNext (1 samples, 0.04%)</title><rect x="77.5" y="947.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBase.getInterfaces (4 samples, 0.15%)</title><rect x="77.9" y="963.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.9" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.asList (1 samples, 0.04%)</title><rect x="77.9" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.9" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.&lt;init&gt; (1 samples, 0.04%)</title><rect x="77.9" y="931.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.singletonList (3 samples, 0.11%)</title><rect x="78.4" y="947.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonList.&lt;init&gt; (3 samples, 0.11%)</title><rect x="78.4" y="931.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.4" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (2 samples, 0.07%)</title><rect x="78.8" y="915.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.8" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (2 samples, 0.07%)</title><rect x="78.8" y="899.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.07%)</title><rect x="78.8" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveClassAnnotations (2 samples, 0.07%)</title><rect x="79.7" y="979.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="82.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationCollector.emptyCollector (1 samples, 0.04%)</title><rect x="79.7" y="963.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="79.7" y="947.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.7" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="79.7" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.7" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="79.7" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.7" y="926.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="79.7" y="899.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="82.7" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="79.7" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.7" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.04%)</title><rect x="79.7" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="82.7" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.getResource (1 samples, 0.04%)</title><rect x="79.7" y="851.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.7" y="862.0"></text>
</g>
<g>
<title>java/io/File.exists (1 samples, 0.04%)</title><rect x="79.7" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.7" y="846.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes (1 samples, 0.04%)</title><rect x="79.7" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.7" y="830.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes0 (1 samples, 0.04%)</title><rect x="79.7" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.7" y="814.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="79.7" y="787.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="82.7" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.04%)</title><rect x="80.1" y="963.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.1" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.&lt;init&gt; (1 samples, 0.04%)</title><rect x="80.1" y="947.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdTypeDesc (1 samples, 0.04%)</title><rect x="80.5" y="1043.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (1 samples, 0.04%)</title><rect x="80.5" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="80.5" y="1011.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.04%)</title><rect x="80.5" y="995.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="80.5" y="979.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (2 samples, 0.07%)</title><rect x="81.0" y="1091.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (2 samples, 0.07%)</title><rect x="81.0" y="1075.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.refineSerializationType (2 samples, 0.07%)</title><rect x="81.0" y="1059.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/MapLikeType.isMapLikeType (1 samples, 0.04%)</title><rect x="81.4" y="1043.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicBeanDescription.findSerializationConverter (3 samples, 0.11%)</title><rect x="81.8" y="1091.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializationConverter (1 samples, 0.04%)</title><rect x="82.7" y="1075.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findSerializerFromAnnotation (2 samples, 0.07%)</title><rect x="83.1" y="1091.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (2 samples, 0.07%)</title><rect x="83.1" y="1075.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (2 samples, 0.07%)</title><rect x="83.1" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findSerializer (2 samples, 0.07%)</title><rect x="83.1" y="1043.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="86.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector._findAnnotation (2 samples, 0.07%)</title><rect x="83.1" y="1027.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.getAnnotation (1 samples, 0.04%)</title><rect x="83.5" y="1011.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory._createSerializer2 (25 samples, 0.91%)</title><rect x="84.0" y="1091.0" width="10.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.buildContainerSerializer (22 samples, 0.80%)</title><rect x="84.0" y="1075.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findContentSerializer (3 samples, 0.11%)</title><rect x="84.0" y="1059.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findContentSerializer (3 samples, 0.11%)</title><rect x="84.0" y="1043.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair._isExplicitClassOrOb (1 samples, 0.04%)</title><rect x="84.0" y="1027.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findContentSerializer (2 samples, 0.07%)</title><rect x="84.4" y="1027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findContentSerializer (1 samples, 0.04%)</title><rect x="84.8" y="1011.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="87.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector._findAnnotation (1 samples, 0.04%)</title><rect x="84.8" y="995.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findKeySerializer (1 samples, 0.04%)</title><rect x="85.3" y="1059.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (1 samples, 0.04%)</title><rect x="85.3" y="1043.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (1 samples, 0.04%)</title><rect x="85.3" y="1027.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.buildMapSerializer (11 samples, 0.40%)</title><rect x="85.7" y="1059.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.getDefaultPropertyIgnorals (1 samples, 0.04%)</title><rect x="85.7" y="1043.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findPropertyIgnorals (1 samples, 0.04%)</title><rect x="85.7" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findPropertyIgnorals (1 samples, 0.04%)</title><rect x="85.7" y="1011.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findPropertyIgnorals (1 samples, 0.04%)</title><rect x="85.7" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/annotation/JsonIgnoreProperties$Value.empty (1 samples, 0.04%)</title><rect x="85.7" y="979.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.7" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::at_safepoint(JavaThread*) (1 samples, 0.04%)</title><rect x="85.7" y="963.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="88.7" y="974.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.04%)</title><rect x="85.7" y="947.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="88.7" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.04%)</title><rect x="85.7" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="88.7" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="85.7" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="88.7" y="926.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.04%)</title><rect x="85.7" y="899.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="88.7" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.04%)</title><rect x="85.7" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="88.7" y="894.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="85.7" y="867.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="88.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicBeanDescription.findExpectedFormat (1 samples, 0.04%)</title><rect x="86.1" y="1043.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.1" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.04%)</title><rect x="86.1" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="89.1" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="86.1" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="89.1" y="1022.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="86.1" y="995.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="89.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._checkMapContentInclusion (2 samples, 0.07%)</title><rect x="86.5" y="1043.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findInclusionWithContent (1 samples, 0.04%)</title><rect x="86.5" y="1027.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicBeanDescription.findPropertyInclusion (1 samples, 0.04%)</title><rect x="86.5" y="1011.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.getContentType (1 samples, 0.04%)</title><rect x="87.0" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findFilterId (1 samples, 0.04%)</title><rect x="87.4" y="1043.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.4" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.04%)</title><rect x="87.4" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="90.4" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="87.4" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="90.4" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="87.4" y="995.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="90.4" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.04%)</title><rect x="87.4" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="90.4" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.04%)</title><rect x="87.4" y="963.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="90.4" y="974.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.04%)</title><rect x="87.4" y="947.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="90.4" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.04%)</title><rect x="87.4" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="90.4" y="942.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.04%)</title><rect x="87.4" y="915.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="90.4" y="926.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.04%)</title><rect x="87.4" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="90.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.04%)</title><rect x="87.4" y="883.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="90.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.04%)</title><rect x="87.4" y="867.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="90.4" y="878.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.04%)</title><rect x="87.4" y="851.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="90.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findSerializerByAnnotations (2 samples, 0.07%)</title><rect x="87.8" y="1043.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicBeanDescription.findJsonValueAccessor (2 samples, 0.07%)</title><rect x="87.8" y="1027.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.construct (2 samples, 0.07%)</title><rect x="88.7" y="1043.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="89.1" y="1027.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="89.1" y="1011.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.1" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="89.1" y="995.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.1" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="89.1" y="979.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.1" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="89.1" y="963.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.1" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="89.1" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.1" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="89.1" y="931.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.1" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.04%)</title><rect x="89.1" y="915.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.1" y="926.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.04%)</title><rect x="89.1" y="899.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.1" y="910.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.04%)</title><rect x="89.1" y="883.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ArrayIterator.hasNext (2 samples, 0.07%)</title><rect x="89.6" y="1043.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createTypeSerializer (5 samples, 0.18%)</title><rect x="90.4" y="1059.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.getAnnotationIntrospector (1 samples, 0.04%)</title><rect x="90.8" y="1043.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.introspectClassAnnotations (2 samples, 0.07%)</title><rect x="91.3" y="1043.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (2 samples, 0.07%)</title><rect x="91.3" y="1027.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.07%)</title><rect x="91.3" y="1011.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.07%)</title><rect x="91.3" y="995.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.04%)</title><rect x="91.7" y="979.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.04%)</title><rect x="91.7" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="94.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findTypeResolver (1 samples, 0.04%)</title><rect x="92.1" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findTypeResolver (1 samples, 0.04%)</title><rect x="92.1" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findTypeResolver (1 samples, 0.04%)</title><rect x="92.1" y="1011.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector._findTypeResolver (1 samples, 0.04%)</title><rect x="92.1" y="995.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector._findAnnotation (1 samples, 0.04%)</title><rect x="92.1" y="979.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.getAnnotation (1 samples, 0.04%)</title><rect x="92.1" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationCollector$NoAnnotations.get (1 samples, 0.04%)</title><rect x="92.1" y="947.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/MapLikeType.isTrueMapType (2 samples, 0.07%)</title><rect x="92.6" y="1059.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (1 samples, 0.04%)</title><rect x="93.0" y="1043.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.0" y="1054.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (1 samples, 0.04%)</title><rect x="93.0" y="1027.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="96.0" y="1038.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="93.0" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="96.0" y="1022.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="93.0" y="995.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="96.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.usesStaticTyping (3 samples, 0.11%)</title><rect x="93.4" y="1075.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="96.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializationTyping (2 samples, 0.07%)</title><rect x="93.9" y="1059.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializationTyping (1 samples, 0.04%)</title><rect x="94.3" y="1043.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.3" y="1054.0"></text>
</g>
<g>
<title>I2C/C2I adapters(0xbb000000)@0x000000011a6d7580 (1 samples, 0.04%)</title><rect x="94.3" y="1027.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="97.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (4 samples, 0.15%)</title><rect x="94.7" y="1123.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.15%)</title><rect x="94.7" y="1107.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.15%)</title><rect x="94.7" y="1091.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.15%)</title><rect x="94.7" y="1075.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.15%)</title><rect x="94.7" y="1059.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.07%)</title><rect x="95.6" y="1043.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (1 samples, 0.04%)</title><rect x="96.0" y="1027.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.addAndResolveNonTypedSerializer (4 samples, 0.15%)</title><rect x="96.4" y="1123.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.15%)</title><rect x="96.4" y="1107.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.15%)</title><rect x="96.4" y="1091.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.04%)</title><rect x="96.4" y="1075.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.11%)</title><rect x="96.9" y="1075.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.handleSecondaryContextualization (27 samples, 0.98%)</title><rect x="98.2" y="1139.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.createContextual (26 samples, 0.95%)</title><rect x="98.6" y="1123.0" width="11.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (5 samples, 0.18%)</title><rect x="99.0" y="1107.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createKeySerializer (5 samples, 0.18%)</title><rect x="99.0" y="1091.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.introspect (1 samples, 0.04%)</title><rect x="99.0" y="1075.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (1 samples, 0.04%)</title><rect x="99.0" y="1059.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (1 samples, 0.04%)</title><rect x="99.0" y="1043.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdJdkCollectionDesc (1 samples, 0.04%)</title><rect x="99.0" y="1027.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._isStdJDKCollection (1 samples, 0.04%)</title><rect x="99.0" y="1011.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (1 samples, 0.04%)</title><rect x="99.0" y="995.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.04%)</title><rect x="99.0" y="979.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findKeySerializer (2 samples, 0.07%)</title><rect x="99.4" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (2 samples, 0.07%)</title><rect x="99.4" y="1059.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers.getStdKeySerializer (2 samples, 0.07%)</title><rect x="100.3" y="1075.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic.&lt;init&gt; (1 samples, 0.04%)</title><rect x="100.7" y="1059.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.7" y="1070.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="100.7" y="1043.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="103.7" y="1054.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.04%)</title><rect x="100.7" y="1027.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="103.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.withResolved (2 samples, 0.07%)</title><rect x="101.2" y="1107.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="101.2" y="1091.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer._ensureOverride (1 samples, 0.04%)</title><rect x="101.6" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.verifyMustOverride (1 samples, 0.04%)</title><rect x="101.6" y="1075.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Object.getClass (1 samples, 0.04%)</title><rect x="101.6" y="1059.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.6" y="1070.0"></text>
</g>
<g>
<title>jni_GetObjectClass (1 samples, 0.04%)</title><rect x="101.6" y="1043.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="104.6" y="1054.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="101.6" y="1027.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="104.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdSerializer.findContextualConvertingSerializer (18 samples, 0.66%)</title><rect x="102.0" y="1107.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.getAttribute (1 samples, 0.04%)</title><rect x="102.5" y="1091.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.setAttribute (2 samples, 0.07%)</title><rect x="102.9" y="1091.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/ContextAttributes$Impl.withPerCallAttribute (2 samples, 0.07%)</title><rect x="102.9" y="1075.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="105.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/ContextAttributes$Impl.nonSharedInstance (2 samples, 0.07%)</title><rect x="102.9" y="1059.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="102.9" y="1043.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.9" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="102.9" y="1027.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="105.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="102.9" y="1011.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.04%)</title><rect x="103.3" y="1043.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="103.3" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.3" y="1038.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="103.7" y="1091.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.7" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="103.7" y="1075.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.7" y="1086.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (9 samples, 0.33%)</title><rect x="104.2" y="1091.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.2" y="1102.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.remove (4 samples, 0.15%)</title><rect x="108.0" y="1091.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.0" y="1102.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.closeDeletion (1 samples, 0.04%)</title><rect x="108.0" y="1075.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.0" y="1086.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (3 samples, 0.11%)</title><rect x="108.5" y="1075.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (3 samples, 0.11%)</title><rect x="109.8" y="1139.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="112.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.11%)</title><rect x="109.8" y="1123.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.11%)</title><rect x="109.8" y="1107.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="112.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.07%)</title><rect x="110.2" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.04%)</title><rect x="110.2" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.04%)</title><rect x="110.6" y="1075.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.untypedValueSerializer (1 samples, 0.04%)</title><rect x="111.1" y="1139.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createTypeSerializer (23 samples, 0.84%)</title><rect x="111.5" y="1155.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.introspectClassAnnotations (22 samples, 0.80%)</title><rect x="111.5" y="1139.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="114.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (4 samples, 0.15%)</title><rect x="111.5" y="1123.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.getTypeFactory (1 samples, 0.04%)</title><rect x="111.5" y="1107.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.getTypeFactory (1 samples, 0.04%)</title><rect x="111.5" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.11%)</title><rect x="111.9" y="1107.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.11%)</title><rect x="111.9" y="1091.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.07%)</title><rect x="112.3" y="1075.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.04%)</title><rect x="112.3" y="1059.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.04%)</title><rect x="112.8" y="1059.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.04%)</title><rect x="112.8" y="1043.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="115.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.introspectClassAnnotations (18 samples, 0.66%)</title><rect x="113.2" y="1123.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="116.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forClassAnnotations (18 samples, 0.66%)</title><rect x="113.2" y="1107.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forClassAnnotations (18 samples, 0.66%)</title><rect x="113.2" y="1091.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdTypeDesc (1 samples, 0.04%)</title><rect x="113.2" y="1075.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._resolveAnnotatedClass (17 samples, 0.62%)</title><rect x="113.6" y="1075.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="116.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolve (17 samples, 0.62%)</title><rect x="113.6" y="1059.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="116.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.&lt;init&gt; (4 samples, 0.15%)</title><rect x="113.6" y="1043.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.getAnnotationIntrospector (1 samples, 0.04%)</title><rect x="113.6" y="1027.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.findMixInClassFor (3 samples, 0.11%)</title><rect x="114.1" y="1027.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="117.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.findMixInClassFor (3 samples, 0.11%)</title><rect x="114.1" y="1011.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (2 samples, 0.07%)</title><rect x="114.5" y="995.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.07%)</title><rect x="114.5" y="979.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.5" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.07%)</title><rect x="114.5" y="963.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="117.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveClassAnnotations (2 samples, 0.07%)</title><rect x="114.5" y="947.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveFully (13 samples, 0.47%)</title><rect x="115.4" y="1043.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.&lt;init&gt; (1 samples, 0.04%)</title><rect x="115.4" y="1027.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (5 samples, 0.18%)</title><rect x="115.8" y="1027.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperTypes (3 samples, 0.11%)</title><rect x="116.2" y="1011.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._addSuperInterfaces (1 samples, 0.04%)</title><rect x="116.2" y="995.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="119.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver._contains (1 samples, 0.04%)</title><rect x="116.2" y="979.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.2" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="116.6" y="995.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.6" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.04%)</title><rect x="116.6" y="979.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.6" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.iterator (1 samples, 0.04%)</title><rect x="117.1" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBase.getInterfaces (1 samples, 0.04%)</title><rect x="117.5" y="1011.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="120.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.asList (1 samples, 0.04%)</title><rect x="117.5" y="995.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.&lt;init&gt; (1 samples, 0.04%)</title><rect x="117.5" y="979.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.resolveClassAnnotations (7 samples, 0.26%)</title><rect x="117.9" y="1027.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.findMixInClassFor (3 samples, 0.11%)</title><rect x="119.7" y="1011.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.findMixInClassFor (3 samples, 0.11%)</title><rect x="119.7" y="995.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (1 samples, 0.04%)</title><rect x="120.1" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="123.1" y="990.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.04%)</title><rect x="120.1" y="963.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="120.5" y="979.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="120.5" y="963.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findTypeResolver (1 samples, 0.04%)</title><rect x="120.9" y="1139.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findTypeResolver (1 samples, 0.04%)</title><rect x="120.9" y="1123.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.9" y="1134.0"></text>
</g>
<g>
<title>I2C/C2I adapters(0xbbbb0000)@0x000000011a6da600 (1 samples, 0.04%)</title><rect x="120.9" y="1107.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.addTypedSerializer (4 samples, 0.15%)</title><rect x="121.4" y="1155.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.&lt;init&gt; (3 samples, 0.11%)</title><rect x="121.4" y="1139.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.typedHash (3 samples, 0.11%)</title><rect x="121.4" y="1123.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/Class.getName (2 samples, 0.07%)</title><rect x="121.4" y="1107.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.4" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="121.4" y="1091.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="124.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="122.2" y="1107.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.04%)</title><rect x="122.7" y="1139.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.typedValueSerializer (1 samples, 0.04%)</title><rect x="123.1" y="1155.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.&lt;init&gt; (1 samples, 0.04%)</title><rect x="123.1" y="1139.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="123.1" y="1123.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.typedValueSerializer (2 samples, 0.07%)</title><rect x="123.5" y="1155.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.typedHash (2 samples, 0.07%)</title><rect x="123.5" y="1139.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.07%)</title><rect x="123.5" y="1123.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="126.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.04%)</title><rect x="124.0" y="1107.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.04%)</title><rect x="124.0" y="1091.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="127.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.createContextual (1 samples, 0.04%)</title><rect x="124.4" y="1155.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdSerializer.findContextualConvertingSerializer (1 samples, 0.04%)</title><rect x="124.4" y="1139.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.4" y="1150.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.remove (1 samples, 0.04%)</title><rect x="124.4" y="1123.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.4" y="1134.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (1 samples, 0.04%)</title><rect x="124.4" y="1107.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider._serialize (87 samples, 3.17%)</title><rect x="124.8" y="1171.0" width="37.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.8" y="1182.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (87 samples, 3.17%)</title><rect x="124.8" y="1155.0" width="37.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.8" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serialize (87 samples, 3.17%)</title><rect x="124.8" y="1139.0" width="37.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.8" y="1150.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeEndObject (1 samples, 0.04%)</title><rect x="124.8" y="1123.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonWriteContext.clearAndGetParent (1 samples, 0.04%)</title><rect x="124.8" y="1107.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeStartObject (1 samples, 0.04%)</title><rect x="125.2" y="1123.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonWriteContext.createChildObjectContext (1 samples, 0.04%)</title><rect x="125.2" y="1107.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonWriteContext.&lt;init&gt; (1 samples, 0.04%)</title><rect x="125.2" y="1091.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeWithoutTypeInfo (85 samples, 3.10%)</title><rect x="125.7" y="1123.0" width="36.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="128.7" y="1134.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.isEnabled (1 samples, 0.04%)</title><rect x="127.0" y="1107.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer.serializeFields (81 samples, 2.95%)</title><rect x="127.4" y="1107.0" width="34.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.4" y="1118.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap$Empty.serializerFor (2 samples, 0.07%)</title><rect x="127.4" y="1091.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer._findSerializer (48 samples, 1.75%)</title><rect x="128.3" y="1091.0" width="20.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="131.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/JavaType.hasGenericTypes (1 samples, 0.04%)</title><rect x="128.7" y="1075.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBase.containedTypeCount (1 samples, 0.04%)</title><rect x="128.7" y="1059.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.size (1 samples, 0.04%)</title><rect x="128.7" y="1043.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/MapSerializer._findAndAddDynamic (45 samples, 1.64%)</title><rect x="129.1" y="1075.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.findAndAddSecondarySerializer (45 samples, 1.64%)</title><rect x="129.1" y="1059.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findContentValueSerializer (36 samples, 1.31%)</title><rect x="130.0" y="1043.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="133.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createAndCacheUntypedSerializer (28 samples, 1.02%)</title><rect x="130.0" y="1027.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._createUntypedSerializer (20 samples, 0.73%)</title><rect x="130.0" y="1011.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory.createSerializer (20 samples, 0.73%)</title><rect x="130.0" y="995.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.introspect (3 samples, 0.11%)</title><rect x="130.4" y="979.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (3 samples, 0.11%)</title><rect x="130.4" y="963.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (2 samples, 0.07%)</title><rect x="130.8" y="947.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdTypeDesc (2 samples, 0.07%)</title><rect x="130.8" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (2 samples, 0.07%)</title><rect x="130.8" y="915.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.07%)</title><rect x="130.8" y="899.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="133.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.07%)</title><rect x="130.8" y="883.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="131.3" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (1 samples, 0.04%)</title><rect x="131.7" y="979.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.refineSerializationType (1 samples, 0.04%)</title><rect x="131.7" y="963.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.refineSerializationType (1 samples, 0.04%)</title><rect x="131.7" y="947.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector._findAnnotation (1 samples, 0.04%)</title><rect x="131.7" y="931.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findSerializerFromAnnotation (1 samples, 0.04%)</title><rect x="132.1" y="979.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (1 samples, 0.04%)</title><rect x="132.1" y="963.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findSerializer (1 samples, 0.04%)</title><rect x="132.1" y="947.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findSerializer (1 samples, 0.04%)</title><rect x="132.1" y="931.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector._findAnnotation (1 samples, 0.04%)</title><rect x="132.1" y="915.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.getAnnotation (1 samples, 0.04%)</title><rect x="132.1" y="899.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationCollector$NoAnnotations.get (1 samples, 0.04%)</title><rect x="132.1" y="883.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="135.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory._createSerializer2 (14 samples, 0.51%)</title><rect x="132.6" y="979.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findSerializerByAnnotations (2 samples, 0.07%)</title><rect x="132.6" y="963.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (1 samples, 0.04%)</title><rect x="133.0" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="136.0" y="958.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="133.0" y="931.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="136.0" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="133.0" y="915.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="136.0" y="926.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="133.0" y="899.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="136.0" y="910.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="133.0" y="883.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="136.0" y="894.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.04%)</title><rect x="133.0" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="136.0" y="878.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.04%)</title><rect x="133.0" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="136.0" y="862.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="133.0" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="136.0" y="846.0"></text>
</g>
<g>
<title>AbstractICache::invalidate_range(unsigned char*, int) (1 samples, 0.04%)</title><rect x="133.0" y="819.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="136.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.findSerializerByLookup (5 samples, 0.18%)</title><rect x="133.4" y="963.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.15%)</title><rect x="133.8" y="947.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.11%)</title><rect x="133.8" y="931.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="135.1" y="931.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.1" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="135.1" y="915.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.1" y="926.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="135.1" y="899.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="138.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ArrayIterator.next (2 samples, 0.07%)</title><rect x="135.6" y="963.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="138.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinSerializers.findSerializer (5 samples, 0.18%)</title><rect x="136.4" y="963.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="139.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (3 samples, 0.11%)</title><rect x="138.6" y="1011.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.11%)</title><rect x="138.6" y="995.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.07%)</title><rect x="139.0" y="979.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.07%)</title><rect x="139.0" y="963.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="142.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.07%)</title><rect x="139.0" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.04%)</title><rect x="139.4" y="931.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.addAndResolveNonTypedSerializer (5 samples, 0.18%)</title><rect x="139.9" y="1011.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.15%)</title><rect x="140.3" y="995.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="143.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.15%)</title><rect x="140.3" y="979.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.07%)</title><rect x="141.2" y="963.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (2 samples, 0.07%)</title><rect x="141.2" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.handleSecondaryContextualization (1 samples, 0.04%)</title><rect x="142.0" y="1027.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/SerializerCache.untypedValueSerializer (3 samples, 0.11%)</title><rect x="142.4" y="1027.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="145.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.&lt;init&gt; (2 samples, 0.07%)</title><rect x="142.4" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="145.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.untypedHash (2 samples, 0.07%)</title><rect x="142.4" y="995.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.04%)</title><rect x="142.4" y="979.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.4" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="142.9" y="979.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.9" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.04%)</title><rect x="142.9" y="963.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="145.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="143.3" y="1011.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="143.3" y="995.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.hashCode (1 samples, 0.04%)</title><rect x="143.3" y="979.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.untypedValueSerializer (4 samples, 0.15%)</title><rect x="143.7" y="1027.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/TypeKey.untypedHash (3 samples, 0.11%)</title><rect x="144.2" y="1011.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.11%)</title><rect x="144.2" y="995.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.11%)</title><rect x="144.2" y="979.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="147.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap$Single.newWith (7 samples, 0.26%)</title><rect x="145.5" y="1043.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap$Double.&lt;init&gt; (6 samples, 0.22%)</title><rect x="145.9" y="1027.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="148.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findContentValueSerializer (2 samples, 0.07%)</title><rect x="147.6" y="1011.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="150.6" y="1022.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="148.5" y="1075.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="151.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/NumberSerializers$IntegerSerializer.serialize (1 samples, 0.04%)</title><rect x="148.9" y="1091.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="151.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic.serialize (19 samples, 0.69%)</title><rect x="149.3" y="1091.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$Dynamic._findAndAddDynamic (14 samples, 0.51%)</title><rect x="150.6" y="1075.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.6" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="150.6" y="1059.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="153.6" y="1070.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="150.6" y="1043.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="153.6" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="150.6" y="1027.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="153.6" y="1038.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.04%)</title><rect x="150.6" y="1011.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="153.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.findAndAddKeySerializer (12 samples, 0.44%)</title><rect x="151.0" y="1059.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (11 samples, 0.40%)</title><rect x="151.5" y="1043.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.findKeySerializer (10 samples, 0.36%)</title><rect x="151.5" y="1027.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="154.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider._handleContextualResolvable (2 samples, 0.07%)</title><rect x="151.5" y="1011.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="154.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.handleSecondaryContextualization (2 samples, 0.07%)</title><rect x="151.5" y="995.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.createKeySerializer (8 samples, 0.29%)</title><rect x="152.3" y="1011.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="155.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.introspect (2 samples, 0.07%)</title><rect x="152.8" y="995.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (2 samples, 0.07%)</title><rect x="152.8" y="979.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (2 samples, 0.07%)</title><rect x="152.8" y="963.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector._findStdTypeDesc (2 samples, 0.07%)</title><rect x="152.8" y="947.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.isJDKClass (2 samples, 0.07%)</title><rect x="152.8" y="931.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.07%)</title><rect x="152.8" y="915.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.07%)</title><rect x="152.8" y="899.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="155.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.07%)</title><rect x="152.8" y="883.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.hasKeySerializers (1 samples, 0.04%)</title><rect x="153.6" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.forSerialization (1 samples, 0.04%)</title><rect x="154.1" y="995.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="157.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory._findKeySerializer (3 samples, 0.11%)</title><rect x="154.5" y="995.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (3 samples, 0.11%)</title><rect x="154.5" y="979.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair._explicitClassOrOb (1 samples, 0.04%)</title><rect x="154.5" y="963.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="157.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.findKeySerializer (1 samples, 0.04%)</title><rect x="154.9" y="963.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findKeySerializer (1 samples, 0.04%)</title><rect x="154.9" y="947.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector._findAnnotation (1 samples, 0.04%)</title><rect x="154.9" y="931.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedClass.getAnnotation (1 samples, 0.04%)</title><rect x="154.9" y="915.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="157.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.findKeySerializer (1 samples, 0.04%)</title><rect x="155.3" y="963.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="158.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.constructType (1 samples, 0.04%)</title><rect x="155.8" y="1027.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.04%)</title><rect x="155.8" y="1011.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.04%)</title><rect x="155.8" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.8" y="1006.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.04%)</title><rect x="156.2" y="1059.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="159.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdKeySerializers$StringKeySerializer.serialize (1 samples, 0.04%)</title><rect x="156.6" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeFieldName (1 samples, 0.04%)</title><rect x="156.6" y="1059.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="159.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._writeStringSegment (1 samples, 0.04%)</title><rect x="156.6" y="1043.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.getClass (1 samples, 0.04%)</title><rect x="157.1" y="1075.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.1" y="1086.0"></text>
</g>
<g>
<title>jni_GetObjectClass (1 samples, 0.04%)</title><rect x="157.1" y="1059.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="160.1" y="1070.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="157.1" y="1043.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="160.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StringSerializer.serialize (5 samples, 0.18%)</title><rect x="157.5" y="1091.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.writeString (5 samples, 0.18%)</title><rect x="157.5" y="1075.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._verifyValueWrite (2 samples, 0.07%)</title><rect x="157.9" y="1059.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator._writeStringSegment (2 samples, 0.07%)</title><rect x="158.8" y="1059.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.8" y="1070.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (4 samples, 0.15%)</title><rect x="159.7" y="1091.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.7" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (4 samples, 0.15%)</title><rect x="159.7" y="1075.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.7" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (4 samples, 0.15%)</title><rect x="159.7" y="1059.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.7" y="1070.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.07%)</title><rect x="160.5" y="1043.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="163.5" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (2 samples, 0.07%)</title><rect x="161.4" y="1091.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.4" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (2 samples, 0.07%)</title><rect x="161.4" y="1075.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.4" y="1086.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (2 samples, 0.07%)</title><rect x="161.4" y="1059.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.4" y="1070.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (2 samples, 0.07%)</title><rect x="161.4" y="1043.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.07%)</title><rect x="161.4" y="1027.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createGenerator (14 samples, 0.51%)</title><rect x="162.2" y="1203.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createGenerator (14 samples, 0.51%)</title><rect x="162.2" y="1187.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="165.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.18%)</title><rect x="163.5" y="1171.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.18%)</title><rect x="163.5" y="1155.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.18%)</title><rect x="163.5" y="1139.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.&lt;init&gt; (2 samples, 0.07%)</title><rect x="163.5" y="1123.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.&lt;init&gt; (2 samples, 0.07%)</title><rect x="163.5" y="1107.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.5" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.07%)</title><rect x="163.5" y="1091.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="166.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.04%)</title><rect x="164.4" y="1123.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.04%)</title><rect x="164.4" y="1107.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.&lt;init&gt; (2 samples, 0.07%)</title><rect x="164.8" y="1123.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (2 samples, 0.07%)</title><rect x="164.8" y="1107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (2 samples, 0.07%)</title><rect x="164.8" y="1091.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createUTF8Generator (5 samples, 0.18%)</title><rect x="165.7" y="1171.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8JsonGenerator.&lt;init&gt; (3 samples, 0.11%)</title><rect x="166.5" y="1155.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="169.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.allocConcatBuffer (2 samples, 0.07%)</title><rect x="167.0" y="1139.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.07%)</title><rect x="167.0" y="1123.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.07%)</title><rect x="167.0" y="1107.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (2 samples, 0.07%)</title><rect x="167.0" y="1091.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LIL_L (1 samples, 0.04%)</title><rect x="167.4" y="1075.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="170.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$Array.getAndSet (1 samples, 0.04%)</title><rect x="167.4" y="1059.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._decorate (1 samples, 0.04%)</title><rect x="167.8" y="1171.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="170.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ExtensionsKt.jacksonObjectMapper (149 samples, 5.43%)</title><rect x="168.3" y="1219.0" width="64.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.3" y="1230.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.&lt;clinit&gt; (8 samples, 0.29%)</title><rect x="168.3" y="1203.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="168.3" y="1187.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ext/Java7Support.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="168.3" y="1171.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="171.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ClassUtil.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="168.3" y="1155.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="168.3" y="1139.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.3" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="168.3" y="1123.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.3" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="168.3" y="1107.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="168.3" y="1091.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.3" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="168.3" y="1075.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.3" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="168.3" y="1059.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="171.3" y="1070.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="168.3" y="1043.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="168.3" y="1027.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="168.3" y="1011.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.3" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="168.3" y="995.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="171.3" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="168.3" y="979.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="171.3" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="168.3" y="963.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="171.3" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="168.3" y="947.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="171.3" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="168.3" y="931.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="171.3" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="168.3" y="915.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="171.3" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="168.3" y="899.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="171.3" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.04%)</title><rect x="168.3" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="171.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/StdDateFormat.&lt;clinit&gt; (5 samples, 0.18%)</title><rect x="168.7" y="1187.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.7" y="1198.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.&lt;init&gt; (5 samples, 0.18%)</title><rect x="168.7" y="1171.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.7" y="1182.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.initializeCalendar (5 samples, 0.18%)</title><rect x="168.7" y="1155.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="171.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Calendar.getInstance (5 samples, 0.18%)</title><rect x="168.7" y="1139.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.7" y="1150.0"></text>
</g>
<g>
<title>java/util/Calendar.createCalendar (4 samples, 0.15%)</title><rect x="168.7" y="1123.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.7" y="1134.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarProviderImpl.getInstance (4 samples, 0.15%)</title><rect x="168.7" y="1107.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Calendar$Builder.build (4 samples, 0.15%)</title><rect x="168.7" y="1091.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.7" y="1102.0"></text>
</g>
<g>
<title>java/util/GregorianCalendar.&lt;init&gt; (4 samples, 0.15%)</title><rect x="168.7" y="1075.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Calendar.&lt;init&gt; (4 samples, 0.15%)</title><rect x="168.7" y="1059.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Calendar.setWeekCountData (4 samples, 0.15%)</title><rect x="168.7" y="1043.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.7" y="1054.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarDataUtility.retrieveFirstDayOfWeek (3 samples, 0.11%)</title><rect x="168.7" y="1027.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.7" y="1038.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObject (3 samples, 0.11%)</title><rect x="168.7" y="1011.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.7" y="1022.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObjectImpl (3 samples, 0.11%)</title><rect x="168.7" y="995.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.7" y="1006.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.findProviders (2 samples, 0.07%)</title><rect x="168.7" y="979.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.7" y="990.0"></text>
</g>
<g>
<title>java/util/spi/LocaleServiceProvider.isSupportedLocale (2 samples, 0.07%)</title><rect x="168.7" y="963.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="171.7" y="974.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarDataProviderImpl.getAvailableLocales (2 samples, 0.07%)</title><rect x="168.7" y="947.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.7" y="958.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.toLocaleArray (2 samples, 0.07%)</title><rect x="168.7" y="931.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.7" y="942.0"></text>
</g>
<g>
<title>java/util/Locale.forLanguageTag (2 samples, 0.07%)</title><rect x="168.7" y="915.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.7" y="926.0"></text>
</g>
<g>
<title>sun/util/locale/LanguageTag.parse (2 samples, 0.07%)</title><rect x="168.7" y="899.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="168.7" y="883.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="168.7" y="867.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.7" y="878.0"></text>
</g>
<g>
<title>sun/util/locale/LanguageTag.parseRegion (1 samples, 0.04%)</title><rect x="169.1" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="172.1" y="894.0"></text>
</g>
<g>
<title>sun/util/locale/LanguageTag.isRegion (1 samples, 0.04%)</title><rect x="169.1" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="172.1" y="878.0"></text>
</g>
<g>
<title>sun/util/locale/LocaleUtils.isAlphaString (1 samples, 0.04%)</title><rect x="169.1" y="851.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.1" y="862.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="169.1" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="172.1" y="846.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="169.1" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="172.1" y="830.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="169.1" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="172.1" y="814.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="169.1" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="172.1" y="798.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="169.1" y="771.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="172.1" y="782.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLookupLocales (1 samples, 0.04%)</title><rect x="169.5" y="979.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.5" y="990.0"></text>
</g>
<g>
<title>java/util/ResourceBundle$Control.getCandidateLocales (1 samples, 0.04%)</title><rect x="169.5" y="963.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.5" y="974.0"></text>
</g>
<g>
<title>sun/util/locale/LocaleObjectCache.get (1 samples, 0.04%)</title><rect x="169.5" y="947.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.5" y="958.0"></text>
</g>
<g>
<title>java/util/ResourceBundle$Control$CandidateListCache.createObject (1 samples, 0.04%)</title><rect x="169.5" y="931.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.5" y="942.0"></text>
</g>
<g>
<title>java/util/ResourceBundle$Control$CandidateListCache.createObject (1 samples, 0.04%)</title><rect x="169.5" y="915.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.5" y="926.0"></text>
</g>
<g>
<title>java/util/ResourceBundle$Control$CandidateListCache.getDefaultList (1 samples, 0.04%)</title><rect x="169.5" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.5" y="910.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.04%)</title><rect x="169.5" y="883.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="172.5" y="894.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="172.5" y="878.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="172.5" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="835.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="172.5" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="172.5" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="172.5" y="814.0"></text>
</g>
<g>
<title>SystemDictionary::load_shared_class(InstanceKlass*, Handle, Handle, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="787.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="172.5" y="798.0"></text>
</g>
<g>
<title>ClassLoader::add_package(char const*, short, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="172.5" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.04%)</title><rect x="169.5" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="172.5" y="766.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="169.5" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="172.5" y="750.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="169.5" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="172.5" y="734.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarDataUtility.retrieveMinimalDaysInFirstWeek (1 samples, 0.04%)</title><rect x="170.0" y="1027.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.0" y="1038.0"></text>
</g>
<g>
<title>sun/util/locale/provider/CalendarDataUtility.findRegionOverride (1 samples, 0.04%)</title><rect x="170.0" y="1011.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Locale.getUnicodeLocaleType (1 samples, 0.04%)</title><rect x="170.0" y="995.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Locale.isUnicodeExtensionKey (1 samples, 0.04%)</title><rect x="170.0" y="979.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.0" y="990.0"></text>
</g>
<g>
<title>sun/util/locale/LocaleUtils.isAlphaNumericString (1 samples, 0.04%)</title><rect x="170.0" y="963.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.0" y="974.0"></text>
</g>
<g>
<title>sun/util/locale/LocaleUtils.isAlphaNumeric (1 samples, 0.04%)</title><rect x="170.0" y="947.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.0" y="958.0"></text>
</g>
<g>
<title>java/util/Calendar.defaultTimeZone (1 samples, 0.04%)</title><rect x="170.4" y="1123.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.4" y="1134.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDefault (1 samples, 0.04%)</title><rect x="170.4" y="1107.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.4" y="1118.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDefaultRef (1 samples, 0.04%)</title><rect x="170.4" y="1091.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.4" y="1102.0"></text>
</g>
<g>
<title>java/util/TimeZone.setDefaultZone (1 samples, 0.04%)</title><rect x="170.4" y="1075.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.4" y="1086.0"></text>
</g>
<g>
<title>java/util/TimeZone.getTimeZone (1 samples, 0.04%)</title><rect x="170.4" y="1059.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.4" y="1070.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfo.getTimeZone (1 samples, 0.04%)</title><rect x="170.4" y="1043.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.4" y="1054.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile.getZoneInfo (1 samples, 0.04%)</title><rect x="170.4" y="1027.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.4" y="1038.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile.getZoneInfo0 (1 samples, 0.04%)</title><rect x="170.4" y="1011.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.4" y="1022.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile.getZoneInfo (1 samples, 0.04%)</title><rect x="170.4" y="995.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="173.4" y="1006.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile.getZoneInfo (1 samples, 0.04%)</title><rect x="170.4" y="979.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.4" y="990.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.04%)</title><rect x="170.4" y="963.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="173.4" y="974.0"></text>
</g>
<g>
<title>ConstantPool::klass_at(int, Thread*) (1 samples, 0.04%)</title><rect x="170.4" y="947.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="173.4" y="958.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_impl(constantPoolHandle const&amp;, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="170.4" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="173.4" y="942.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.04%)</title><rect x="170.4" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="173.4" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.04%)</title><rect x="170.4" y="899.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="173.4" y="910.0"></text>
</g>
<g>
<title>SystemDictionary::load_instance_class(Symbol*, Handle, Thread*) (1 samples, 0.04%)</title><rect x="170.4" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="173.4" y="894.0"></text>
</g>
<g>
<title>ClassLoader::load_class(Symbol*, bool, Thread*) (1 samples, 0.04%)</title><rect x="170.4" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="173.4" y="878.0"></text>
</g>
<g>
<title>EventMark::EventMark(char const*, ...) (1 samples, 0.04%)</title><rect x="170.4" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="173.4" y="862.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.04%)</title><rect x="170.4" y="835.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="173.4" y="846.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.04%)</title><rect x="170.4" y="819.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="173.4" y="830.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.04%)</title><rect x="170.4" y="803.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="173.4" y="814.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.04%)</title><rect x="170.4" y="787.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="173.4" y="798.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.04%)</title><rect x="170.4" y="771.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="173.4" y="782.0"></text>
</g>
<g>
<title>_platform_strlen (1 samples, 0.04%)</title><rect x="170.4" y="755.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="173.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.07%)</title><rect x="170.8" y="1187.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.8" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.07%)</title><rect x="170.8" y="1171.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.8" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.07%)</title><rect x="170.8" y="1155.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.8" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.07%)</title><rect x="170.8" y="1139.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="173.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.07%)</title><rect x="170.8" y="1123.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.8" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (2 samples, 0.07%)</title><rect x="170.8" y="1107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.8" y="1118.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (2 samples, 0.07%)</title><rect x="170.8" y="1091.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (2 samples, 0.07%)</title><rect x="170.8" y="1075.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (2 samples, 0.07%)</title><rect x="170.8" y="1059.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.8" y="1070.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="170.8" y="1043.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="173.8" y="1054.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="170.8" y="1027.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="173.8" y="1038.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="170.8" y="1011.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="173.8" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="170.8" y="995.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="173.8" y="1006.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="170.8" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="173.8" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="170.8" y="963.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="173.8" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="170.8" y="947.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="173.8" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.04%)</title><rect x="170.8" y="931.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="173.8" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_method_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.04%)</title><rect x="170.8" y="915.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="173.8" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.04%)</title><rect x="170.8" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="173.8" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.04%)</title><rect x="170.8" y="883.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="173.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="171.3" y="1043.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.3" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="171.3" y="1027.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="174.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="171.3" y="1011.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="171.3" y="995.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="174.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="171.3" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.04%)</title><rect x="171.3" y="963.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="174.3" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.getResource (1 samples, 0.04%)</title><rect x="171.3" y="947.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.3" y="958.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.04%)</title><rect x="171.3" y="931.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.3" y="942.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.04%)</title><rect x="171.3" y="915.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="174.3" y="926.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="171.3" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.3" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="171.3" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.&lt;init&gt; (66 samples, 2.41%)</title><rect x="171.7" y="1203.0" width="28.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.7" y="1214.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.&lt;init&gt; (66 samples, 2.41%)</title><rect x="171.7" y="1187.0" width="28.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.7" y="1198.0">co..</text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.04%)</title><rect x="173.4" y="1171.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="176.4" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.04%)</title><rect x="173.4" y="1155.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="176.4" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.04%)</title><rect x="173.4" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="176.4" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.04%)</title><rect x="173.4" y="1123.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="176.4" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::rewrite_class(Thread*) (1 samples, 0.04%)</title><rect x="173.4" y="1107.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="176.4" y="1118.0"></text>
</g>
<g>
<title>Rewriter::rewrite(InstanceKlass*, Thread*) (1 samples, 0.04%)</title><rect x="173.4" y="1091.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="176.4" y="1102.0"></text>
</g>
<g>
<title>Rewriter::Rewriter(InstanceKlass*, constantPoolHandle const&amp;, Array&lt;Method*&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="173.4" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="176.4" y="1086.0"></text>
</g>
<g>
<title>Rewriter::rewrite_bytecodes(Thread*) (1 samples, 0.04%)</title><rect x="173.4" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="176.4" y="1070.0"></text>
</g>
<g>
<title>Rewriter::scan_method(Method*, bool, bool*) (1 samples, 0.04%)</title><rect x="173.4" y="1043.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="176.4" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.04%)</title><rect x="173.4" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="176.4" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.04%)</title><rect x="173.4" y="1011.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="176.4" y="1022.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.04%)</title><rect x="173.4" y="995.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="176.4" y="1006.0"></text>
</g>
<g>
<title>FieldStreamBase::FieldStreamBase(Array&lt;unsigned short&gt;*, constantPoolHandle const&amp;, int, int) (1 samples, 0.04%)</title><rect x="173.4" y="979.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="176.4" y="990.0"></text>
</g>
<g>
<title>FieldInfo::access_flags() const (1 samples, 0.04%)</title><rect x="173.4" y="963.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="176.4" y="974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="173.8" y="1171.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="176.8" y="1182.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="173.8" y="1155.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="176.8" y="1166.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.04%)</title><rect x="173.8" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="176.8" y="1150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.04%)</title><rect x="173.8" y="1123.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="176.8" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.04%)</title><rect x="173.8" y="1107.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="176.8" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.04%)</title><rect x="173.8" y="1091.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="176.8" y="1102.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, bool, Thread*) (1 samples, 0.04%)</title><rect x="173.8" y="1075.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="176.8" y="1086.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.04%)</title><rect x="173.8" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="176.8" y="1070.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="173.8" y="1043.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="176.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.&lt;init&gt; (2 samples, 0.07%)</title><rect x="174.3" y="1171.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.&lt;init&gt; (1 samples, 0.04%)</title><rect x="174.3" y="1155.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.&lt;init&gt; (1 samples, 0.04%)</title><rect x="174.3" y="1139.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="174.7" y="1155.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.7" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="174.7" y="1139.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.7" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="174.7" y="1123.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.7" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="174.7" y="1107.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="177.7" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="174.7" y="1091.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="177.7" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="174.7" y="1075.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.7" y="1086.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="174.7" y="1059.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="177.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="174.7" y="1043.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="174.7" y="1027.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="174.7" y="1011.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.7" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="174.7" y="995.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.7" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="174.7" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="177.7" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="174.7" y="963.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="174.7" y="947.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.7" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="174.7" y="931.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.7" y="942.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="174.7" y="915.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="174.7" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="174.7" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.7" y="894.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="174.7" y="867.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="177.7" y="878.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="174.7" y="851.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="177.7" y="862.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="174.7" y="835.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="177.7" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="174.7" y="819.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="177.7" y="830.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="174.7" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="177.7" y="814.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="174.7" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="177.7" y="798.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="174.7" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="177.7" y="782.0"></text>
</g>
<g>
<title>ConstantPool::allocate(ClassLoaderData*, int, Thread*) (1 samples, 0.04%)</title><rect x="174.7" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="177.7" y="766.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.04%)</title><rect x="174.7" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="177.7" y="750.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate(unsigned long) (1 samples, 0.04%)</title><rect x="174.7" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="177.7" y="734.0"></text>
</g>
<g>
<title>metaspace::SmallBlocks::total_size() const (1 samples, 0.04%)</title><rect x="174.7" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="177.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/MappingJsonFactory.&lt;init&gt; (29 samples, 1.06%)</title><rect x="175.1" y="1171.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.&lt;init&gt; (29 samples, 1.06%)</title><rect x="175.1" y="1155.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.createRoot (10 samples, 0.36%)</title><rect x="176.4" y="1139.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.createRoot (9 samples, 0.33%)</title><rect x="176.4" y="1123.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (9 samples, 0.33%)</title><rect x="176.4" y="1107.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer$TableInfo.createInitial (9 samples, 0.33%)</title><rect x="176.4" y="1091.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.4" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="179.4" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="182.4" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="179.4" y="1059.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="182.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="179.4" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="182.4" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="179.4" y="1027.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="182.4" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="179.4" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="182.4" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="179.4" y="995.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="182.4" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.04%)</title><rect x="179.4" y="979.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="182.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer$TableInfo.&lt;init&gt; (1 samples, 0.04%)</title><rect x="179.9" y="1075.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/System.currentTimeMillis (1 samples, 0.04%)</title><rect x="180.3" y="1123.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.3" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="180.3" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="183.3" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="180.3" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="183.3" y="1102.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="180.3" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="183.3" y="1086.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.04%)</title><rect x="180.3" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="183.3" y="1070.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.04%)</title><rect x="180.3" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="183.3" y="1054.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.04%)</title><rect x="180.3" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="183.3" y="1038.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="180.3" y="1011.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="183.3" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle const&amp;, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.04%)</title><rect x="180.3" y="995.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="183.3" y="1006.0"></text>
</g>
<g>
<title>Method::critical_native_function() (1 samples, 0.04%)</title><rect x="180.3" y="979.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="183.3" y="990.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_entry(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="180.3" y="963.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="183.3" y="974.0"></text>
</g>
<g>
<title>NativeLookup::lookup_critical_style(methodHandle const&amp;, char*, char const*, int, bool) (1 samples, 0.04%)</title><rect x="180.3" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="183.3" y="958.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.04%)</title><rect x="180.3" y="931.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="183.3" y="942.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="180.3" y="915.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="183.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="180.3" y="899.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="183.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="180.3" y="883.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="183.3" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="180.3" y="867.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="183.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.createRoot (16 samples, 0.58%)</title><rect x="180.7" y="1139.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.createRoot (16 samples, 0.58%)</title><rect x="180.7" y="1123.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.&lt;init&gt; (15 samples, 0.55%)</title><rect x="180.7" y="1107.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.7" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.07%)</title><rect x="185.0" y="1091.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="188.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.07%)</title><rect x="185.0" y="1075.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="188.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.07%)</title><rect x="185.0" y="1059.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="188.0" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="185.0" y="1043.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="188.0" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.07%)</title><rect x="185.0" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="188.0" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.07%)</title><rect x="185.0" y="1011.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="188.0" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="185.0" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="188.0" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="185.0" y="979.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="188.0" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.04%)</title><rect x="185.0" y="963.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="188.0" y="974.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.04%)</title><rect x="185.0" y="947.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="188.0" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.04%)</title><rect x="185.5" y="995.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="188.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer$TableInfo.createInitial (1 samples, 0.04%)</title><rect x="185.9" y="1091.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.&lt;init&gt; (2 samples, 0.07%)</title><rect x="186.3" y="1091.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.3" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="187.2" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="190.2" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="187.2" y="1091.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="190.2" y="1102.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.04%)</title><rect x="187.2" y="1075.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="190.2" y="1086.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="187.2" y="1059.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="190.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.defaultClassIntrospector (1 samples, 0.04%)</title><rect x="187.6" y="1171.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="187.6" y="1155.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.6" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="187.6" y="1139.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="190.6" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="187.6" y="1123.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="187.6" y="1107.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.6" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="187.6" y="1091.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.6" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="187.6" y="1075.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="190.6" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.04%)</title><rect x="187.6" y="1059.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.6" y="1070.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.04%)</title><rect x="187.6" y="1043.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.6" y="1054.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.04%)</title><rect x="187.6" y="1027.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.6" y="1038.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInputStream.read (1 samples, 0.04%)</title><rect x="187.6" y="1011.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.6" y="1022.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.readAt (1 samples, 0.04%)</title><rect x="187.6" y="995.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.6" y="1006.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.read (1 samples, 0.04%)</title><rect x="187.6" y="979.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.6" y="990.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.readBytes (1 samples, 0.04%)</title><rect x="187.6" y="963.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.6" y="974.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.04%)</title><rect x="187.6" y="947.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="190.6" y="958.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.04%)</title><rect x="187.6" y="931.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="190.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.&lt;init&gt; (5 samples, 0.18%)</title><rect x="188.0" y="1171.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="191.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.&lt;init&gt; (4 samples, 0.15%)</title><rect x="188.0" y="1155.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="191.0" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="189.8" y="1155.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="192.8" y="1166.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="189.8" y="1139.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="192.8" y="1150.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.04%)</title><rect x="189.8" y="1123.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="192.8" y="1134.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="189.8" y="1107.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="192.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializerProvider.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="190.2" y="1171.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="190.2" y="1155.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="190.2" y="1139.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.2" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="190.2" y="1123.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="190.2" y="1107.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.2" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="190.2" y="1091.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.2" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="190.2" y="1075.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.2" y="1086.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="190.2" y="1059.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="190.2" y="1043.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="190.2" y="1027.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.2" y="1038.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="190.2" y="1011.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="193.2" y="1022.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="190.2" y="995.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="193.2" y="1006.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="979.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="193.2" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="963.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="193.2" y="974.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="947.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.2" y="958.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="193.2" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="915.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="193.2" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="193.2" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="193.2" y="894.0"></text>
</g>
<g>
<title>SymbolTable::add(ClassLoaderData*, constantPoolHandle const&amp;, int, char const**, int*, int*, unsigned int*, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="193.2" y="878.0"></text>
</g>
<g>
<title>SymbolTable::do_add_if_needed(char const*, int, unsigned long, bool, Thread*) (1 samples, 0.04%)</title><rect x="190.2" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="193.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withClassIntrospector (3 samples, 0.11%)</title><rect x="190.6" y="1171.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.&lt;init&gt; (3 samples, 0.11%)</title><rect x="190.6" y="1155.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="193.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/ConfigOverrides.&lt;init&gt; (2 samples, 0.07%)</title><rect x="191.9" y="1171.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/ConfigOverrides.&lt;init&gt; (1 samples, 0.04%)</title><rect x="191.9" y="1155.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="194.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="192.3" y="1155.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="192.3" y="1139.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.3" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="192.3" y="1123.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="195.3" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="192.3" y="1107.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="192.3" y="1091.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="195.3" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.04%)</title><rect x="192.3" y="1075.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.3" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getResource (1 samples, 0.04%)</title><rect x="192.3" y="1059.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="192.8" y="1171.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.&lt;clinit&gt; (1 samples, 0.04%)</title><rect x="192.8" y="1155.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.8" y="1166.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="192.8" y="1139.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="192.8" y="1123.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.8" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="192.8" y="1107.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.8" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="192.8" y="1091.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.8" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="192.8" y="1075.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.8" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="192.8" y="1059.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.8" y="1070.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="192.8" y="1043.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.8" y="1054.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.getProtectionDomain (1 samples, 0.04%)</title><rect x="192.8" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (1 samples, 0.04%)</title><rect x="192.8" y="1011.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.&lt;clinit&gt; (2 samples, 0.07%)</title><rect x="193.2" y="1171.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/NumberSerializers.addAll (1 samples, 0.04%)</title><rect x="193.2" y="1155.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="193.2" y="1139.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.2" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="193.2" y="1123.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="196.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="193.2" y="1107.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="196.2" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="193.2" y="1091.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.2" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="193.2" y="1075.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.2" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="193.2" y="1059.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.2" y="1070.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="193.2" y="1043.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="193.2" y="1027.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="193.2" y="1011.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.2" y="1022.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="193.2" y="995.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="196.2" y="1006.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="193.2" y="979.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="196.2" y="990.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="193.2" y="963.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="196.2" y="974.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="193.2" y="947.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="196.2" y="958.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="193.2" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="196.2" y="942.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="193.2" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="196.2" y="926.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="193.2" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="196.2" y="910.0"></text>
</g>
<g>
<title>ClassFileParser::parse_methods(ClassFileStream const*, bool, AccessFlags*, bool*, bool*, Thread*) (1 samples, 0.04%)</title><rect x="193.2" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="196.2" y="894.0"></text>
</g>
<g>
<title>ClassFileParser::parse_method(ClassFileStream const*, bool, ConstantPool const*, AccessFlags*, Thread*) (1 samples, 0.04%)</title><rect x="193.2" y="867.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="196.2" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="193.2" y="851.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="196.2" y="862.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="193.2" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="196.2" y="846.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="193.2" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="196.2" y="830.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="193.2" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="196.2" y="814.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="193.2" y="787.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="196.2" y="798.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="193.2" y="771.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="196.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.all (1 samples, 0.04%)</title><rect x="193.6" y="1155.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="193.6" y="1139.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.6" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="193.6" y="1123.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.6" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="193.6" y="1107.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.6" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="193.6" y="1091.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.6" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="193.6" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.6" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="193.6" y="1059.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="196.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassInModuleOrNull (1 samples, 0.04%)</title><rect x="193.6" y="1043.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.6" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="193.6" y="1027.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="196.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/module/SystemModuleFinders$SystemModuleReader.read (1 samples, 0.04%)</title><rect x="193.6" y="1011.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/module/SystemModuleFinders$SystemModuleReader.findImageLocation (1 samples, 0.04%)</title><rect x="193.6" y="995.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.6" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReader.findLocation (1 samples, 0.04%)</title><rect x="193.6" y="979.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.6" y="990.0"></text>
</g>
<g>
<title>jdk/internal/jimage/BasicImageReader.findLocation (1 samples, 0.04%)</title><rect x="193.6" y="963.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="196.6" y="974.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageLocation.verify (1 samples, 0.04%)</title><rect x="193.6" y="947.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.6" y="958.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageLocation.verifyName (1 samples, 0.04%)</title><rect x="193.6" y="931.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.6" y="942.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageStringsReader.get (1 samples, 0.04%)</title><rect x="193.6" y="915.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.6" y="926.0"></text>
</g>
<g>
<title>jdk/internal/jimage/BasicImageReader.getString (1 samples, 0.04%)</title><rect x="193.6" y="899.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.6" y="910.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageStringsReader.stringFromByteBuffer (1 samples, 0.04%)</title><rect x="193.6" y="883.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageStringsReader.charsFromByteBufferLength (1 samples, 0.04%)</title><rect x="193.6" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.6" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.04%)</title><rect x="193.6" y="851.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.04%)</title><rect x="193.6" y="835.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.04%)</title><rect x="193.6" y="819.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.6" y="830.0"></text>
</g>
<g>
<title>Unsafe_GetByte(JNIEnv_*, _jobject*, _jobject*, long) (1 samples, 0.04%)</title><rect x="193.6" y="803.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="196.6" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="193.6" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="196.6" y="798.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="193.6" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="196.6" y="782.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="193.6" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.6" y="766.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="193.6" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="196.6" y="750.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.04%)</title><rect x="193.6" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="196.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/RootNameLookup.&lt;init&gt; (3 samples, 0.11%)</title><rect x="194.1" y="1171.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="194.9" y="1155.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.9" y="1166.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.07%)</title><rect x="195.3" y="1171.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="198.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (4 samples, 0.15%)</title><rect x="196.2" y="1171.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (4 samples, 0.15%)</title><rect x="196.2" y="1155.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.2" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (4 samples, 0.15%)</title><rect x="196.2" y="1139.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.2" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (4 samples, 0.15%)</title><rect x="196.2" y="1123.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (4 samples, 0.15%)</title><rect x="196.2" y="1107.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.2" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (4 samples, 0.15%)</title><rect x="196.2" y="1091.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.2" y="1102.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (2 samples, 0.07%)</title><rect x="196.2" y="1075.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (2 samples, 0.07%)</title><rect x="196.2" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (2 samples, 0.07%)</title><rect x="196.2" y="1043.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.07%)</title><rect x="196.2" y="1027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.2" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.07%)</title><rect x="196.2" y="1011.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.2" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.07%)</title><rect x="196.2" y="995.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.2" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.07%)</title><rect x="196.2" y="979.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.07%)</title><rect x="196.2" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (2 samples, 0.07%)</title><rect x="196.2" y="947.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (2 samples, 0.07%)</title><rect x="196.2" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.2" y="942.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (2 samples, 0.07%)</title><rect x="196.2" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.2" y="926.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInflaterInputStream.fill (2 samples, 0.07%)</title><rect x="196.2" y="899.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.2" y="910.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInputStream.read (2 samples, 0.07%)</title><rect x="196.2" y="883.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.2" y="894.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.readAt (2 samples, 0.07%)</title><rect x="196.2" y="867.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.2" y="878.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.read (2 samples, 0.07%)</title><rect x="196.2" y="851.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.2" y="862.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.readBytes (2 samples, 0.07%)</title><rect x="196.2" y="835.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.2" y="846.0"></text>
</g>
<g>
<title>readBytes (2 samples, 0.07%)</title><rect x="196.2" y="819.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="199.2" y="830.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.07%)</title><rect x="196.2" y="803.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="199.2" y="814.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (2 samples, 0.07%)</title><rect x="197.1" y="1075.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="200.1" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="197.1" y="1059.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.1" y="1070.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.04%)</title><rect x="197.5" y="1059.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.5" y="1070.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.04%)</title><rect x="197.5" y="1043.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.5" y="1054.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInputStream.read (1 samples, 0.04%)</title><rect x="197.5" y="1027.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.5" y="1038.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.readAt (1 samples, 0.04%)</title><rect x="197.5" y="1011.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.5" y="1022.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.read (1 samples, 0.04%)</title><rect x="197.5" y="995.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="200.5" y="1006.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.readBytes (1 samples, 0.04%)</title><rect x="197.5" y="979.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.5" y="990.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.04%)</title><rect x="197.5" y="963.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="200.5" y="974.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.04%)</title><rect x="197.5" y="947.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="200.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="197.9" y="1171.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.9" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.15%)</title><rect x="198.4" y="1171.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="201.4" y="1182.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.04%)</title><rect x="198.4" y="1155.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="201.4" y="1166.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (3 samples, 0.11%)</title><rect x="198.8" y="1155.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="201.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ExtensionsKt.registerKotlinModule (69 samples, 2.51%)</title><rect x="200.1" y="1203.0" width="29.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.1" y="1214.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.registerModule (66 samples, 2.41%)</title><rect x="200.1" y="1187.0" width="28.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.1" y="1198.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/module/SimpleModule.getTypeId (1 samples, 0.04%)</title><rect x="202.2" y="1171.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/module/SimpleModule.version (1 samples, 0.04%)</title><rect x="202.7" y="1171.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinModule.setupModule (54 samples, 1.97%)</title><rect x="203.1" y="1171.0" width="23.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.1" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.addDeserializers (2 samples, 0.07%)</title><rect x="204.4" y="1155.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.withAdditionalDeserializers (2 samples, 0.07%)</title><rect x="204.4" y="1139.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.withAdditionalDeserializers (2 samples, 0.07%)</title><rect x="204.4" y="1123.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.4" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.04%)</title><rect x="204.4" y="1107.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="207.4" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="204.4" y="1091.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="207.4" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="204.4" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="207.4" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.04%)</title><rect x="204.4" y="1059.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="207.4" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.04%)</title><rect x="204.4" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="207.4" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokespecial(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.04%)</title><rect x="204.4" y="1027.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="207.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ArrayBuilders.insertInListNoDup (1 samples, 0.04%)</title><rect x="204.8" y="1107.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (1 samples, 0.04%)</title><rect x="204.8" y="1091.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.addSerializers (5 samples, 0.18%)</title><rect x="205.2" y="1155.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BasicSerializerFactory.withAdditionalSerializers (4 samples, 0.15%)</title><rect x="205.7" y="1139.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.withAdditionalSerializers (3 samples, 0.11%)</title><rect x="205.7" y="1123.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.&lt;init&gt; (1 samples, 0.04%)</title><rect x="205.7" y="1107.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ArrayBuilders.insertInListNoDup (2 samples, 0.07%)</title><rect x="206.1" y="1107.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializerFactory.withConfig (1 samples, 0.04%)</title><rect x="207.0" y="1123.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.addValueInstantiators (6 samples, 0.22%)</title><rect x="207.4" y="1155.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.withValueInstantiators (5 samples, 0.18%)</title><rect x="207.8" y="1139.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.withValueInstantiators (4 samples, 0.15%)</title><rect x="208.2" y="1123.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.&lt;init&gt; (1 samples, 0.04%)</title><rect x="208.7" y="1107.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/ArrayBuilders.insertInListNoDup (2 samples, 0.07%)</title><rect x="209.1" y="1107.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (1 samples, 0.04%)</title><rect x="209.5" y="1091.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (1 samples, 0.04%)</title><rect x="209.5" y="1075.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.5" y="1086.0"></text>
</g>
<g>
<title>Reflection::reflect_new_array(oopDesc*, int, Thread*) (1 samples, 0.04%)</title><rect x="209.5" y="1059.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="212.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.appendAnnotationIntrospector (6 samples, 0.22%)</title><rect x="210.0" y="1155.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="213.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.withAppendedAnnotationIntrospector (5 samples, 0.18%)</title><rect x="210.4" y="1139.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig._withBase (2 samples, 0.07%)</title><rect x="210.4" y="1123.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig._withBase (2 samples, 0.07%)</title><rect x="210.4" y="1107.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.&lt;init&gt; (1 samples, 0.04%)</title><rect x="210.8" y="1091.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.&lt;init&gt; (1 samples, 0.04%)</title><rect x="210.8" y="1075.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withAppendedAnnotationIntrospector (3 samples, 0.11%)</title><rect x="211.3" y="1123.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withAnnotationIntrospector (2 samples, 0.07%)</title><rect x="211.3" y="1107.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.&lt;init&gt; (2 samples, 0.07%)</title><rect x="211.3" y="1091.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.create (1 samples, 0.04%)</title><rect x="212.1" y="1107.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.&lt;init&gt; (1 samples, 0.04%)</title><rect x="212.1" y="1091.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/AnnotationIntrospector.&lt;init&gt; (1 samples, 0.04%)</title><rect x="212.1" y="1075.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="212.1" y="1059.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.insertAnnotationIntrospector (15 samples, 0.55%)</title><rect x="212.5" y="1155.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.withInsertedAnnotationIntrospector (8 samples, 0.29%)</title><rect x="215.6" y="1139.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig._withBase (4 samples, 0.15%)</title><rect x="216.0" y="1123.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig._withBase (4 samples, 0.15%)</title><rect x="216.0" y="1107.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/SerializationConfig.&lt;init&gt; (2 samples, 0.07%)</title><rect x="216.8" y="1091.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfigBase.&lt;init&gt; (2 samples, 0.07%)</title><rect x="216.8" y="1075.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withInsertedAnnotationIntrospector (3 samples, 0.11%)</title><rect x="217.7" y="1123.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.withAnnotationIntrospector (2 samples, 0.07%)</title><rect x="217.7" y="1107.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/BaseSettings.&lt;init&gt; (2 samples, 0.07%)</title><rect x="217.7" y="1091.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.create (1 samples, 0.04%)</title><rect x="218.6" y="1107.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.isEnabled (2 samples, 0.07%)</title><rect x="219.0" y="1155.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.isEnabled (2 samples, 0.07%)</title><rect x="219.0" y="1139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/cfg/MapperConfig.isEnabled (2 samples, 0.07%)</title><rect x="219.0" y="1123.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/MapperFeature.enabledIn (2 samples, 0.07%)</title><rect x="219.0" y="1107.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/module/SimpleModule.setupModule (1 samples, 0.04%)</title><rect x="219.9" y="1155.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinModule$setupModule$1.invoke (8 samples, 0.29%)</title><rect x="220.3" y="1155.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper$1.setMixInAnnotations (7 samples, 0.26%)</title><rect x="220.3" y="1139.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.addMixIn (7 samples, 0.26%)</title><rect x="220.3" y="1123.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.addLocalDefinition (7 samples, 0.26%)</title><rect x="220.3" y="1107.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/ClassKey.&lt;init&gt; (1 samples, 0.04%)</title><rect x="221.6" y="1091.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="221.6" y="1075.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.04%)</title><rect x="221.6" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.11%)</title><rect x="222.0" y="1091.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.11%)</title><rect x="222.0" y="1075.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.04%)</title><rect x="222.0" y="1059.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.07%)</title><rect x="222.4" y="1059.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="225.4" y="1070.0"></text>
</g>
<g>
<title>kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (1 samples, 0.04%)</title><rect x="223.3" y="1139.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinNamesAnnotationIntrospector.&lt;init&gt; (1 samples, 0.04%)</title><rect x="223.7" y="1155.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ReflectionCache.&lt;init&gt; (4 samples, 0.15%)</title><rect x="224.2" y="1155.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.&lt;init&gt; (4 samples, 0.15%)</title><rect x="224.2" y="1139.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="225.9" y="1155.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.9" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="225.9" y="1139.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.9" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="225.9" y="1123.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.9" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="225.9" y="1107.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.9" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="225.9" y="1091.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.9" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="225.9" y="1075.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.9" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.04%)</title><rect x="225.9" y="1059.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.9" y="1070.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.04%)</title><rect x="225.9" y="1043.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.9" y="1054.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.04%)</title><rect x="225.9" y="1027.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.9" y="1038.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (1 samples, 0.04%)</title><rect x="225.9" y="1011.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.9" y="1022.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (1 samples, 0.04%)</title><rect x="225.9" y="995.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="228.9" y="1006.0"></text>
</g>
<g>
<title>doInflate (1 samples, 0.04%)</title><rect x="225.9" y="979.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="228.9" y="990.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.04%)</title><rect x="225.9" y="963.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="228.9" y="974.0"></text>
</g>
<g>
<title>zError (1 samples, 0.04%)</title><rect x="225.9" y="947.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="228.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.07%)</title><rect x="226.3" y="1171.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.3" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.07%)</title><rect x="226.3" y="1155.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.07%)</title><rect x="226.3" y="1139.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="229.3" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (1 samples, 0.04%)</title><rect x="226.3" y="1123.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.3" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.04%)</title><rect x="226.7" y="1123.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.7" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (3 samples, 0.11%)</title><rect x="227.2" y="1171.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.2" y="1182.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.07%)</title><rect x="227.6" y="1155.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.6" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (2 samples, 0.07%)</title><rect x="227.6" y="1139.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.04%)</title><rect x="228.0" y="1123.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinModule.&lt;init&gt; (2 samples, 0.07%)</title><rect x="228.5" y="1187.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/KotlinModule.&lt;init&gt; (2 samples, 0.07%)</title><rect x="228.5" y="1171.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="1187.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.3" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="1171.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.3" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="1155.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="229.3" y="1139.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.3" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="229.3" y="1123.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.3" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="1107.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.3" y="1118.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="1091.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="1075.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="229.3" y="1059.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="1043.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.3" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="1027.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="1011.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="229.3" y="995.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="229.3" y="979.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="963.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.3" y="974.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="947.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="931.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="229.3" y="915.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="899.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.3" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="229.3" y="867.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="229.3" y="851.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.3" y="862.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="229.3" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="819.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.3" y="830.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="803.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.3" y="787.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="229.3" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.3" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="229.3" y="755.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="232.3" y="766.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="229.3" y="739.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="232.3" y="750.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="229.3" y="723.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="232.3" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="229.3" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="232.3" y="718.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="229.3" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="232.3" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::create_instance_klass(bool, Thread*) (1 samples, 0.04%)</title><rect x="229.3" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="232.3" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::fill_instance_klass(InstanceKlass*, bool, Thread*) (1 samples, 0.04%)</title><rect x="229.3" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="232.3" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::set_package(ClassLoaderData*, Thread*) (1 samples, 0.04%)</title><rect x="229.3" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="232.3" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::package_from_name(Symbol const*, Thread*) (1 samples, 0.04%)</title><rect x="229.3" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="232.3" y="638.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.04%)</title><rect x="229.3" y="611.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="232.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (6 samples, 0.22%)</title><rect x="229.7" y="1203.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.7" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (6 samples, 0.22%)</title><rect x="229.7" y="1187.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.7" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (6 samples, 0.22%)</title><rect x="229.7" y="1171.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.7" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (6 samples, 0.22%)</title><rect x="229.7" y="1155.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.7" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (6 samples, 0.22%)</title><rect x="229.7" y="1139.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.7" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (5 samples, 0.18%)</title><rect x="229.7" y="1123.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.7" y="1134.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.7" y="1107.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.04%)</title><rect x="229.7" y="1091.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.04%)</title><rect x="229.7" y="1075.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.7" y="1086.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.04%)</title><rect x="229.7" y="1059.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="232.7" y="1070.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.04%)</title><rect x="229.7" y="1043.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="232.7" y="1054.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="1027.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="232.7" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="1011.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="232.7" y="1022.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="995.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="232.7" y="1006.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="232.7" y="990.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="232.7" y="974.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="232.7" y="958.0"></text>
</g>
<g>
<title>ConstantPool::allocate_resolved_klasses(ClassLoaderData*, int, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="931.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="232.7" y="942.0"></text>
</g>
<g>
<title>Array&lt;Klass*&gt;* MetadataFactory::new_array&lt;Klass*&gt;(ClassLoaderData*, int, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="915.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="232.7" y="926.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.04%)</title><rect x="229.7" y="899.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="232.7" y="910.0"></text>
</g>
<g>
<title>metaspace::SpaceManager::allocate_work(unsigned long) (1 samples, 0.04%)</title><rect x="229.7" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="232.7" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (3 samples, 0.11%)</title><rect x="230.2" y="1107.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.2" y="1118.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (2 samples, 0.07%)</title><rect x="230.2" y="1091.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.2" y="1102.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (2 samples, 0.07%)</title><rect x="230.2" y="1075.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.2" y="1086.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (2 samples, 0.07%)</title><rect x="230.2" y="1059.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.2" y="1070.0"></text>
</g>
<g>
<title>Java_java_util_zip_Inflater_inflateBytesBytes (2 samples, 0.07%)</title><rect x="230.2" y="1043.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="233.2" y="1054.0"></text>
</g>
<g>
<title>doInflate (1 samples, 0.04%)</title><rect x="230.2" y="1027.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="233.2" y="1038.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.04%)</title><rect x="230.2" y="1011.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="233.2" y="1022.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.04%)</title><rect x="230.6" y="1027.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="233.6" y="1038.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInflaterInputStream.close (1 samples, 0.04%)</title><rect x="231.0" y="1091.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.0" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/ref/PhantomCleanable.clean (1 samples, 0.04%)</title><rect x="231.0" y="1075.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.0" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/ref/PhantomCleanable.remove (1 samples, 0.04%)</title><rect x="231.0" y="1059.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.0" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader$2.getManifest (1 samples, 0.04%)</title><rect x="231.5" y="1107.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.5" y="1118.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getManifest (1 samples, 0.04%)</title><rect x="231.5" y="1091.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.5" y="1102.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getManifestFromReference (1 samples, 0.04%)</title><rect x="231.5" y="1075.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="1086.0"></text>
</g>
<g>
<title>java/util/jar/Manifest.&lt;init&gt; (1 samples, 0.04%)</title><rect x="231.5" y="1059.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.5" y="1070.0"></text>
</g>
<g>
<title>java/util/jar/Manifest.&lt;init&gt; (1 samples, 0.04%)</title><rect x="231.5" y="1043.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.5" y="1054.0"></text>
</g>
<g>
<title>java/util/jar/Manifest.read (1 samples, 0.04%)</title><rect x="231.5" y="1027.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.5" y="1038.0"></text>
</g>
<g>
<title>java/util/jar/Attributes.read (1 samples, 0.04%)</title><rect x="231.5" y="1011.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (1 samples, 0.04%)</title><rect x="231.5" y="995.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.5" y="1006.0"></text>
</g>
<g>
<title>acs_CopyRight (1 samples, 0.04%)</title><rect x="231.5" y="979.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="234.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.04%)</title><rect x="231.9" y="1123.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.9" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.getResource (1 samples, 0.04%)</title><rect x="231.9" y="1107.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.9" y="1118.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.04%)</title><rect x="231.9" y="1091.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="234.9" y="1102.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.04%)</title><rect x="231.9" y="1075.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.9" y="1086.0"></text>
</g>
<g>
<title>sun/net/www/protocol/file/Handler.parseURL (1 samples, 0.04%)</title><rect x="231.9" y="1059.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.9" y="1070.0"></text>
</g>
<g>
<title>java/net/URLStreamHandler.parseURL (1 samples, 0.04%)</title><rect x="231.9" y="1043.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/kotlin/ExtensionsKt.registerKotlinModule (1 samples, 0.04%)</title><rect x="232.3" y="1219.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.3" y="1230.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1,349 samples, 49.16%)</title><rect x="232.8" y="1219.0" width="580.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.8" y="1230.0">java/io/FileOutputStream.write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1,348 samples, 49.13%)</title><rect x="233.2" y="1203.0" width="579.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.2" y="1214.0">java/io/FileOutputStream.writeBytes</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1,337 samples, 48.72%)</title><rect x="237.9" y="1187.0" width="575.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="240.9" y="1198.0">Java_java_io_FileOutputStream_writeBytes</text>
</g>
<g>
<title>handleWrite (1 samples, 0.04%)</title><rect x="238.3" y="1171.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="241.3" y="1182.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (4 samples, 0.15%)</title><rect x="238.8" y="1171.0" width="1.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="241.8" y="1182.0"></text>
</g>
<g>
<title>jni_GetArrayLength (3 samples, 0.11%)</title><rect x="240.5" y="1171.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="243.5" y="1182.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="241.8" y="1171.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="244.8" y="1182.0"></text>
</g>
<g>
<title>writeBytes (1,327 samples, 48.36%)</title><rect x="242.2" y="1171.0" width="570.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="245.2" y="1182.0">writeBytes</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.07%)</title><rect x="246.1" y="1155.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="249.1" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 802934ull&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.04%)</title><rect x="246.9" y="1155.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="249.9" y="1166.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.07%)</title><rect x="247.4" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="250.4" y="1166.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="248.2" y="1155.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="251.2" y="1166.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.07%)</title><rect x="248.7" y="1155.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="251.7" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="249.5" y="1155.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="252.5" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="250.0" y="1155.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="253.0" y="1166.0"></text>
</g>
<g>
<title>__cxx_global_var_init (4 samples, 0.15%)</title><rect x="250.4" y="1155.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="253.4" y="1166.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.07%)</title><rect x="252.1" y="1155.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="255.1" y="1166.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="253.0" y="1155.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="256.0" y="1166.0"></text>
</g>
<g>
<title>handleWrite (6 samples, 0.22%)</title><rect x="253.4" y="1155.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="256.4" y="1166.0"></text>
</g>
<g>
<title>jni_ExceptionOccurred (9 samples, 0.33%)</title><rect x="256.0" y="1155.0" width="3.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="259.0" y="1166.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="256.4" y="1139.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="259.4" y="1150.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="256.8" y="1139.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="259.8" y="1150.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="257.3" y="1139.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="260.3" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.18%)</title><rect x="257.7" y="1139.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="260.7" y="1150.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.07%)</title><rect x="257.7" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="260.7" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.11%)</title><rect x="258.6" y="1123.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="261.6" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.07%)</title><rect x="259.0" y="1107.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="262.0" y="1118.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.07%)</title><rect x="259.0" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="262.0" y="1102.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.07%)</title><rect x="259.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="262.0" y="1086.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.04%)</title><rect x="259.0" y="1059.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="262.0" y="1070.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="259.4" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="262.4" y="1070.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="259.4" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="262.4" y="1054.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="259.4" y="1027.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="262.4" y="1038.0"></text>
</g>
<g>
<title>jni_GetArrayLength (13 samples, 0.47%)</title><rect x="259.8" y="1155.0" width="5.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="262.8" y="1166.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.07%)</title><rect x="261.1" y="1139.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="264.1" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7 samples, 0.26%)</title><rect x="262.0" y="1139.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="265.0" y="1150.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.04%)</title><rect x="262.0" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="265.0" y="1134.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.15%)</title><rect x="262.4" y="1123.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="265.4" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.07%)</title><rect x="264.1" y="1123.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="267.1" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.07%)</title><rect x="264.1" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="267.1" y="1118.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.07%)</title><rect x="264.1" y="1091.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="267.1" y="1102.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.07%)</title><rect x="264.1" y="1075.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="267.1" y="1086.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.07%)</title><rect x="264.1" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="267.1" y="1070.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.04%)</title><rect x="265.0" y="1139.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="268.0" y="1150.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.29%)</title><rect x="265.4" y="1155.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="268.4" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.15%)</title><rect x="267.2" y="1139.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="270.2" y="1150.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="267.2" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="270.2" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.04%)</title><rect x="267.6" y="1123.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="270.6" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.07%)</title><rect x="268.0" y="1123.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="271.0" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.07%)</title><rect x="268.0" y="1107.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="271.0" y="1118.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="268.4" y="1091.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="271.4" y="1102.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="268.4" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="271.4" y="1086.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="268.4" y="1059.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="271.4" y="1070.0"></text>
</g>
<g>
<title>jni_GetObjectField (36 samples, 1.31%)</title><rect x="268.9" y="1155.0" width="15.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="271.9" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (5 samples, 0.18%)</title><rect x="272.7" y="1139.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="275.7" y="1150.0"></text>
</g>
<g>
<title>G1BarrierSet::AccessBarrier&lt;802934ull, G1BarrierSet&gt;::oop_load_in_heap_at(oopDesc*, long) (3 samples, 0.11%)</title><rect x="274.9" y="1139.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="277.9" y="1150.0"></text>
</g>
<g>
<title>AccessBarrierSupport::resolve_unknown_oop_ref_strength(unsigned long long, oopDesc*, long) (1 samples, 0.04%)</title><rect x="275.3" y="1123.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="278.3" y="1134.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (1 samples, 0.04%)</title><rect x="275.3" y="1107.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="278.3" y="1118.0"></text>
</g>
<g>
<title>CompressedOops::decode(unsigned int) (1 samples, 0.04%)</title><rect x="275.8" y="1123.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="278.8" y="1134.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.04%)</title><rect x="276.2" y="1139.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="279.2" y="1150.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="276.6" y="1139.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="279.6" y="1150.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.11%)</title><rect x="277.0" y="1139.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="280.0" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (11 samples, 0.40%)</title><rect x="278.3" y="1139.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="281.3" y="1150.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.11%)</title><rect x="278.8" y="1123.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="281.8" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.26%)</title><rect x="280.1" y="1123.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="283.1" y="1134.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.26%)</title><rect x="280.1" y="1107.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.1" y="1118.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.26%)</title><rect x="280.1" y="1091.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="283.1" y="1102.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.26%)</title><rect x="280.1" y="1075.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="283.1" y="1086.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="280.1" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="283.1" y="1070.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.07%)</title><rect x="280.5" y="1059.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="283.5" y="1070.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="281.3" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="284.3" y="1070.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.04%)</title><rect x="281.8" y="1059.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="284.8" y="1070.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.07%)</title><rect x="282.2" y="1059.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="285.2" y="1070.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="282.6" y="1043.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="285.6" y="1054.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.04%)</title><rect x="283.1" y="1139.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="286.1" y="1150.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.04%)</title><rect x="283.5" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="286.5" y="1150.0"></text>
</g>
<g>
<title>unsigned long long AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength&lt;802934ull&gt;(oopDesc*, long) (1 samples, 0.04%)</title><rect x="283.9" y="1139.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="286.9" y="1150.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.04%)</title><rect x="284.4" y="1155.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="287.4" y="1166.0"></text>
</g>
<g>
<title>write (1,228 samples, 44.75%)</title><rect x="284.8" y="1155.0" width="528.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="287.8" y="1166.0">write</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.04%)</title><rect x="812.9" y="1219.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="815.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.04%)</title><rect x="813.3" y="1219.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="816.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.04%)</title><rect x="813.3" y="1203.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="816.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.04%)</title><rect x="813.3" y="1187.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="816.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="813.3" y="1171.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.3" y="1182.0"></text>
</g>
<g>
<title>kotlin/jvm/internal/Intrinsics.checkExpressionValueIsNotNull (1 samples, 0.04%)</title><rect x="813.7" y="1219.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.04%)</title><rect x="814.2" y="1251.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="817.2" y="1262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="814.6" y="1251.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="817.6" y="1262.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.mapOf (12 samples, 0.44%)</title><rect x="815.0" y="1251.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.0" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="816.3" y="1235.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.3" y="1246.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.toMap (8 samples, 0.29%)</title><rect x="816.7" y="1235.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="819.7" y="1246.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.putAll (8 samples, 0.29%)</title><rect x="816.7" y="1219.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.7" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.29%)</title><rect x="816.7" y="1203.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="819.7" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="816.7" y="1187.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="819.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.26%)</title><rect x="817.2" y="1187.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="820.2" y="1198.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.04%)</title><rect x="817.6" y="1171.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.6" y="1182.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="817.6" y="1155.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="820.6" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.04%)</title><rect x="817.6" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="820.6" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper_internal(methodHandle, frame const&amp;, CompiledMethod*, bool, bool, Handle, CallInfo&amp;, Bytecodes::Code, Thread*) (1 samples, 0.04%)</title><rect x="817.6" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="820.6" y="1134.0"></text>
</g>
<g>
<title>CompiledIC::set_to_monomorphic(CompiledICInfo&amp;) (1 samples, 0.04%)</title><rect x="817.6" y="1107.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="820.6" y="1118.0"></text>
</g>
<g>
<title>InlineCacheBuffer::create_transition_stub(CompiledIC*, void*, unsigned char*) (1 samples, 0.04%)</title><rect x="817.6" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="820.6" y="1102.0"></text>
</g>
<g>
<title>InlineCacheBuffer::assemble_ic_buffer_code(unsigned char*, void*, unsigned char*) (1 samples, 0.04%)</title><rect x="817.6" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="820.6" y="1086.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.04%)</title><rect x="817.6" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="820.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.07%)</title><rect x="818.0" y="1171.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.0" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (1 samples, 0.04%)</title><rect x="818.9" y="1171.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.9" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (2 samples, 0.07%)</title><rect x="819.3" y="1171.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.3" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (1 samples, 0.04%)</title><rect x="819.7" y="1155.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.7" y="1166.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndCallPremain (3 samples, 0.11%)</title><rect x="820.2" y="1315.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="823.2" y="1326.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndStartAgent (3 samples, 0.11%)</title><rect x="820.2" y="1299.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="823.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.07%)</title><rect x="820.2" y="1283.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.2" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.07%)</title><rect x="820.2" y="1267.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="823.2" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.07%)</title><rect x="820.2" y="1251.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="823.2" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.07%)</title><rect x="820.2" y="1235.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="823.2" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.07%)</title><rect x="820.2" y="1219.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="823.2" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (2 samples, 0.07%)</title><rect x="820.2" y="1203.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="823.2" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getLoader (2 samples, 0.07%)</title><rect x="820.2" y="1187.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.2" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getLoader (2 samples, 0.07%)</title><rect x="820.2" y="1171.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="823.2" y="1182.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.07%)</title><rect x="820.2" y="1155.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.2" y="1166.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (2 samples, 0.07%)</title><rect x="820.2" y="1139.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.2" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$3.run (2 samples, 0.07%)</title><rect x="820.2" y="1123.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.2" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$3.run (2 samples, 0.07%)</title><rect x="820.2" y="1107.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="823.2" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.&lt;init&gt; (2 samples, 0.07%)</title><rect x="820.2" y="1091.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="823.2" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.ensureOpen (2 samples, 0.07%)</title><rect x="820.2" y="1075.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.2" y="1086.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.07%)</title><rect x="820.2" y="1059.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="823.2" y="1070.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (2 samples, 0.07%)</title><rect x="820.2" y="1043.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="823.2" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader$1.run (2 samples, 0.07%)</title><rect x="820.2" y="1027.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="823.2" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader$1.run (2 samples, 0.07%)</title><rect x="820.2" y="1011.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="823.2" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getJarFile (2 samples, 0.07%)</title><rect x="820.2" y="995.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="823.2" y="1006.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.&lt;init&gt; (2 samples, 0.07%)</title><rect x="820.2" y="979.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="823.2" y="990.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.&lt;init&gt; (2 samples, 0.07%)</title><rect x="820.2" y="963.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="823.2" y="974.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.&lt;init&gt; (2 samples, 0.07%)</title><rect x="820.2" y="947.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="823.2" y="958.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$CleanableResource.&lt;init&gt; (2 samples, 0.07%)</title><rect x="820.2" y="931.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="823.2" y="942.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.get (2 samples, 0.07%)</title><rect x="820.2" y="915.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.2" y="926.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.&lt;init&gt; (2 samples, 0.07%)</title><rect x="820.2" y="899.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.2" y="910.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.initCEN (2 samples, 0.07%)</title><rect x="820.2" y="883.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.2" y="894.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.hashN (1 samples, 0.04%)</title><rect x="820.6" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="823.6" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.04%)</title><rect x="821.0" y="1283.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="824.0" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.04%)</title><rect x="821.0" y="1267.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="824.0" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (1 samples, 0.04%)</title><rect x="821.0" y="1251.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.0" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (1 samples, 0.04%)</title><rect x="821.0" y="1235.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.0" y="1246.0"></text>
</g>
<g>
<title>com/intellij/rt/execution/application/AppMainV2$Agent.premain (1 samples, 0.04%)</title><rect x="821.0" y="1219.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.04%)</title><rect x="821.0" y="1203.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="824.0" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.04%)</title><rect x="821.0" y="1187.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.0" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.04%)</title><rect x="821.0" y="1171.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.0" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.04%)</title><rect x="821.0" y="1155.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.04%)</title><rect x="821.0" y="1139.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.0" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.04%)</title><rect x="821.0" y="1123.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="824.0" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.04%)</title><rect x="821.0" y="1107.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="824.0" y="1118.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInputStream.read (1 samples, 0.04%)</title><rect x="821.0" y="1091.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.0" y="1102.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.readAt (1 samples, 0.04%)</title><rect x="821.0" y="1075.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="824.0" y="1086.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.read (1 samples, 0.04%)</title><rect x="821.0" y="1059.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="824.0" y="1070.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.readBytes (1 samples, 0.04%)</title><rect x="821.0" y="1043.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="824.0" y="1054.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.04%)</title><rect x="821.0" y="1027.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="824.0" y="1038.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.04%)</title><rect x="821.0" y="1011.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="824.0" y="1022.0"></text>
</g>
<g>
<title>sun/launcher/LauncherHelper.checkAndLoadMain (2 samples, 0.07%)</title><rect x="821.5" y="1315.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="824.5" y="1326.0"></text>
</g>
<g>
<title>sun/launcher/LauncherHelper.loadMainClass (2 samples, 0.07%)</title><rect x="821.5" y="1299.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Class.forName (2 samples, 0.07%)</title><rect x="821.5" y="1283.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (2 samples, 0.07%)</title><rect x="821.5" y="1267.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.07%)</title><rect x="821.5" y="1251.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.5" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.07%)</title><rect x="821.5" y="1235.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.5" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.07%)</title><rect x="821.5" y="1219.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.5" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.07%)</title><rect x="821.5" y="1203.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="824.5" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.07%)</title><rect x="821.5" y="1187.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.5" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (2 samples, 0.07%)</title><rect x="821.5" y="1171.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="824.5" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getByteBuffer (2 samples, 0.07%)</title><rect x="821.5" y="1155.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.5" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.cachedInputStream (2 samples, 0.07%)</title><rect x="821.5" y="1139.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="824.5" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader$1.getInputStream (2 samples, 0.07%)</title><rect x="821.5" y="1123.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.5" y="1134.0"></text>
</g>
<g>
<title>java/io/FileInputStream.&lt;init&gt; (2 samples, 0.07%)</title><rect x="821.5" y="1107.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="824.5" y="1118.0"></text>
</g>
<g>
<title>java/io/FileInputStream.open (2 samples, 0.07%)</title><rect x="821.5" y="1091.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.5" y="1102.0"></text>
</g>
<g>
<title>java/io/FileInputStream.open0 (2 samples, 0.07%)</title><rect x="821.5" y="1075.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.5" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (2 samples, 0.07%)</title><rect x="821.5" y="1059.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="824.5" y="1070.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.07%)</title><rect x="821.5" y="1043.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="824.5" y="1054.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.07%)</title><rect x="821.5" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="824.5" y="1038.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (2 samples, 0.07%)</title><rect x="821.5" y="1011.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="824.5" y="1022.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (2 samples, 0.07%)</title><rect x="821.5" y="995.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="824.5" y="1006.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.07%)</title><rect x="821.5" y="979.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="824.5" y="990.0"></text>
</g>
<g>
<title>LockHelper::LockHelper() (2 samples, 0.07%)</title><rect x="821.5" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="824.5" y="974.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.07%)</title><rect x="821.5" y="947.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="824.5" y="958.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.07%)</title><rect x="821.5" y="931.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="824.5" y="942.0"></text>
</g>
<g>
<title>thread_start (855 samples, 31.16%)</title><rect x="822.3" y="1315.0" width="367.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="825.3" y="1326.0">thread_start</text>
</g>
<g>
<title>_pthread_start (855 samples, 31.16%)</title><rect x="822.3" y="1299.0" width="367.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="825.3" y="1310.0">_pthread_start</text>
</g>
<g>
<title>JavaMain (1 samples, 0.04%)</title><rect x="822.3" y="1283.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="825.3" y="1294.0"></text>
</g>
<g>
<title>JNI_CreateJavaVM (1 samples, 0.04%)</title><rect x="822.3" y="1267.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="825.3" y="1278.0"></text>
</g>
<g>
<title>Threads::create_vm(JavaVMInitArgs*, bool*) (1 samples, 0.04%)</title><rect x="822.3" y="1251.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="825.3" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_vm_initialized() (1 samples, 0.04%)</title><rect x="822.3" y="1235.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="825.3" y="1246.0"></text>
</g>
<g>
<title>VM::VMInit(_jvmtiEnv*, JNIEnv_*, _jobject*) (1 samples, 0.04%)</title><rect x="822.3" y="1219.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="825.3" y="1230.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.04%)</title><rect x="822.3" y="1203.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.3" y="1214.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.04%)</title><rect x="822.3" y="1187.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="825.3" y="1198.0"></text>
</g>
<g>
<title>Profiler::start(Arguments&amp;, bool) (1 samples, 0.04%)</title><rect x="822.3" y="1171.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="825.3" y="1182.0"></text>
</g>
<g>
<title>WallClock::start(Arguments&amp;) (1 samples, 0.04%)</title><rect x="822.3" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="825.3" y="1166.0"></text>
</g>
<g>
<title>__bsdthread_create (1 samples, 0.04%)</title><rect x="822.3" y="1139.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="825.3" y="1150.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (854 samples, 31.12%)</title><rect x="822.8" y="1283.0" width="367.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="825.8" y="1294.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (854 samples, 31.12%)</title><rect x="822.8" y="1267.0" width="367.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.8" y="1278.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (9 samples, 0.33%)</title><rect x="822.8" y="1251.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.8" y="1262.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (9 samples, 0.33%)</title><rect x="822.8" y="1235.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="825.8" y="1246.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (4 samples, 0.15%)</title><rect x="822.8" y="1219.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.8" y="1230.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.15%)</title><rect x="822.8" y="1203.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.8" y="1214.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.15%)</title><rect x="822.8" y="1187.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="825.8" y="1198.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.07%)</title><rect x="823.6" y="1171.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.6" y="1182.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.04%)</title><rect x="824.0" y="1155.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="827.0" y="1166.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.04%)</title><rect x="824.0" y="1139.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="827.0" y="1150.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.18%)</title><rect x="824.5" y="1219.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="827.5" y="1230.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.18%)</title><rect x="824.5" y="1203.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="827.5" y="1214.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.18%)</title><rect x="824.5" y="1187.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="827.5" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.18%)</title><rect x="824.5" y="1171.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.5" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.18%)</title><rect x="824.5" y="1155.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="827.5" y="1166.0"></text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 0.73%)</title><rect x="826.6" y="1251.0" width="8.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.6" y="1262.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 0.47%)</title><rect x="826.6" y="1235.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="829.6" y="1246.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.33%)</title><rect x="826.6" y="1219.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="829.6" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.07%)</title><rect x="826.6" y="1203.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="829.6" y="1214.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.07%)</title><rect x="826.6" y="1187.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="829.6" y="1198.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.07%)</title><rect x="826.6" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.6" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.07%)</title><rect x="826.6" y="1155.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="829.6" y="1166.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.04%)</title><rect x="827.1" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="830.1" y="1150.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (7 samples, 0.26%)</title><rect x="827.5" y="1203.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="830.5" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.18%)</title><rect x="827.5" y="1187.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="830.5" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.18%)</title><rect x="827.5" y="1171.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.5" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.18%)</title><rect x="827.5" y="1155.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="830.5" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.18%)</title><rect x="827.5" y="1139.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="830.5" y="1150.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.07%)</title><rect x="829.6" y="1187.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="832.6" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="830.5" y="1219.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="833.5" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.04%)</title><rect x="830.5" y="1203.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.5" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.04%)</title><rect x="830.5" y="1187.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.5" y="1198.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.04%)</title><rect x="830.5" y="1171.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.5" y="1182.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.04%)</title><rect x="830.5" y="1155.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="833.5" y="1166.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.04%)</title><rect x="830.5" y="1139.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="833.5" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="830.5" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="833.5" y="1134.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.04%)</title><rect x="830.5" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.5" y="1118.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.04%)</title><rect x="830.5" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="833.5" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.11%)</title><rect x="830.9" y="1219.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="833.9" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.07%)</title><rect x="830.9" y="1203.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="833.9" y="1214.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.04%)</title><rect x="830.9" y="1187.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="833.9" y="1198.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.04%)</title><rect x="830.9" y="1171.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="833.9" y="1182.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (1 samples, 0.04%)</title><rect x="830.9" y="1155.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.9" y="1166.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="830.9" y="1139.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="833.9" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.04%)</title><rect x="830.9" y="1123.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.9" y="1134.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="830.9" y="1107.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="833.9" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="830.9" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="833.9" y="1102.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="830.9" y="1075.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.9" y="1086.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="830.9" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.9" y="1070.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="831.4" y="1187.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.4" y="1198.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="831.4" y="1171.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="834.4" y="1182.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="831.4" y="1155.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="834.4" y="1166.0"></text>
</g>
<g>
<title>frame::oops_code_blob_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) (1 samples, 0.04%)</title><rect x="831.4" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="834.4" y="1150.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.04%)</title><rect x="831.4" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="834.4" y="1134.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.04%)</title><rect x="831.4" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="834.4" y="1118.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.04%)</title><rect x="831.4" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.4" y="1102.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.04%)</title><rect x="831.4" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.4" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.04%)</title><rect x="831.8" y="1203.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="834.8" y="1214.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.04%)</title><rect x="831.8" y="1187.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.8" y="1198.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="831.8" y="1171.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.8" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.04%)</title><rect x="831.8" y="1155.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.8" y="1166.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.04%)</title><rect x="831.8" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="834.8" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.04%)</title><rect x="831.8" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="834.8" y="1134.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate_reverse&lt;unsigned int, G1ScanEvacuatedObjClosure&gt;(oopDesc*, G1ScanEvacuatedObjClosure*) (1 samples, 0.04%)</title><rect x="831.8" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="834.8" y="1118.0"></text>
</g>
<g>
<title>void InstanceRefKlass::oop_oop_iterate_discovery&lt;unsigned int, G1ScanEvacuatedObjClosure, AlwaysContains&gt;(oopDesc*, ReferenceType, G1ScanEvacuatedObjClosure*, AlwaysContains&amp;) (1 samples, 0.04%)</title><rect x="831.8" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.8" y="1102.0"></text>
</g>
<g>
<title>G1STWSubjectToDiscoveryClosure::do_object_b(oopDesc*) (1 samples, 0.04%)</title><rect x="831.8" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.8" y="1086.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (2 samples, 0.07%)</title><rect x="832.2" y="1235.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="835.2" y="1246.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="833.1" y="1235.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="836.1" y="1246.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="833.1" y="1219.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.1" y="1230.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="833.1" y="1203.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="836.1" y="1214.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (4 samples, 0.15%)</title><rect x="833.5" y="1235.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="836.5" y="1246.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (4 samples, 0.15%)</title><rect x="833.5" y="1219.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="836.5" y="1230.0"></text>
</g>
<g>
<title>JavaThread::run() (795 samples, 28.97%)</title><rect x="835.2" y="1251.0" width="341.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="838.2" y="1262.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (795 samples, 28.97%)</title><rect x="835.2" y="1235.0" width="341.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.2" y="1246.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (786 samples, 28.64%)</title><rect x="835.2" y="1219.0" width="338.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="838.2" y="1230.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (773 samples, 28.17%)</title><rect x="835.2" y="1203.0" width="332.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.2" y="1214.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (714 samples, 26.02%)</title><rect x="835.2" y="1187.0" width="307.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.2" y="1198.0">C2Compiler::compile_method(ciEnv*, ciMeth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (714 samples, 26.02%)</title><rect x="835.2" y="1171.0" width="307.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="838.2" y="1182.0">Compile::Compile(ciEnv*, C2Compiler*, ciM..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.04%)</title><rect x="835.2" y="1155.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="838.2" y="1166.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="835.2" y="1139.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.2" y="1150.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="835.2" y="1123.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="838.2" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="835.2" y="1107.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="838.2" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="835.2" y="1091.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="838.2" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="835.2" y="1075.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="838.2" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="835.2" y="1059.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="838.2" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="835.2" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="838.2" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.04%)</title><rect x="835.2" y="1027.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="838.2" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="835.2" y="1011.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="838.2" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="835.2" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="838.2" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="835.2" y="979.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="838.2" y="990.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="835.2" y="963.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.2" y="974.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="835.2" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="838.2" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.04%)</title><rect x="835.2" y="931.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.2" y="942.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.04%)</title><rect x="835.2" y="915.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="838.2" y="926.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (388 samples, 14.14%)</title><rect x="835.7" y="1155.0" width="166.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="838.7" y="1166.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (16 samples, 0.58%)</title><rect x="835.7" y="1139.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.7" y="1150.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (7 samples, 0.26%)</title><rect x="835.7" y="1123.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="838.7" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="837.4" y="1107.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="840.4" y="1118.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.07%)</title><rect x="837.8" y="1107.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="840.8" y="1118.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.07%)</title><rect x="837.8" y="1091.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="840.8" y="1102.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (8 samples, 0.29%)</title><rect x="838.7" y="1123.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="841.7" y="1134.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.04%)</title><rect x="838.7" y="1107.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="841.7" y="1118.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.04%)</title><rect x="838.7" y="1091.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="841.7" y="1102.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="838.7" y="1075.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="841.7" y="1086.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (7 samples, 0.26%)</title><rect x="839.1" y="1107.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="842.1" y="1118.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (5 samples, 0.18%)</title><rect x="839.5" y="1091.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="842.5" y="1102.0"></text>
</g>
<g>
<title>CodeBuffer::CodeBuffer(unsigned char*, int) (1 samples, 0.04%)</title><rect x="839.5" y="1075.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.5" y="1086.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.04%)</title><rect x="840.0" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="843.0" y="1086.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.04%)</title><rect x="840.4" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="843.4" y="1086.0"></text>
</g>
<g>
<title>MachUEPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.04%)</title><rect x="840.8" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="843.8" y="1086.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.04%)</title><rect x="840.8" y="1059.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="843.8" y="1070.0"></text>
</g>
<g>
<title>loadRangeNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.04%)</title><rect x="841.2" y="1075.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.2" y="1086.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.04%)</title><rect x="841.2" y="1059.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="844.2" y="1070.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.04%)</title><rect x="841.7" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="844.7" y="1102.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.04%)</title><rect x="842.1" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="845.1" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.33%)</title><rect x="842.5" y="1139.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="845.5" y="1150.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.04%)</title><rect x="843.0" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="846.0" y="1134.0"></text>
</g>
<g>
<title>MachCallStaticJavaNode::ret_addr_offset() (1 samples, 0.04%)</title><rect x="843.0" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="846.0" y="1118.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.04%)</title><rect x="843.4" y="1123.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.4" y="1134.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (2 samples, 0.07%)</title><rect x="843.8" y="1123.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="846.8" y="1134.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 0.04%)</title><rect x="844.3" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="847.3" y="1118.0"></text>
</g>
<g>
<title>MacroAssembler::MacroAssembler(CodeBuffer*) (1 samples, 0.04%)</title><rect x="844.7" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="847.7" y="1134.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_instruction(Node*, int) (1 samples, 0.04%)</title><rect x="845.1" y="1123.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="848.1" y="1134.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.04%)</title><rect x="845.1" y="1107.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="848.1" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="845.1" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.1" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="845.1" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.1" y="1086.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="845.1" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="848.1" y="1070.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="845.1" y="1043.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="848.1" y="1054.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="845.1" y="1027.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.1" y="1038.0"></text>
</g>
<g>
<title>NonSafepointEmitter::observe_safepoint(JVMState*, int) (2 samples, 0.07%)</title><rect x="845.5" y="1123.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="848.5" y="1134.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.07%)</title><rect x="845.5" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="848.5" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="845.5" y="1091.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="848.5" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="845.5" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="848.5" y="1086.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="845.5" y="1059.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="848.5" y="1070.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="845.5" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.5" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::last_pc() (1 samples, 0.04%)</title><rect x="846.0" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="849.0" y="1102.0"></text>
</g>
<g>
<title>Matcher::match() (44 samples, 1.60%)</title><rect x="846.4" y="1139.0" width="18.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (6 samples, 0.22%)</title><rect x="846.4" y="1123.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="849.4" y="1134.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.04%)</title><rect x="848.1" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="851.1" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.04%)</title><rect x="848.6" y="1107.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="851.6" y="1118.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (38 samples, 1.38%)</title><rect x="849.0" y="1123.0" width="16.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="852.0" y="1134.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (14 samples, 0.51%)</title><rect x="849.8" y="1107.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="852.8" y="1118.0"></text>
</g>
<g>
<title>Compile::check_node_count(unsigned int, char const*) (1 samples, 0.04%)</title><rect x="855.9" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="858.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::MStack::push(Node*, Matcher::Node_State, Node*, int) (2 samples, 0.07%)</title><rect x="856.3" y="1107.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="859.3" y="1118.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.04%)</title><rect x="857.2" y="1107.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="860.2" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (3 samples, 0.11%)</title><rect x="857.6" y="1107.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="860.6" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.07%)</title><rect x="857.6" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="860.6" y="1102.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.04%)</title><rect x="858.0" y="1075.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.0" y="1086.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="858.0" y="1059.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="861.0" y="1070.0"></text>
</g>
<g>
<title>ProjNode::ProjNode(Node*, unsigned int, bool) (1 samples, 0.04%)</title><rect x="858.4" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.4" y="1102.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.04%)</title><rect x="858.4" y="1075.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.18%)</title><rect x="858.9" y="1107.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="861.9" y="1118.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.04%)</title><rect x="859.7" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="862.7" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="859.7" y="1075.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="862.7" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="859.7" y="1059.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="862.7" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="859.7" y="1043.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="862.7" y="1054.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="859.7" y="1027.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.7" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.07%)</title><rect x="860.2" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="863.2" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.04%)</title><rect x="860.2" y="1075.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="863.2" y="1086.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="860.2" y="1059.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="863.2" y="1070.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.04%)</title><rect x="860.6" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.6" y="1086.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.04%)</title><rect x="860.6" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.6" y="1070.0"></text>
</g>
<g>
<title>Node::clone() const (3 samples, 0.11%)</title><rect x="861.0" y="1107.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="864.0" y="1118.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.04%)</title><rect x="861.0" y="1091.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="864.0" y="1102.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (2 samples, 0.07%)</title><rect x="861.5" y="1091.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.5" y="1102.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="861.9" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.9" y="1086.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (7 samples, 0.26%)</title><rect x="862.3" y="1107.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="865.3" y="1118.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.04%)</title><rect x="863.2" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="866.2" y="1102.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.04%)</title><rect x="863.2" y="1075.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="866.2" y="1086.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.04%)</title><rect x="863.2" y="1059.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="866.2" y="1070.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="863.6" y="1091.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.6" y="1102.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (3 samples, 0.11%)</title><rect x="864.0" y="1091.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="867.0" y="1102.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="864.9" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="867.9" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.07%)</title><rect x="865.3" y="1139.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.3" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (2 samples, 0.07%)</title><rect x="865.3" y="1123.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="868.3" y="1134.0"></text>
</g>
<g>
<title>_qsort (2 samples, 0.07%)</title><rect x="865.3" y="1107.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="868.3" y="1118.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.04%)</title><rect x="865.3" y="1091.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="868.3" y="1102.0"></text>
</g>
<g>
<title>_qsort (1 samples, 0.04%)</title><rect x="865.3" y="1075.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="868.3" y="1086.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.04%)</title><rect x="865.3" y="1059.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="868.3" y="1070.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.04%)</title><rect x="865.8" y="1091.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="868.8" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (3 samples, 0.11%)</title><rect x="866.2" y="1139.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="869.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (3 samples, 0.11%)</title><rect x="866.2" y="1123.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="869.2" y="1134.0"></text>
</g>
<g>
<title>Block::Block(Arena*, Node*) (1 samples, 0.04%)</title><rect x="866.2" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.2" y="1118.0"></text>
</g>
<g>
<title>Block_Array::Block_Array(Arena*) (1 samples, 0.04%)</title><rect x="866.2" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="869.2" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="866.2" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="869.2" y="1086.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.07%)</title><rect x="866.6" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="869.6" y="1118.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (2 samples, 0.07%)</title><rect x="866.6" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="869.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (31 samples, 1.13%)</title><rect x="867.5" y="1139.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.5" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (31 samples, 1.13%)</title><rect x="867.5" y="1123.0" width="13.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="870.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.11%)</title><rect x="867.5" y="1107.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="870.5" y="1118.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.04%)</title><rect x="867.9" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="870.9" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.04%)</title><rect x="868.3" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="871.3" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.29%)</title><rect x="868.8" y="1107.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="871.8" y="1118.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.11%)</title><rect x="868.8" y="1091.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="871.8" y="1102.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.04%)</title><rect x="869.6" y="1075.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="872.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (4 samples, 0.15%)</title><rect x="870.1" y="1091.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.1" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::at_grow(int, unsigned int const&amp;) (2 samples, 0.07%)</title><rect x="870.9" y="1075.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="873.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.04%)</title><rect x="871.8" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="874.8" y="1102.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.04%)</title><rect x="871.8" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="874.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (4 samples, 0.15%)</title><rect x="872.2" y="1107.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.2" y="1118.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.04%)</title><rect x="872.6" y="1091.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="875.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.04%)</title><rect x="873.1" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.04%)</title><rect x="873.5" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.04%)</title><rect x="873.5" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.15%)</title><rect x="873.9" y="1107.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="876.9" y="1118.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="875.2" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="878.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (4 samples, 0.15%)</title><rect x="875.6" y="1107.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="878.6" y="1118.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="875.6" y="1091.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="878.6" y="1102.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="875.6" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.6" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.11%)</title><rect x="876.1" y="1091.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="879.1" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.22%)</title><rect x="877.4" y="1107.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.4" y="1118.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="878.2" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="881.2" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.07%)</title><rect x="878.7" y="1091.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="881.7" y="1102.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="878.7" y="1075.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="881.7" y="1086.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="878.7" y="1059.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="881.7" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.04%)</title><rect x="879.1" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.1" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="879.1" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="882.1" y="1070.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="879.1" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="882.1" y="1054.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.04%)</title><rect x="879.1" y="1027.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.1" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="879.5" y="1091.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.5" y="1102.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="879.5" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.5" y="1086.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="879.9" y="1107.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.9" y="1118.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="879.9" y="1091.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.9" y="1102.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.04%)</title><rect x="880.4" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="883.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (283 samples, 10.31%)</title><rect x="880.8" y="1139.0" width="121.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="883.8" y="1150.0">PhaseChaitin::R..</text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="880.8" y="1123.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="883.8" y="1134.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.04%)</title><rect x="881.2" y="1123.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="884.2" y="1134.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.04%)</title><rect x="881.7" y="1123.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="884.7" y="1134.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (10 samples, 0.36%)</title><rect x="882.1" y="1123.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="885.1" y="1134.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.04%)</title><rect x="885.5" y="1107.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="888.5" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="886.0" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.0" y="1118.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.04%)</title><rect x="886.0" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (16 samples, 0.58%)</title><rect x="886.4" y="1123.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.4" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="887.3" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.3" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="887.7" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="890.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.04%)</title><rect x="888.1" y="1107.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (8 samples, 0.29%)</title><rect x="888.5" y="1107.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.5" y="1118.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (5 samples, 0.18%)</title><rect x="888.5" y="1091.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.5" y="1102.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="890.3" y="1075.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="893.3" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.04%)</title><rect x="890.7" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.7" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="891.1" y="1091.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.1" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="891.6" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.6" y="1102.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (2 samples, 0.07%)</title><rect x="892.0" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.0" y="1118.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.04%)</title><rect x="892.8" y="1107.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="895.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.29%)</title><rect x="893.3" y="1123.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.07%)</title><rect x="894.6" y="1107.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="897.6" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="895.4" y="1107.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="898.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.07%)</title><rect x="895.9" y="1107.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="898.9" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.04%)</title><rect x="896.3" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="899.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (32 samples, 1.17%)</title><rect x="896.7" y="1123.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="899.7" y="1134.0"></text>
</g>
<g>
<title>LiveRangeMap::find(Node const*) (1 samples, 0.04%)</title><rect x="907.0" y="1107.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.0" y="1118.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.04%)</title><rect x="907.5" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="910.5" y="1118.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="907.5" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="910.5" y="1102.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.04%)</title><rect x="907.9" y="1107.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="910.9" y="1118.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.04%)</title><rect x="908.3" y="1107.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.3" y="1118.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.04%)</title><rect x="908.8" y="1107.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="911.8" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="909.2" y="1107.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="912.2" y="1118.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="909.2" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.2" y="1102.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.04%)</title><rect x="909.2" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.2" y="1086.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="909.2" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.2" y="1070.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="909.2" y="1043.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="912.2" y="1054.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="909.2" y="1027.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="912.2" y="1038.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="909.2" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="912.2" y="1022.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="909.2" y="995.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="912.2" y="1006.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="909.2" y="979.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="912.2" y="990.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="909.2" y="963.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="912.2" y="974.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (2 samples, 0.07%)</title><rect x="909.6" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="912.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (66 samples, 2.41%)</title><rect x="910.5" y="1123.0" width="28.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.5" y="1134.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.11%)</title><rect x="913.9" y="1107.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="916.9" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.07%)</title><rect x="915.2" y="1107.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.2" y="1118.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.04%)</title><rect x="916.1" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="919.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (7 samples, 0.26%)</title><rect x="916.5" y="1107.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="919.5" y="1118.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (2 samples, 0.07%)</title><rect x="917.8" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="920.8" y="1102.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.04%)</title><rect x="918.7" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="921.7" y="1102.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="918.7" y="1075.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="921.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.04%)</title><rect x="919.1" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.1" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="919.1" y="1075.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) (5 samples, 0.18%)</title><rect x="919.5" y="1107.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.5" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="920.4" y="1091.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="923.4" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.07%)</title><rect x="920.8" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.8" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.04%)</title><rect x="921.2" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.2" y="1086.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="921.2" y="1059.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="924.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (24 samples, 0.87%)</title><rect x="921.7" y="1107.0" width="10.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="924.7" y="1118.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (4 samples, 0.15%)</title><rect x="922.5" y="1091.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.5" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.15%)</title><rect x="924.2" y="1091.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="927.2" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.07%)</title><rect x="926.0" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="929.0" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (11 samples, 0.40%)</title><rect x="926.8" y="1091.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="929.8" y="1102.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="931.6" y="1091.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="934.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (13 samples, 0.47%)</title><rect x="932.0" y="1107.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="935.0" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="932.4" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="935.4" y="1102.0"></text>
</g>
<g>
<title>RegMask::SUBTRACT(RegMask const&amp;) (3 samples, 0.11%)</title><rect x="932.8" y="1091.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.8" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (5 samples, 0.18%)</title><rect x="934.1" y="1091.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.1" y="1102.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.11%)</title><rect x="936.3" y="1091.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.3" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.04%)</title><rect x="937.6" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.6" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_NotEmpty() const (1 samples, 0.04%)</title><rect x="938.0" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.0" y="1118.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="938.4" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.4" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (5 samples, 0.18%)</title><rect x="938.9" y="1123.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.9" y="1134.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.04%)</title><rect x="939.3" y="1107.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="939.7" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.07%)</title><rect x="940.2" y="1107.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.2" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="940.2" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="943.2" y="1102.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.04%)</title><rect x="940.6" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="943.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.04%)</title><rect x="941.0" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (32 samples, 1.17%)</title><rect x="941.4" y="1123.0" width="13.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="944.4" y="1134.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.04%)</title><rect x="948.8" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="951.8" y="1118.0"></text>
</g>
<g>
<title>MachSafePointNode::in_RegMask(unsigned int) const (1 samples, 0.04%)</title><rect x="949.2" y="1107.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.2" y="1118.0"></text>
</g>
<g>
<title>SafePointNode::needs_polling_address_input() (1 samples, 0.04%)</title><rect x="949.2" y="1091.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.2" y="1102.0"></text>
</g>
<g>
<title>RegMask::AND(RegMask const&amp;) (3 samples, 0.11%)</title><rect x="949.6" y="1107.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="952.6" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.04%)</title><rect x="950.9" y="1107.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="953.9" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.07%)</title><rect x="951.3" y="1107.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="954.3" y="1118.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (2 samples, 0.07%)</title><rect x="951.3" y="1091.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="954.3" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (4 samples, 0.15%)</title><rect x="952.2" y="1107.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="955.2" y="1118.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="953.1" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="956.1" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.04%)</title><rect x="953.5" y="1091.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.5" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="953.9" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.9" y="1118.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="953.9" y="1091.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="956.9" y="1102.0"></text>
</g>
<g>
<title>indOffset8Oper::in_RegMask(int) const (1 samples, 0.04%)</title><rect x="954.3" y="1107.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.3" y="1118.0"></text>
</g>
<g>
<title>tlsLoadPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="954.8" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="957.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (7 samples, 0.26%)</title><rect x="955.2" y="1123.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (36 samples, 1.31%)</title><rect x="958.2" y="1123.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="961.2" y="1134.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="963.8" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.8" y="1118.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="963.8" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.8" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="963.8" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="966.8" y="1086.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="963.8" y="1059.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.8" y="1070.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="963.8" y="1043.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="966.8" y="1054.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="963.8" y="1027.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="966.8" y="1038.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.04%)</title><rect x="963.8" y="1011.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="966.8" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (20 samples, 0.73%)</title><rect x="964.2" y="1107.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.2" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (2 samples, 0.07%)</title><rect x="972.0" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.0" y="1102.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (2 samples, 0.07%)</title><rect x="972.0" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.0" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.07%)</title><rect x="972.0" y="1059.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="975.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.04%)</title><rect x="972.8" y="1107.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="975.8" y="1118.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.04%)</title><rect x="973.3" y="1107.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (12 samples, 0.44%)</title><rect x="973.7" y="1123.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="976.7" y="1134.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.04%)</title><rect x="973.7" y="1107.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.7" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (11 samples, 0.40%)</title><rect x="974.1" y="1107.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="977.1" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (11 samples, 0.40%)</title><rect x="974.1" y="1091.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.1" y="1102.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (6 samples, 0.22%)</title><rect x="974.1" y="1075.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="977.1" y="1086.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.07%)</title><rect x="974.1" y="1059.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.1" y="1070.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (4 samples, 0.15%)</title><rect x="975.0" y="1059.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.0" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.15%)</title><rect x="976.7" y="1075.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.7" y="1086.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (3 samples, 0.11%)</title><rect x="976.7" y="1059.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="978.0" y="1059.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.04%)</title><rect x="978.4" y="1075.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="981.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (6 samples, 0.22%)</title><rect x="978.9" y="1123.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="981.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (6 samples, 0.22%)</title><rect x="978.9" y="1107.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.9" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.04%)</title><rect x="979.7" y="1091.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.7" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.11%)</title><rect x="980.1" y="1091.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="983.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (12 samples, 0.44%)</title><rect x="981.4" y="1123.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.4" y="1134.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.07%)</title><rect x="982.7" y="1107.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.7" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.15%)</title><rect x="983.6" y="1107.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.6" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (3 samples, 0.11%)</title><rect x="985.3" y="1107.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (9 samples, 0.33%)</title><rect x="986.6" y="1123.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.6" y="1134.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.04%)</title><rect x="987.5" y="1107.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.5" y="1118.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (6 samples, 0.22%)</title><rect x="987.9" y="1107.0" width="2.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="990.9" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (24 samples, 0.87%)</title><rect x="990.5" y="1123.0" width="10.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.5" y="1134.0"></text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.04%)</title><rect x="996.1" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.1" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (9 samples, 0.33%)</title><rect x="996.5" y="1107.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.5" y="1118.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.04%)</title><rect x="997.8" y="1091.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.8" y="1102.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.07%)</title><rect x="998.2" y="1091.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.2" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.07%)</title><rect x="999.1" y="1091.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.1" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.04%)</title><rect x="999.9" y="1091.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1002.9" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.04%)</title><rect x="1000.4" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.4" y="1118.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1000.8" y="1123.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1003.8" y="1134.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1000.8" y="1107.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1003.8" y="1118.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1000.8" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.8" y="1102.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.04%)</title><rect x="1000.8" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.8" y="1086.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.04%)</title><rect x="1000.8" y="1059.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1003.8" y="1070.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.04%)</title><rect x="1000.8" y="1043.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1003.8" y="1054.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.04%)</title><rect x="1001.2" y="1123.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.2" y="1134.0"></text>
</g>
<g>
<title>loadPNode::ideal_Opcode() const (1 samples, 0.04%)</title><rect x="1001.6" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.6" y="1134.0"></text>
</g>
<g>
<title>loadPNode::oper_input_base() const (1 samples, 0.04%)</title><rect x="1002.1" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.1" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (261 samples, 9.51%)</title><rect x="1002.5" y="1155.0" width="112.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1005.5" y="1166.0">Compile::Optim..</text>
</g>
<g>
<title>BoolTest::cc2logical(Type const*) const (1 samples, 0.04%)</title><rect x="1002.5" y="1139.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.5" y="1150.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (5 samples, 0.18%)</title><rect x="1002.9" y="1139.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.9" y="1150.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (5 samples, 0.18%)</title><rect x="1002.9" y="1123.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.9" y="1134.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.04%)</title><rect x="1004.2" y="1107.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.2" y="1118.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.04%)</title><rect x="1004.7" y="1107.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.7" y="1118.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&amp;, unsigned int) (1 samples, 0.04%)</title><rect x="1004.7" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.7" y="1102.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.04%)</title><rect x="1004.7" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.7" y="1086.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (98 samples, 3.57%)</title><rect x="1005.1" y="1139.0" width="42.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1008.1" y="1150.0">Comp..</text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.04%)</title><rect x="1005.1" y="1123.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.1" y="1134.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1005.1" y="1107.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.1" y="1118.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1005.1" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1008.1" y="1102.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1005.1" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.1" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1005.1" y="1059.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (97 samples, 3.53%)</title><rect x="1005.5" y="1123.0" width="41.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1008.5" y="1134.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (3 samples, 0.11%)</title><rect x="1005.5" y="1107.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.5" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.07%)</title><rect x="1005.5" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.5" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.07%)</title><rect x="1005.5" y="1075.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.5" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.07%)</title><rect x="1005.5" y="1059.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1008.5" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1005.5" y="1043.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.5" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1005.5" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.5" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1005.5" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.5" y="1022.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1005.5" y="995.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.5" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1005.5" y="979.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1008.5" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1005.5" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.5" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.04%)</title><rect x="1005.5" y="947.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="1005.5" y="931.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1005.5" y="915.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.5" y="926.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.04%)</title><rect x="1005.5" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.5" y="910.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::at_grow(int, float const&amp;) (1 samples, 0.04%)</title><rect x="1005.5" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.5" y="894.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.04%)</title><rect x="1005.5" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="1005.9" y="1043.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1005.9" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.04%)</title><rect x="1006.4" y="1091.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.04%)</title><rect x="1006.4" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.4" y="1086.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.04%)</title><rect x="1006.4" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1009.4" y="1070.0"></text>
</g>
<g>
<title>Invariance::compute_invariance(Node*) (1 samples, 0.04%)</title><rect x="1006.4" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1009.4" y="1054.0"></text>
</g>
<g>
<title>Invariance::visit(Node*, Node*) (1 samples, 0.04%)</title><rect x="1006.4" y="1027.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.4" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::is_invariant(Node*) const (1 samples, 0.04%)</title><rect x="1006.4" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1006.4" y="995.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1006.4" y="979.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.4" y="990.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1006.4" y="963.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.4" y="974.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1006.8" y="1107.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.8" y="1118.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1006.8" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.8" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1006.8" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.8" y="1086.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1006.8" y="1059.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.8" y="1070.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.04%)</title><rect x="1006.8" y="1043.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.8" y="1054.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.04%)</title><rect x="1006.8" y="1027.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.8" y="1038.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="1006.8" y="1011.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1009.8" y="1022.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="1006.8" y="995.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1009.8" y="1006.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="1006.8" y="979.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1009.8" y="990.0"></text>
</g>
<g>
<title>large_malloc (1 samples, 0.04%)</title><rect x="1006.8" y="963.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1009.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (10 samples, 0.36%)</title><rect x="1007.2" y="1107.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.2" y="1118.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.07%)</title><rect x="1008.1" y="1091.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1008.5" y="1075.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1011.5" y="1086.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1008.5" y="1059.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.5" y="1070.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (4 samples, 0.15%)</title><rect x="1009.0" y="1091.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1010.7" y="1091.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.7" y="1102.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1010.7" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.7" y="1086.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1011.1" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.1" y="1102.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1011.1" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1014.1" y="1086.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1011.1" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1014.1" y="1070.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.04%)</title><rect x="1011.1" y="1043.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1014.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.29%)</title><rect x="1011.5" y="1107.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1013.3" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.3" y="1102.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1013.3" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1013.7" y="1091.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1013.7" y="1075.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.07%)</title><rect x="1014.1" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1017.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1014.5" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (46 samples, 1.68%)</title><rect x="1015.0" y="1107.0" width="19.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1018.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (45 samples, 1.64%)</title><rect x="1015.0" y="1091.0" width="19.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1015.4" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (36 samples, 1.31%)</title><rect x="1015.8" y="1075.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1018.8" y="1086.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1016.3" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1019.3" y="1070.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1016.3" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1019.3" y="1054.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1016.3" y="1027.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1019.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.11%)</title><rect x="1016.7" y="1059.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1019.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (2 samples, 0.07%)</title><rect x="1016.7" y="1043.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.07%)</title><rect x="1016.7" y="1027.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.07%)</title><rect x="1016.7" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1019.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.07%)</title><rect x="1016.7" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1019.7" y="1006.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1017.1" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1017.6" y="1043.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1018.0" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1018.0" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1018.4" y="1059.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1018.4" y="1043.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.4" y="1054.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1018.4" y="1027.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (29 samples, 1.06%)</title><rect x="1018.8" y="1059.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.07%)</title><rect x="1019.3" y="1043.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (26 samples, 0.95%)</title><rect x="1020.1" y="1043.0" width="11.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1023.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (24 samples, 0.87%)</title><rect x="1021.0" y="1027.0" width="10.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.0" y="1038.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (23 samples, 0.84%)</title><rect x="1021.4" y="1011.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (4 samples, 0.15%)</title><rect x="1031.3" y="1075.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.3" y="1086.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (4 samples, 0.15%)</title><rect x="1031.3" y="1059.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (2 samples, 0.07%)</title><rect x="1033.0" y="1075.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.07%)</title><rect x="1033.0" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.0" y="1070.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1033.5" y="1043.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.5" y="1054.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1033.9" y="1075.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1036.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1034.3" y="1091.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.18%)</title><rect x="1034.8" y="1107.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.8" y="1118.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.04%)</title><rect x="1036.0" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.04%)</title><rect x="1036.5" y="1091.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1036.5" y="1075.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.5" y="1086.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1036.5" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (15 samples, 0.55%)</title><rect x="1036.9" y="1107.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1039.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (4 samples, 0.15%)</title><rect x="1038.2" y="1091.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1041.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1038.2" y="1075.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.2" y="1086.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1038.2" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.07%)</title><rect x="1038.6" y="1059.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.6" y="1070.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1038.6" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1039.1" y="1043.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.1" y="1054.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1039.1" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1039.5" y="1075.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1039.5" y="1059.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.5" y="1070.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1039.5" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (8 samples, 0.29%)</title><rect x="1039.9" y="1091.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1042.9" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.04%)</title><rect x="1039.9" y="1075.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (5 samples, 0.18%)</title><rect x="1040.3" y="1075.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1040.3" y="1059.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1043.3" y="1070.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1040.3" y="1043.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1043.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.07%)</title><rect x="1040.8" y="1043.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1043.8" y="1054.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1040.8" y="1027.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1043.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1041.2" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1044.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1041.6" y="1059.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1042.1" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.1" y="1070.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1042.1" y="1043.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.07%)</title><rect x="1042.5" y="1075.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.07%)</title><rect x="1042.5" y="1059.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1045.5" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.04%)</title><rect x="1042.9" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1045.9" y="1054.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.04%)</title><rect x="1042.9" y="1027.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.9" y="1038.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.04%)</title><rect x="1042.9" y="1011.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.33%)</title><rect x="1043.4" y="1107.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1046.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.33%)</title><rect x="1043.4" y="1091.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.4" y="1102.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1043.4" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1046.4" y="1086.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1043.4" y="1059.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.4" y="1070.0"></text>
</g>
<g>
<title>BarrierSetC2::igvn_add_users_to_worklist(PhaseIterGVN*, Node*) const (1 samples, 0.04%)</title><rect x="1043.8" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1046.8" y="1086.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1044.2" y="1075.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1047.2" y="1086.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1044.2" y="1059.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.2" y="1070.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1044.2" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.2" y="1054.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1044.7" y="1075.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.7" y="1086.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1044.7" y="1059.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.7" y="1070.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.04%)</title><rect x="1044.7" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.7" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1044.7" y="1027.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.7" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1044.7" y="1011.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.7" y="1022.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.04%)</title><rect x="1044.7" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.7" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (3 samples, 0.11%)</title><rect x="1045.1" y="1075.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.1" y="1086.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.04%)</title><rect x="1045.1" y="1059.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.1" y="1070.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.04%)</title><rect x="1045.5" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.5" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.04%)</title><rect x="1045.5" y="1043.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.5" y="1054.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.04%)</title><rect x="1045.9" y="1059.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1046.4" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1046.4" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.4" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_opaque4_node(Node*) (1 samples, 0.04%)</title><rect x="1046.4" y="1043.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.4" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1046.8" y="1075.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.8" y="1086.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1046.8" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.8" y="1070.0"></text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) (1 samples, 0.04%)</title><rect x="1047.2" y="1139.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.2" y="1150.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.04%)</title><rect x="1047.2" y="1123.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.2" y="1134.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.04%)</title><rect x="1047.2" y="1107.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1050.2" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="1047.2" y="1091.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.2" y="1102.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="1047.2" y="1075.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1050.2" y="1086.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (8 samples, 0.29%)</title><rect x="1047.7" y="1139.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.11%)</title><rect x="1049.4" y="1123.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.11%)</title><rect x="1049.4" y="1107.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.4" y="1118.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1049.4" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.4" y="1102.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1049.4" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1052.4" y="1086.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.04%)</title><rect x="1049.4" y="1059.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1052.4" y="1070.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1049.4" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1052.4" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1049.4" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.4" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1049.4" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.4" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1049.4" y="995.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.4" y="1006.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1049.8" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.8" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1049.8" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.8" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1049.8" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1052.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1050.2" y="1091.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.2" y="1102.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1050.2" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.2" y="1086.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="1050.2" y="1059.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.2" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1050.7" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1053.7" y="1134.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.04%)</title><rect x="1050.7" y="1107.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.26%)</title><rect x="1051.1" y="1139.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1054.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.26%)</title><rect x="1051.1" y="1123.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (3 samples, 0.11%)</title><rect x="1051.5" y="1107.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (2 samples, 0.07%)</title><rect x="1051.5" y="1091.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::add_base(FieldNode*, PointsToNode*) (1 samples, 0.04%)</title><rect x="1051.5" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.5" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.04%)</title><rect x="1051.5" y="1059.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.5" y="1070.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append_if_missing(PointsToNode* const&amp;) (1 samples, 0.04%)</title><rect x="1052.0" y="1075.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.4" y="1091.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (2 samples, 0.07%)</title><rect x="1052.8" y="1107.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.07%)</title><rect x="1052.8" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.07%)</title><rect x="1052.8" y="1075.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.07%)</title><rect x="1052.8" y="1059.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.07%)</title><rect x="1052.8" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.07%)</title><rect x="1052.8" y="1027.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="1011.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="979.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="963.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="947.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1055.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="931.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="915.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="899.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="851.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="835.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="819.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="739.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.8" y="750.0"></text>
</g>
<g>
<title>GrowableArray&lt;PhiNode*&gt;::append_if_missing(PhiNode* const&amp;) (1 samples, 0.04%)</title><rect x="1052.8" y="723.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1055.8" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1053.3" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1056.3" y="1022.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.04%)</title><rect x="1053.3" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.3" y="1006.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1053.7" y="1107.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.7" y="1118.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.04%)</title><rect x="1053.7" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.7" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (9 samples, 0.33%)</title><rect x="1054.1" y="1139.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.1" y="1150.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1055.8" y="1123.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1058.8" y="1134.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1056.3" y="1123.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.3" y="1134.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.04%)</title><rect x="1056.3" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.3" y="1118.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1056.3" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.3" y="1102.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.04%)</title><rect x="1056.3" y="1075.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1059.3" y="1086.0"></text>
</g>
<g>
<title>TypeAry::cleanup_speculative() const (1 samples, 0.04%)</title><rect x="1056.3" y="1059.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.3" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1056.3" y="1043.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1059.3" y="1054.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1056.7" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.7" y="1134.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1057.1" y="1123.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.1" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.04%)</title><rect x="1057.6" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.04%)</title><rect x="1058.0" y="1139.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.0" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.04%)</title><rect x="1058.0" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (81 samples, 2.95%)</title><rect x="1058.4" y="1139.0" width="34.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.4" y="1150.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::set_nest(unsigned int) (1 samples, 0.04%)</title><rect x="1058.4" y="1123.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.4" y="1134.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.04%)</title><rect x="1058.8" y="1123.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.22%)</title><rect x="1059.3" y="1123.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.3" y="1134.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.04%)</title><rect x="1061.4" y="1107.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1064.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 0.47%)</title><rect x="1061.9" y="1123.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1064.9" y="1107.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1064.9" y="1091.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.11%)</title><rect x="1064.9" y="1075.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.9" y="1086.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1064.9" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (2 samples, 0.07%)</title><rect x="1065.3" y="1059.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.3" y="1070.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1065.3" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1065.7" y="1043.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.7" y="1054.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.04%)</title><rect x="1066.2" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.2" y="1118.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.07%)</title><rect x="1066.6" y="1107.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (40 samples, 1.46%)</title><rect x="1067.4" y="1123.0" width="17.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.4" y="1134.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.07%)</title><rect x="1068.7" y="1107.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.7" y="1118.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1068.7" y="1091.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.7" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1068.7" y="1075.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.7" y="1086.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1068.7" y="1059.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.7" y="1070.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.04%)</title><rect x="1068.7" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.7" y="1054.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.04%)</title><rect x="1068.7" y="1027.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1071.7" y="1038.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="1068.7" y="1011.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1071.7" y="1022.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="1068.7" y="995.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1071.7" y="1006.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="1068.7" y="979.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1071.7" y="990.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1069.2" y="1091.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1072.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.04%)</title><rect x="1069.6" y="1107.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (34 samples, 1.24%)</title><rect x="1070.0" y="1107.0" width="14.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1070.5" y="1091.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1070.5" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1070.5" y="1059.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.5" y="1070.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1070.5" y="1043.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (28 samples, 1.02%)</title><rect x="1070.9" y="1091.0" width="12.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.9" y="1102.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (2 samples, 0.07%)</title><rect x="1071.3" y="1075.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.3" y="1086.0"></text>
</g>
<g>
<title>_platform_strcmp (1 samples, 0.04%)</title><rect x="1071.7" y="1059.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1074.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.04%)</title><rect x="1072.2" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1072.2" y="1059.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.04%)</title><rect x="1072.2" y="1043.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1075.2" y="1054.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1072.2" y="1027.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (3 samples, 0.11%)</title><rect x="1072.6" y="1075.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1073.5" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.04%)</title><rect x="1073.5" y="1043.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1073.5" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.5" y="1038.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1073.5" y="1011.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.04%)</title><rect x="1073.9" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.04%)</title><rect x="1073.9" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (20 samples, 0.73%)</title><rect x="1074.3" y="1075.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.15%)</title><rect x="1074.3" y="1059.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (14 samples, 0.51%)</title><rect x="1076.0" y="1059.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (14 samples, 0.51%)</title><rect x="1076.0" y="1043.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.0" y="1054.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (9 samples, 0.33%)</title><rect x="1078.2" y="1027.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (2 samples, 0.07%)</title><rect x="1082.1" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.11%)</title><rect x="1082.9" y="1091.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1085.9" y="1102.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (2 samples, 0.07%)</title><rect x="1083.4" y="1075.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.04%)</title><rect x="1084.2" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.04%)</title><rect x="1084.2" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.2" y="1086.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.04%)</title><rect x="1084.2" y="1059.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.07%)</title><rect x="1084.6" y="1123.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.04%)</title><rect x="1085.1" y="1107.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.04%)</title><rect x="1085.5" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (11 samples, 0.40%)</title><rect x="1085.9" y="1123.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.07%)</title><rect x="1085.9" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (2 samples, 0.07%)</title><rect x="1085.9" y="1091.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1088.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (2 samples, 0.07%)</title><rect x="1085.9" y="1075.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.9" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1085.9" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.9" y="1070.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.04%)</title><rect x="1085.9" y="1043.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.9" y="1054.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.04%)</title><rect x="1086.4" y="1059.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 0.07%)</title><rect x="1086.8" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1086.8" y="1091.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1087.2" y="1091.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1087.2" y="1075.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.2" y="1086.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1087.2" y="1059.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.2" y="1070.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1087.2" y="1043.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.2" y="1054.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1087.2" y="1027.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1090.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (7 samples, 0.26%)</title><rect x="1087.7" y="1107.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.04%)</title><rect x="1088.1" y="1091.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (4 samples, 0.15%)</title><rect x="1088.5" y="1091.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (4 samples, 0.15%)</title><rect x="1088.5" y="1075.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1091.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (4 samples, 0.15%)</title><rect x="1088.5" y="1059.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (2 samples, 0.07%)</title><rect x="1089.4" y="1043.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1090.2" y="1091.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1090.2" y="1075.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1090.2" y="1059.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.2" y="1070.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1090.2" y="1043.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.15%)</title><rect x="1090.7" y="1123.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.15%)</title><rect x="1090.7" y="1107.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.7" y="1118.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1090.7" y="1091.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.7" y="1102.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1090.7" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.7" y="1086.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1090.7" y="1059.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.7" y="1070.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.04%)</title><rect x="1090.7" y="1043.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.7" y="1054.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.04%)</title><rect x="1090.7" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.7" y="1038.0"></text>
</g>
<g>
<title>CompilerThread::env() (1 samples, 0.04%)</title><rect x="1090.7" y="1011.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.7" y="1022.0"></text>
</g>
<g>
<title>SafePointScalarObjectNode::hash() const (1 samples, 0.04%)</title><rect x="1091.1" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.1" y="1070.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1091.5" y="1091.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.5" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1091.5" y="1075.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="1091.5" y="1059.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1091.5" y="1043.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1091.5" y="1027.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.5" y="1038.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1092.0" y="1091.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.0" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1092.0" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1092.4" y="1123.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.4" y="1134.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1092.4" y="1107.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.4" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1092.4" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.4" y="1102.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.04%)</title><rect x="1092.4" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.4" y="1086.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1092.8" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.8" y="1134.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1092.8" y="1107.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.8" y="1118.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1092.8" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.8" y="1102.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.04%)</title><rect x="1092.8" y="1075.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1095.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (39 samples, 1.42%)</title><rect x="1093.2" y="1139.0" width="16.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.2" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1093.2" y="1123.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.2" y="1134.0"></text>
</g>
<g>
<title>Node_List::size() const (1 samples, 0.04%)</title><rect x="1093.7" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (36 samples, 1.31%)</title><rect x="1094.1" y="1123.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.1" y="1134.0"></text>
</g>
<g>
<title>BarrierSetC2::has_load_barriers() const (1 samples, 0.04%)</title><rect x="1094.5" y="1107.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.5" y="1118.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (3 samples, 0.11%)</title><rect x="1095.0" y="1107.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.0" y="1118.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (3 samples, 0.11%)</title><rect x="1095.0" y="1091.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.0" y="1102.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.04%)</title><rect x="1095.0" y="1075.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.0" y="1086.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1095.0" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.0" y="1070.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="1095.0" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.0" y="1054.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1095.4" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1095.8" y="1075.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1095.8" y="1059.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1095.8" y="1043.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.8" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.04%)</title><rect x="1095.8" y="1027.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.8" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1096.3" y="1107.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.3" y="1118.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1096.3" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.3" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1096.3" y="1075.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.3" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1096.3" y="1059.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.3" y="1070.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1096.7" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.7" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1096.7" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.7" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1096.7" y="1059.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.7" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1097.1" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.1" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1097.5" y="1091.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.5" y="1102.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.04%)</title><rect x="1097.5" y="1075.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.5" y="1086.0"></text>
</g>
<g>
<title>MulNode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1098.0" y="1107.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.0" y="1118.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1098.0" y="1091.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.0" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1098.0" y="1075.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.0" y="1086.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1098.0" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.0" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.04%)</title><rect x="1098.4" y="1107.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.4" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (6 samples, 0.22%)</title><rect x="1098.8" y="1107.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.8" y="1118.0"></text>
</g>
<g>
<title>NodeHash::grow() (3 samples, 0.11%)</title><rect x="1099.3" y="1091.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.3" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (3 samples, 0.11%)</title><rect x="1099.3" y="1075.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.3" y="1086.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.04%)</title><rect x="1100.1" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.1" y="1070.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.04%)</title><rect x="1100.6" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.6" y="1102.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.04%)</title><rect x="1100.6" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.6" y="1086.0"></text>
</g>
<g>
<title>TypeOopPtr::hash() const (1 samples, 0.04%)</title><rect x="1100.6" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.6" y="1070.0"></text>
</g>
<g>
<title>TypeNode::cmp(Node const&amp;) const (1 samples, 0.04%)</title><rect x="1101.0" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.07%)</title><rect x="1101.4" y="1107.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.04%)</title><rect x="1101.8" y="1091.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1102.3" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1102.3" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.3" y="1102.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.04%)</title><rect x="1102.3" y="1075.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.3" y="1086.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.11%)</title><rect x="1102.7" y="1107.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.7" y="1118.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.07%)</title><rect x="1103.1" y="1091.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.1" y="1102.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.04%)</title><rect x="1103.6" y="1075.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.6" y="1086.0"></text>
</g>
<g>
<title>RangeCheckNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1104.0" y="1107.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.0" y="1118.0"></text>
</g>
<g>
<title>IfNode::dominated_by(Node*, PhaseIterGVN*) (1 samples, 0.04%)</title><rect x="1104.0" y="1091.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.04%)</title><rect x="1104.0" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.0" y="1086.0"></text>
</g>
<g>
<title>VectorSet::operator[](unsigned int) const (1 samples, 0.04%)</title><rect x="1104.0" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.0" y="1070.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1104.4" y="1107.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.4" y="1118.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.04%)</title><rect x="1104.4" y="1091.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.4" y="1102.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.04%)</title><rect x="1104.4" y="1075.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.4" y="1086.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1104.9" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.9" y="1102.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.04%)</title><rect x="1104.9" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.9" y="1086.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.04%)</title><rect x="1104.9" y="1059.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1107.9" y="1070.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (10 samples, 0.36%)</title><rect x="1105.3" y="1107.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.3" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (9 samples, 0.33%)</title><rect x="1105.3" y="1091.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.3" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (9 samples, 0.33%)</title><rect x="1105.3" y="1075.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.3" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (9 samples, 0.33%)</title><rect x="1105.3" y="1059.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.3" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (9 samples, 0.33%)</title><rect x="1105.3" y="1043.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.3" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (7 samples, 0.26%)</title><rect x="1105.3" y="1027.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.3" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (7 samples, 0.26%)</title><rect x="1105.3" y="1011.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.3" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (7 samples, 0.26%)</title><rect x="1105.3" y="995.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.3" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.22%)</title><rect x="1105.3" y="979.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.3" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.22%)</title><rect x="1105.3" y="963.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.3" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.18%)</title><rect x="1105.3" y="947.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.3" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.18%)</title><rect x="1105.3" y="931.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.3" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.18%)</title><rect x="1105.3" y="915.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.3" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.18%)</title><rect x="1105.3" y="899.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.3" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.18%)</title><rect x="1105.3" y="883.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.3" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.18%)</title><rect x="1105.3" y="867.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.3" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.18%)</title><rect x="1105.3" y="851.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.3" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.15%)</title><rect x="1105.3" y="835.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.3" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.15%)</title><rect x="1105.3" y="819.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.3" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.15%)</title><rect x="1105.3" y="803.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.3" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.07%)</title><rect x="1105.3" y="787.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.3" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.07%)</title><rect x="1105.3" y="771.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.3" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.07%)</title><rect x="1105.3" y="755.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.3" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.07%)</title><rect x="1105.3" y="739.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.3" y="750.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1105.7" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="734.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1105.7" y="707.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1108.7" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.07%)</title><rect x="1106.1" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1106.1" y="771.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.1" y="782.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.04%)</title><rect x="1106.6" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.6" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1107.0" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.0" y="846.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.04%)</title><rect x="1107.0" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.0" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1107.4" y="947.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.4" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1107.4" y="931.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.4" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1107.9" y="979.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1110.9" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1107.9" y="963.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.9" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.07%)</title><rect x="1108.3" y="1027.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.3" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1108.3" y="1011.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.3" y="1022.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.04%)</title><rect x="1108.7" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.7" y="1022.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1109.2" y="1091.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.2" y="1102.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1109.2" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.2" y="1086.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.04%)</title><rect x="1109.2" y="1059.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.2" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::pop() (1 samples, 0.04%)</title><rect x="1109.6" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.6" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (3 samples, 0.11%)</title><rect x="1110.0" y="1139.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.0" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (3 samples, 0.11%)</title><rect x="1110.0" y="1123.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.0" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.04%)</title><rect x="1110.0" y="1107.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1110.0" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.04%)</title><rect x="1110.0" y="1075.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.0" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.07%)</title><rect x="1110.4" y="1107.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.4" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*) (1 samples, 0.04%)</title><rect x="1110.4" y="1091.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.4" y="1102.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.04%)</title><rect x="1110.4" y="1075.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1113.4" y="1086.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.04%)</title><rect x="1110.4" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.4" y="1070.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.04%)</title><rect x="1110.4" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.4" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.04%)</title><rect x="1110.4" y="1027.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.4" y="1038.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1110.4" y="1011.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1113.4" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1110.9" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.9" y="1102.0"></text>
</g>
<g>
<title>ciInstanceKlass::unique_concrete_subklass() (1 samples, 0.04%)</title><rect x="1110.9" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1113.9" y="1086.0"></text>
</g>
<g>
<title>Klass::up_cast_abstract() (1 samples, 0.04%)</title><rect x="1110.9" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.9" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (5 samples, 0.18%)</title><rect x="1111.3" y="1139.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.18%)</title><rect x="1111.3" y="1123.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.18%)</title><rect x="1111.3" y="1107.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.3" y="1118.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.07%)</title><rect x="1111.3" y="1091.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.3" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1111.7" y="1075.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.7" y="1086.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1111.7" y="1059.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="1070.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1111.7" y="1043.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.7" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1112.2" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.2" y="1102.0"></text>
</g>
<g>
<title>LoadNode::find_previous_arraycopy(PhaseTransform*, Node*, Node*&amp;, bool) const (1 samples, 0.04%)</title><rect x="1112.2" y="1075.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.2" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1112.6" y="1091.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.6" y="1102.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.04%)</title><rect x="1113.0" y="1091.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.0" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1113.0" y="1075.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.0" y="1086.0"></text>
</g>
<g>
<title>TypeLong::hash() const (1 samples, 0.04%)</title><rect x="1113.0" y="1059.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.0" y="1070.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.07%)</title><rect x="1113.5" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.5" y="1150.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.07%)</title><rect x="1113.5" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.5" y="1134.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.07%)</title><rect x="1113.5" y="1107.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.5" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (2 samples, 0.07%)</title><rect x="1113.5" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.5" y="1102.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (2 samples, 0.07%)</title><rect x="1113.5" y="1075.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.5" y="1086.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1114.3" y="1139.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.3" y="1150.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.04%)</title><rect x="1114.3" y="1123.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.3" y="1134.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.04%)</title><rect x="1114.3" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.3" y="1118.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.04%)</title><rect x="1114.3" y="1091.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1117.3" y="1102.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.04%)</title><rect x="1114.3" y="1075.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1117.3" y="1086.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.04%)</title><rect x="1114.3" y="1059.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1117.3" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1114.7" y="1155.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (58 samples, 2.11%)</title><rect x="1115.2" y="1155.0" width="24.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.2" y="1166.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (58 samples, 2.11%)</title><rect x="1115.2" y="1139.0" width="24.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.2" y="1150.0">P..</text>
</g>
<g>
<title>Dependencies::assert_common_1(Dependencies::DepType, ciBaseObject*) (1 samples, 0.04%)</title><rect x="1115.2" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.2" y="1134.0"></text>
</g>
<g>
<title>Dependencies::note_dep_seen(int, ciBaseObject*) (1 samples, 0.04%)</title><rect x="1115.2" y="1107.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.2" y="1118.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::at_grow(int, int const&amp;) (1 samples, 0.04%)</title><rect x="1115.2" y="1091.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (57 samples, 2.08%)</title><rect x="1115.6" y="1123.0" width="24.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.6" y="1134.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (57 samples, 2.08%)</title><rect x="1115.6" y="1107.0" width="24.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.6" y="1118.0">P..</text>
</g>
<g>
<title>GraphKit::shared_unlock(Node*, Node*) (1 samples, 0.04%)</title><rect x="1115.6" y="1091.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1118.6" y="1102.0"></text>
</g>
<g>
<title>UnlockNode::UnlockNode(Compile*, TypeFunc const*) (1 samples, 0.04%)</title><rect x="1115.6" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.6" y="1086.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::append(Node* const&amp;) (1 samples, 0.04%)</title><rect x="1115.6" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (55 samples, 2.00%)</title><rect x="1116.0" y="1091.0" width="23.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.0" y="1102.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1116.0" y="1075.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.0" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1116.0" y="1059.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.0" y="1070.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1116.0" y="1043.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.0" y="1054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1116.0" y="1027.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.0" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1116.0" y="1011.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.0" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1116.0" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1116.0" y="979.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1116.0" y="963.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.0" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1116.0" y="947.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.0" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1116.0" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.0" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="1116.0" y="915.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.0" y="926.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1116.0" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.0" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.04%)</title><rect x="1116.0" y="883.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.04%)</title><rect x="1116.0" y="867.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.04%)</title><rect x="1116.0" y="851.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.0" y="862.0"></text>
</g>
<g>
<title>JavaFieldStream::JavaFieldStream(InstanceKlass const*) (1 samples, 0.04%)</title><rect x="1116.0" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.0" y="846.0"></text>
</g>
<g>
<title>constantPoolHandle::constantPoolHandle(ConstantPool*) (1 samples, 0.04%)</title><rect x="1116.0" y="819.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.0" y="830.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.04%)</title><rect x="1116.5" y="1075.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.5" y="1086.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1116.5" y="1059.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.5" y="1070.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1116.5" y="1043.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.5" y="1054.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.04%)</title><rect x="1116.5" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.5" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.04%)</title><rect x="1116.5" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.5" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="1116.5" y="995.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.5" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.04%)</title><rect x="1116.5" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (47 samples, 1.71%)</title><rect x="1116.9" y="1075.0" width="20.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.9" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (47 samples, 1.71%)</title><rect x="1116.9" y="1059.0" width="20.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.9" y="1070.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.04%)</title><rect x="1116.9" y="1043.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.9" y="1054.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1116.9" y="1027.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.9" y="1038.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1116.9" y="1011.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.9" y="1022.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.04%)</title><rect x="1116.9" y="995.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (46 samples, 1.68%)</title><rect x="1117.3" y="1043.0" width="19.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (46 samples, 1.68%)</title><rect x="1117.3" y="1027.0" width="19.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (45 samples, 1.64%)</title><rect x="1117.3" y="1011.0" width="19.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.3" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1117.3" y="995.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.3" y="1006.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1117.3" y="979.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.3" y="990.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1117.3" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.3" y="974.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.04%)</title><rect x="1117.3" y="947.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.3" y="958.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.04%)</title><rect x="1117.3" y="931.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.3" y="942.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="1117.3" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.3" y="926.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.04%)</title><rect x="1117.3" y="899.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.3" y="910.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.04%)</title><rect x="1117.3" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.3" y="894.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.04%)</title><rect x="1117.8" y="995.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.8" y="1006.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1117.8" y="979.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.8" y="990.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1117.8" y="963.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.8" y="974.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1117.8" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.8" y="958.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.04%)</title><rect x="1117.8" y="931.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.8" y="942.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.04%)</title><rect x="1117.8" y="915.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.8" y="926.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.04%)</title><rect x="1117.8" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (38 samples, 1.38%)</title><rect x="1118.2" y="995.0" width="16.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (38 samples, 1.38%)</title><rect x="1118.2" y="979.0" width="16.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (38 samples, 1.38%)</title><rect x="1118.2" y="963.0" width="16.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (38 samples, 1.38%)</title><rect x="1118.2" y="947.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (35 samples, 1.28%)</title><rect x="1118.2" y="931.0" width="15.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.2" y="942.0"></text>
</g>
<g>
<title>Compile::optimize_virtual_call(ciMethod*, int, ciInstanceKlass*, ciKlass*, ciMethod*, TypeOopPtr const*, bool, bool&amp;, int&amp;, bool) (1 samples, 0.04%)</title><rect x="1118.2" y="915.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.2" y="926.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.04%)</title><rect x="1118.2" y="899.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.2" y="910.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.04%)</title><rect x="1118.2" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.2" y="894.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.04%)</title><rect x="1118.2" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.2" y="878.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.04%)</title><rect x="1118.2" y="851.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.2" y="862.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (1 samples, 0.04%)</title><rect x="1118.2" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.2" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (1 samples, 0.04%)</title><rect x="1118.2" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.2" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.04%)</title><rect x="1118.2" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.2" y="814.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.04%)</title><rect x="1118.2" y="787.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1121.2" y="798.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.04%)</title><rect x="1118.6" y="915.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.6" y="926.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1118.6" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.6" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.04%)</title><rect x="1118.6" y="883.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.6" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1118.6" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.6" y="878.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1118.6" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.6" y="862.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.04%)</title><rect x="1118.6" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (29 samples, 1.06%)</title><rect x="1119.0" y="915.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (29 samples, 1.06%)</title><rect x="1119.0" y="899.0" width="12.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (29 samples, 1.06%)</title><rect x="1119.0" y="883.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (29 samples, 1.06%)</title><rect x="1119.0" y="867.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (28 samples, 1.02%)</title><rect x="1119.0" y="851.0" width="12.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.0" y="862.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1119.0" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.0" y="846.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1119.0" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.0" y="830.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1119.0" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.0" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1119.0" y="787.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.0" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1119.0" y="771.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.0" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1119.0" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.0" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1119.0" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.0" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1119.0" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.0" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.04%)</title><rect x="1119.0" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (21 samples, 0.77%)</title><rect x="1119.5" y="835.0" width="9.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.5" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (21 samples, 0.77%)</title><rect x="1119.5" y="819.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.5" y="830.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.04%)</title><rect x="1119.5" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.5" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1119.5" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.5" y="798.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.04%)</title><rect x="1119.5" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (20 samples, 0.73%)</title><rect x="1119.9" y="803.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (20 samples, 0.73%)</title><rect x="1119.9" y="787.0" width="8.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (19 samples, 0.69%)</title><rect x="1119.9" y="771.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.9" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1119.9" y="755.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.9" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1119.9" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.9" y="750.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1119.9" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1119.9" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1119.9" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1119.9" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.9" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1119.9" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.9" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1119.9" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.9" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1119.9" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.9" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.04%)</title><rect x="1119.9" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.9" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1119.9" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.9" y="606.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.04%)</title><rect x="1119.9" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.04%)</title><rect x="1120.3" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1120.3" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.3" y="750.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1120.3" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.3" y="734.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1120.3" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.3" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::propagate_liveness() (1 samples, 0.04%)</title><rect x="1120.3" y="691.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 0.62%)</title><rect x="1120.8" y="755.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 0.62%)</title><rect x="1120.8" y="739.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (16 samples, 0.58%)</title><rect x="1120.8" y="723.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (16 samples, 0.58%)</title><rect x="1120.8" y="707.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.8" y="718.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.04%)</title><rect x="1120.8" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.8" y="702.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.04%)</title><rect x="1120.8" y="675.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.8" y="686.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.04%)</title><rect x="1120.8" y="659.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.8" y="670.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1120.8" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.8" y="654.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1120.8" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.8" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1120.8" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.8" y="622.0"></text>
</g>
<g>
<title>MergeMemStream::next_non_empty(bool) (1 samples, 0.04%)</title><rect x="1120.8" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.40%)</title><rect x="1121.2" y="691.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.36%)</title><rect x="1121.2" y="675.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.36%)</title><rect x="1121.2" y="659.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.36%)</title><rect x="1121.2" y="643.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.36%)</title><rect x="1121.2" y="627.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.26%)</title><rect x="1121.2" y="611.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1121.2" y="595.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.15%)</title><rect x="1121.2" y="579.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.04%)</title><rect x="1121.2" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.2" y="574.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1121.2" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.2" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1121.2" y="531.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.2" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1121.2" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.2" y="526.0"></text>
</g>
<g>
<title>MergeMemStream::set_memory(Node*) (1 samples, 0.04%)</title><rect x="1121.2" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.2" y="510.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.04%)</title><rect x="1121.2" y="483.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.2" y="494.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1121.2" y="467.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1121.6" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1121.6" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1121.6" y="531.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1121.6" y="515.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.6" y="526.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1121.6" y="499.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.6" y="510.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1121.6" y="483.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.6" y="494.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1121.6" y="467.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.6" y="478.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1121.6" y="451.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.6" y="462.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1121.6" y="435.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.6" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1121.6" y="419.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.6" y="430.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1121.6" y="403.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1124.6" y="414.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.04%)</title><rect x="1121.6" y="387.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.6" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.6" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="355.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.6" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="339.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.6" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="323.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.6" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.6" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="291.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.6" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="275.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.6" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="259.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.6" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="243.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.6" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="227.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.6" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.6" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="195.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.6" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="179.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.6" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="163.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.6" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="147.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.6" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="131.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.6" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="115.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.6" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="99.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.6" y="110.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="83.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.6" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="67.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.6" y="78.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1121.6" y="51.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.6" y="62.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1121.6" y="35.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.6" y="46.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.04%)</title><rect x="1122.1" y="531.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.1" y="542.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.04%)</title><rect x="1122.1" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.1" y="526.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.04%)</title><rect x="1122.1" y="499.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.1" y="510.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.04%)</title><rect x="1122.5" y="563.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.5" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1122.5" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.5" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1122.5" y="531.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.5" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1122.9" y="595.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1122.9" y="579.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1122.9" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1122.9" y="547.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1122.9" y="531.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1122.9" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1122.9" y="499.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1122.9" y="483.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1122.9" y="467.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1122.9" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1122.9" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1122.9" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.9" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1122.9" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1122.9" y="387.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1122.9" y="371.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1122.9" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1122.9" y="339.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.04%)</title><rect x="1122.9" y="323.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.9" y="334.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.04%)</title><rect x="1122.9" y="307.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.9" y="318.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.04%)</title><rect x="1122.9" y="291.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.9" y="302.0"></text>
</g>
<g>
<title>Phase::gen_subtype_check(Node*, Node*, Node**, MergeMemNode*, PhaseGVN*) (1 samples, 0.04%)</title><rect x="1122.9" y="275.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.9" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1122.9" y="259.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.9" y="270.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1122.9" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.9" y="254.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.04%)</title><rect x="1122.9" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.9" y="238.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1122.9" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.9" y="222.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="1122.9" y="195.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.04%)</title><rect x="1123.3" y="515.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.3" y="526.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.04%)</title><rect x="1123.3" y="499.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.3" y="510.0"></text>
</g>
<g>
<title>AllocateNode::AllocateNode(Compile*, TypeFunc const*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1123.3" y="483.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.3" y="494.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1123.3" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.3" y="478.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.04%)</title><rect x="1123.3" y="451.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.3" y="462.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1123.3" y="435.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.3" y="446.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.04%)</title><rect x="1123.8" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.8" y="590.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1123.8" y="563.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.8" y="574.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.04%)</title><rect x="1123.8" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.8" y="558.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.04%)</title><rect x="1123.8" y="531.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.8" y="542.0"></text>
</g>
<g>
<title>GrowableArray&lt;ReplacedNodes::ReplacedNode&gt;::appendAll(GrowableArray&lt;ReplacedNodes::ReplacedNode&gt; const*) (1 samples, 0.04%)</title><rect x="1123.8" y="515.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1124.2" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1124.2" y="595.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1124.2" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.04%)</title><rect x="1124.2" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.2" y="574.0"></text>
</g>
<g>
<title>JVMState::debug_depth() const (1 samples, 0.04%)</title><rect x="1124.2" y="547.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1124.6" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.6" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1124.6" y="595.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.6" y="606.0"></text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.04%)</title><rect x="1124.6" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.6" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1124.6" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.6" y="574.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1124.6" y="547.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.6" y="558.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.04%)</title><rect x="1125.1" y="611.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.1" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1125.1" y="595.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.1" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1125.1" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.1" y="590.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.04%)</title><rect x="1125.1" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.1" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1125.5" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1125.5" y="659.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1125.5" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1125.5" y="627.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1125.5" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1125.5" y="595.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1125.5" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1125.5" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1125.5" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1125.5" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1125.5" y="515.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1125.5" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1125.5" y="483.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1125.5" y="467.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1125.5" y="451.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1125.5" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1125.5" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1125.5" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1125.5" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1125.5" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1125.5" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1125.5" y="339.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1125.5" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1125.5" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.5" y="318.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.04%)</title><rect x="1125.5" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.5" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1125.5" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.5" y="286.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.04%)</title><rect x="1125.5" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.5" y="270.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1125.5" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.07%)</title><rect x="1125.9" y="691.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1125.9" y="675.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.9" y="686.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1125.9" y="659.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.9" y="670.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1125.9" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.9" y="654.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1125.9" y="627.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.9" y="638.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.04%)</title><rect x="1125.9" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1125.9" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.9" y="606.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.04%)</title><rect x="1125.9" y="579.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.9" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1125.9" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.9" y="574.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1125.9" y="547.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.9" y="558.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.04%)</title><rect x="1125.9" y="531.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.9" y="542.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1125.9" y="515.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.9" y="526.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1125.9" y="499.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1126.4" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.4" y="686.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1126.4" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.4" y="670.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1126.4" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.4" y="654.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1126.4" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.4" y="638.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1126.4" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.4" y="622.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1126.4" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.4" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1126.4" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.4" y="590.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1126.4" y="563.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.4" y="574.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.04%)</title><rect x="1126.4" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.4" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.4" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.4" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="499.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.4" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.4" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.4" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="451.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.4" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="435.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.4" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.4" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.4" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="387.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.4" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="371.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.4" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="355.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="366.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.04%)</title><rect x="1126.4" y="339.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.4" y="350.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.04%)</title><rect x="1126.4" y="323.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.04%)</title><rect x="1126.8" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.8" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.04%)</title><rect x="1126.8" y="675.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="1126.8" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.8" y="670.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.04%)</title><rect x="1126.8" y="643.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.8" y="654.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.04%)</title><rect x="1127.2" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.2" y="702.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.04%)</title><rect x="1127.2" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="686.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.04%)</title><rect x="1127.2" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.2" y="670.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1127.2" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.2" y="654.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.04%)</title><rect x="1127.2" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1127.2" y="611.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.2" y="622.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1127.2" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.2" y="606.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1127.2" y="579.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.2" y="590.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1127.2" y="563.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="574.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="1127.2" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1130.2" y="558.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="1127.2" y="531.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1130.2" y="542.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="1127.2" y="515.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1130.2" y="526.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.04%)</title><rect x="1127.6" y="723.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.6" y="734.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.04%)</title><rect x="1127.6" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.6" y="718.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1127.6" y="691.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1130.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1128.1" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.1" y="782.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1128.1" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.1" y="766.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1128.1" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.1" y="750.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.04%)</title><rect x="1128.1" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.1" y="734.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.04%)</title><rect x="1128.1" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.1" y="718.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.04%)</title><rect x="1128.1" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.1" y="702.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1128.1" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.1" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.22%)</title><rect x="1128.5" y="835.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.18%)</title><rect x="1128.5" y="819.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.18%)</title><rect x="1128.5" y="803.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.18%)</title><rect x="1128.5" y="787.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.18%)</title><rect x="1128.5" y="771.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.18%)</title><rect x="1128.5" y="755.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1128.5" y="739.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.15%)</title><rect x="1128.5" y="723.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.15%)</title><rect x="1128.5" y="707.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.15%)</title><rect x="1128.5" y="691.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.15%)</title><rect x="1128.5" y="675.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1128.5" y="659.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.15%)</title><rect x="1128.5" y="643.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1128.5" y="627.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1128.5" y="611.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1128.5" y="595.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1128.5" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1128.5" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1128.5" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1128.5" y="531.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1128.5" y="515.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1128.5" y="499.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1128.5" y="483.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1128.5" y="467.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1128.5" y="451.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1128.5" y="435.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1128.5" y="419.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1128.5" y="403.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1128.5" y="387.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.5" y="398.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.04%)</title><rect x="1128.5" y="371.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.5" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1128.5" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.5" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1128.5" y="339.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.04%)</title><rect x="1128.5" y="323.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1128.9" y="371.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1128.9" y="355.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.9" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1128.9" y="339.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.9" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1128.9" y="323.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="334.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.04%)</title><rect x="1128.9" y="307.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="1128.9" y="291.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="1128.9" y="275.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="1128.9" y="259.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1128.9" y="243.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1128.9" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.9" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="1128.9" y="211.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.9" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.04%)</title><rect x="1128.9" y="195.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.9" y="206.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1128.9" y="179.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1129.4" y="595.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1129.4" y="579.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="590.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1129.4" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.4" y="574.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1129.4" y="547.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="558.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1129.4" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.4" y="542.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.04%)</title><rect x="1129.4" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.4" y="526.0"></text>
</g>
<g>
<title>GraphKit::sync_kit(IdealKit&amp;) (1 samples, 0.04%)</title><rect x="1129.4" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.4" y="510.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.04%)</title><rect x="1129.4" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1129.4" y="467.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.4" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1129.4" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1129.4" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1129.4" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.4" y="430.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1129.4" y="403.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1129.8" y="627.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.8" y="638.0"></text>
</g>
<g>
<title>GraphKit::use_exception_state(SafePointNode*) (1 samples, 0.04%)</title><rect x="1129.8" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.8" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1129.8" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.8" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="1129.8" y="579.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.8" y="590.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.04%)</title><rect x="1129.8" y="563.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.8" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_insert(Node*) (1 samples, 0.04%)</title><rect x="1129.8" y="547.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.8" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1130.2" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1130.2" y="723.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1130.2" y="707.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1130.2" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1130.2" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1130.2" y="659.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1130.2" y="643.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1130.2" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1130.2" y="611.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1130.2" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1130.2" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1130.2" y="563.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1130.2" y="547.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1130.2" y="531.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1130.2" y="515.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1130.2" y="499.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1130.2" y="483.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.2" y="494.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1130.2" y="467.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.2" y="478.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1130.2" y="451.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.2" y="462.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1130.2" y="435.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.2" y="446.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.04%)</title><rect x="1130.2" y="419.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.2" y="430.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.04%)</title><rect x="1130.2" y="403.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.2" y="414.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.04%)</title><rect x="1130.2" y="387.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.2" y="398.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1130.2" y="371.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.2" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1130.2" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.2" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1130.7" y="819.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1130.7" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1130.7" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1130.7" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1130.7" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1130.7" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1130.7" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1130.7" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.04%)</title><rect x="1130.7" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.7" y="702.0"></text>
</g>
<g>
<title>AllocateNode::compute_MemBar_redundancy(ciMethod*) (1 samples, 0.04%)</title><rect x="1130.7" y="675.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.7" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.04%)</title><rect x="1130.7" y="659.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.7" y="670.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.04%)</title><rect x="1130.7" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.7" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.04%)</title><rect x="1130.7" y="627.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.7" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.04%)</title><rect x="1130.7" y="611.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1131.1" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1131.1" y="835.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.1" y="846.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1131.1" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="830.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1131.1" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.1" y="814.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1131.1" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.1" y="798.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.04%)</title><rect x="1131.1" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.1" y="782.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.04%)</title><rect x="1131.1" y="755.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="766.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.04%)</title><rect x="1131.1" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.1" y="750.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.04%)</title><rect x="1131.1" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="734.0"></text>
</g>
<g>
<title>MergeMemStream::next_non_empty(bool) (1 samples, 0.04%)</title><rect x="1131.1" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.1" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.15%)</title><rect x="1131.5" y="915.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.5" y="926.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.04%)</title><rect x="1131.5" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.5" y="910.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1131.5" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.5" y="894.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.04%)</title><rect x="1131.5" y="867.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.5" y="878.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.04%)</title><rect x="1131.5" y="851.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.5" y="862.0"></text>
</g>
<g>
<title>Compile::current() (1 samples, 0.04%)</title><rect x="1131.5" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.5" y="846.0"></text>
</g>
<g>
<title>ciEnv::current() (1 samples, 0.04%)</title><rect x="1131.5" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.5" y="830.0"></text>
</g>
<g>
<title>CompilerThread::current() (1 samples, 0.04%)</title><rect x="1131.5" y="803.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.5" y="814.0"></text>
</g>
<g>
<title>JavaThread::current() (1 samples, 0.04%)</title><rect x="1131.5" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.5" y="798.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="1131.5" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.5" y="782.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1131.5" y="755.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1134.5" y="766.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.04%)</title><rect x="1131.9" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.9" y="910.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.04%)</title><rect x="1131.9" y="883.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.9" y="894.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.04%)</title><rect x="1131.9" y="867.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.9" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1131.9" y="851.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.9" y="862.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1131.9" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.9" y="846.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1131.9" y="819.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.9" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.04%)</title><rect x="1131.9" y="803.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.9" y="814.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.04%)</title><rect x="1131.9" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.9" y="798.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1131.9" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.9" y="782.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1131.9" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.9" y="766.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.04%)</title><rect x="1131.9" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.9" y="750.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.04%)</title><rect x="1131.9" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1132.4" y="899.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.4" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1132.4" y="883.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1132.4" y="867.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1132.4" y="851.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1132.4" y="835.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1132.4" y="819.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1132.4" y="803.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1132.4" y="787.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1132.4" y="771.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1132.4" y="755.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1132.4" y="739.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1132.4" y="723.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1132.4" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1132.4" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1132.4" y="675.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.4" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1132.4" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1132.8" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1132.8" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1132.8" y="627.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1132.8" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1132.8" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1132.8" y="579.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1132.8" y="563.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1132.8" y="547.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1132.8" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1132.8" y="515.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.8" y="526.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1132.8" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.8" y="510.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.04%)</title><rect x="1132.8" y="483.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.8" y="494.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.04%)</title><rect x="1132.8" y="467.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1133.2" y="931.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1133.2" y="915.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.2" y="926.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1133.2" y="899.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.2" y="910.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1133.2" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="894.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1133.2" y="867.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="878.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.04%)</title><rect x="1133.2" y="851.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.2" y="862.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.04%)</title><rect x="1133.2" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.2" y="846.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.04%)</title><rect x="1133.2" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.2" y="830.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1133.2" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.2" y="814.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1133.2" y="787.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.2" y="798.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1133.2" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.2" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1133.2" y="755.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.2" y="766.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.04%)</title><rect x="1133.2" y="739.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.2" y="750.0"></text>
</g>
<g>
<title>Node::is_top() const (1 samples, 0.04%)</title><rect x="1133.2" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="1133.7" y="931.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.7" y="942.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="1133.7" y="915.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.7" y="926.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1133.7" y="899.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.7" y="910.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.04%)</title><rect x="1133.7" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.7" y="894.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.04%)</title><rect x="1133.7" y="867.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.7" y="878.0"></text>
</g>
<g>
<title>Arena::Amalloc_D(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1133.7" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.7" y="862.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="1133.7" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.7" y="846.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.04%)</title><rect x="1134.1" y="931.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.1" y="942.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.04%)</title><rect x="1134.1" y="915.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.1" y="926.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.04%)</title><rect x="1134.1" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.1" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.18%)</title><rect x="1134.5" y="995.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.18%)</title><rect x="1134.5" y="979.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.18%)</title><rect x="1134.5" y="963.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.18%)</title><rect x="1134.5" y="947.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.18%)</title><rect x="1134.5" y="931.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.11%)</title><rect x="1134.5" y="915.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1134.5" y="899.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1134.5" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1134.5" y="867.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1134.5" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1134.5" y="835.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1134.5" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1134.5" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1134.5" y="787.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1134.5" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1134.5" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1134.5" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.5" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1134.5" y="723.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1134.5" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1134.5" y="691.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1134.5" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1134.5" y="659.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1134.5" y="643.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1134.5" y="627.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1134.5" y="611.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1134.5" y="595.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1137.5" y="606.0"></text>
</g>
<g>
<title>Parse::maybe_add_predicate_after_if(Parse::Block*) (1 samples, 0.04%)</title><rect x="1134.5" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="590.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.04%)</title><rect x="1134.5" y="563.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.5" y="574.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.04%)</title><rect x="1134.5" y="547.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1134.5" y="531.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.5" y="542.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="1134.5" y="515.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.5" y="526.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.04%)</title><rect x="1134.5" y="499.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.5" y="510.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.04%)</title><rect x="1134.5" y="483.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.5" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.04%)</title><rect x="1134.5" y="467.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.5" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.04%)</title><rect x="1134.5" y="451.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.5" y="462.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1134.5" y="435.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="446.0"></text>
</g>
<g>
<title>MergeMemNode::grow_to_match(MergeMemNode const*) (1 samples, 0.04%)</title><rect x="1134.5" y="419.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.5" y="430.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.04%)</title><rect x="1134.5" y="403.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.5" y="414.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.04%)</title><rect x="1134.5" y="387.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.5" y="398.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1134.5" y="371.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1137.5" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1135.0" y="899.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1135.0" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1135.0" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1135.0" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1135.0" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1135.0" y="819.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.0" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1135.0" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.0" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1135.0" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.0" y="798.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="1135.0" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.0" y="782.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="1135.0" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1135.4" y="883.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1135.4" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1135.4" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.4" y="862.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.04%)</title><rect x="1135.4" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.4" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_empty_methodData() (1 samples, 0.04%)</title><rect x="1135.4" y="819.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.4" y="830.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData() (1 samples, 0.04%)</title><rect x="1135.4" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.4" y="814.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.04%)</title><rect x="1135.4" y="787.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1138.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1135.8" y="915.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1135.8" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.8" y="910.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1135.8" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.8" y="894.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1135.8" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.8" y="878.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1135.8" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.8" y="862.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.04%)</title><rect x="1135.8" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.8" y="846.0"></text>
</g>
<g>
<title>G1BarrierSetC2::write_ref_field_pre_entry_Type() (1 samples, 0.04%)</title><rect x="1135.8" y="819.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.8" y="830.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.04%)</title><rect x="1135.8" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_lookupswitch() (1 samples, 0.04%)</title><rect x="1136.2" y="915.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.2" y="926.0"></text>
</g>
<g>
<title>Parse::jump_switch_ranges(Node*, SwitchRange*, SwitchRange*, int) (1 samples, 0.04%)</title><rect x="1136.2" y="899.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.2" y="910.0"></text>
</g>
<g>
<title>Parse::jump_switch_ranges(Node*, SwitchRange*, SwitchRange*, int) (1 samples, 0.04%)</title><rect x="1136.2" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.2" y="894.0"></text>
</g>
<g>
<title>Parse::jump_switch_ranges(Node*, SwitchRange*, SwitchRange*, int) (1 samples, 0.04%)</title><rect x="1136.2" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.2" y="878.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1136.2" y="851.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.2" y="862.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.04%)</title><rect x="1136.2" y="835.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.2" y="846.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1136.2" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.2" y="830.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.04%)</title><rect x="1136.2" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1136.7" y="1011.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1136.7" y="995.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.7" y="1006.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.04%)</title><rect x="1136.7" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.7" y="990.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.04%)</title><rect x="1136.7" y="963.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.7" y="974.0"></text>
</g>
<g>
<title>ciField::constant_value() (1 samples, 0.04%)</title><rect x="1136.7" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.7" y="958.0"></text>
</g>
<g>
<title>ciInstance::field_value_impl(BasicType, int) (1 samples, 0.04%)</title><rect x="1136.7" y="931.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.7" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.22%)</title><rect x="1137.1" y="1075.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.1" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.22%)</title><rect x="1137.1" y="1059.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.22%)</title><rect x="1137.1" y="1043.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.22%)</title><rect x="1137.1" y="1027.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.22%)</title><rect x="1137.1" y="1011.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.22%)</title><rect x="1137.1" y="995.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.18%)</title><rect x="1137.1" y="979.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.1" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.18%)</title><rect x="1137.1" y="963.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.18%)</title><rect x="1137.1" y="947.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.18%)</title><rect x="1137.1" y="931.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.15%)</title><rect x="1137.1" y="915.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.11%)</title><rect x="1137.1" y="899.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.11%)</title><rect x="1137.1" y="883.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.11%)</title><rect x="1137.1" y="867.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.11%)</title><rect x="1137.1" y="851.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1137.1" y="835.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1137.1" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1137.1" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1137.1" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1137.1" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1137.1" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1137.1" y="739.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1137.1" y="723.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1137.1" y="707.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1137.1" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1137.1" y="675.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1137.1" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1137.1" y="643.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1137.1" y="627.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1137.1" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1137.1" y="595.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.07%)</title><rect x="1137.1" y="579.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.07%)</title><rect x="1137.1" y="563.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.07%)</title><rect x="1137.1" y="547.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.07%)</title><rect x="1137.1" y="531.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.07%)</title><rect x="1137.1" y="515.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1137.1" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1137.1" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1137.1" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1137.1" y="451.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1137.1" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1137.1" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1137.1" y="403.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1137.1" y="387.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1137.1" y="371.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1137.1" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1137.1" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="350.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.04%)</title><rect x="1137.1" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="334.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.04%)</title><rect x="1137.1" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="318.0"></text>
</g>
<g>
<title>ciField::constant_value() (1 samples, 0.04%)</title><rect x="1137.1" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="302.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.04%)</title><rect x="1137.1" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="286.0"></text>
</g>
<g>
<title>ciObjectFactory::find_non_perm(oopDesc*) (1 samples, 0.04%)</title><rect x="1137.1" y="259.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1137.5" y="499.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1137.5" y="483.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1137.5" y="467.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1137.5" y="451.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1137.5" y="435.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1137.5" y="419.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.5" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1137.5" y="403.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.5" y="414.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.04%)</title><rect x="1137.5" y="387.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.5" y="398.0"></text>
</g>
<g>
<title>GraphKit::load_object_klass(Node*) (1 samples, 0.04%)</title><rect x="1137.5" y="371.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.5" y="382.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.04%)</title><rect x="1137.5" y="355.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.5" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1137.5" y="339.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.5" y="350.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1137.5" y="323.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.5" y="334.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="1137.5" y="307.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.5" y="318.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1137.5" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.5" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.04%)</title><rect x="1137.5" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.5" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.04%)</title><rect x="1137.5" y="259.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.5" y="270.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.04%)</title><rect x="1138.0" y="835.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.0" y="846.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.04%)</title><rect x="1138.0" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.0" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1138.4" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1138.4" y="883.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1138.4" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1138.4" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1138.4" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1138.4" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.4" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1138.4" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.4" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1138.4" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1138.4" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1138.4" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="1138.4" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.4" y="750.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1138.4" y="723.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.04%)</title><rect x="1138.8" y="915.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.04%)</title><rect x="1138.8" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.8" y="910.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.04%)</title><rect x="1138.8" y="883.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.8" y="894.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1138.8" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.8" y="878.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.04%)</title><rect x="1138.8" y="851.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.8" y="862.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.04%)</title><rect x="1138.8" y="835.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.8" y="846.0"></text>
</g>
<g>
<title>IdealKit::IdealKit(GraphKit*, bool, bool) (1 samples, 0.04%)</title><rect x="1138.8" y="819.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.8" y="830.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::GrowableArray(Arena*, int, int, Node* const&amp;) (1 samples, 0.04%)</title><rect x="1138.8" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.8" y="814.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1138.8" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.8" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1139.3" y="979.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1139.3" y="963.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1139.3" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1139.3" y="931.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1139.3" y="915.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1139.3" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="1139.3" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="1139.3" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="1139.3" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="1139.3" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="1139.3" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.3" y="830.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.04%)</title><rect x="1139.3" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.3" y="814.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.04%)</title><rect x="1139.3" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.3" y="798.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.04%)</title><rect x="1139.3" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.3" y="782.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.04%)</title><rect x="1139.3" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.3" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.04%)</title><rect x="1139.3" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.3" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1139.3" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.3" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.04%)</title><rect x="1139.3" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.3" y="718.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.04%)</title><rect x="1139.3" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.04%)</title><rect x="1139.7" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.7" y="1102.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.04%)</title><rect x="1139.7" y="1075.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.7" y="1086.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.04%)</title><rect x="1139.7" y="1059.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.7" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="1139.7" y="1043.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.7" y="1054.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.04%)</title><rect x="1140.1" y="1155.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.1" y="1166.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="1140.1" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.1" y="1150.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.04%)</title><rect x="1140.1" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.1" y="1134.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.04%)</title><rect x="1140.1" y="1107.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="1118.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.04%)</title><rect x="1140.5" y="1155.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.5" y="1166.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.04%)</title><rect x="1140.5" y="1139.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.5" y="1150.0"></text>
</g>
<g>
<title>Type::get_const_type(ciType*) (1 samples, 0.04%)</title><rect x="1140.5" y="1123.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.5" y="1134.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="1140.5" y="1107.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.5" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.04%)</title><rect x="1140.5" y="1091.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.5" y="1102.0"></text>
</g>
<g>
<title>TypeAryPtr::xdual() const (1 samples, 0.04%)</title><rect x="1140.5" y="1075.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.5" y="1086.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (3 samples, 0.11%)</title><rect x="1141.0" y="1155.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="1166.0"></text>
</g>
<g>
<title>Dependencies::sort_all_deps() (1 samples, 0.04%)</title><rect x="1141.0" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.0" y="1150.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (2 samples, 0.07%)</title><rect x="1141.4" y="1139.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.4" y="1150.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.07%)</title><rect x="1141.4" y="1123.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1144.4" y="1134.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 0.04%)</title><rect x="1142.3" y="1187.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="1198.0"></text>
</g>
<g>
<title>CompileTask::print(outputStream*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1142.3" y="1171.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="1182.0"></text>
</g>
<g>
<title>CompileTask::print_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="1142.3" y="1155.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.3" y="1166.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.04%)</title><rect x="1142.3" y="1139.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.3" y="1150.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (1 samples, 0.04%)</title><rect x="1142.3" y="1123.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="1134.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.04%)</title><rect x="1142.3" y="1107.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1145.3" y="1118.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.04%)</title><rect x="1142.3" y="1091.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1145.3" y="1102.0"></text>
</g>
<g>
<title>CompilationLog::log_nmethod(JavaThread*, nmethod*) (1 samples, 0.04%)</title><rect x="1142.7" y="1187.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.7" y="1198.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.04%)</title><rect x="1142.7" y="1171.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.7" y="1182.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.04%)</title><rect x="1142.7" y="1155.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.7" y="1166.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.04%)</title><rect x="1142.7" y="1139.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1145.7" y="1150.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.04%)</title><rect x="1142.7" y="1123.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.7" y="1134.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.04%)</title><rect x="1142.7" y="1107.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1145.7" y="1118.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.04%)</title><rect x="1142.7" y="1091.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1145.7" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (54 samples, 1.97%)</title><rect x="1143.1" y="1187.0" width="23.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.1" y="1198.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (54 samples, 1.97%)</title><rect x="1143.1" y="1171.0" width="23.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.1" y="1182.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (54 samples, 1.97%)</title><rect x="1143.1" y="1155.0" width="23.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="1166.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (47 samples, 1.71%)</title><rect x="1143.1" y="1139.0" width="20.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="1150.0"></text>
</g>
<g>
<title>Compilation::build_hir() (23 samples, 0.84%)</title><rect x="1143.1" y="1123.0" width="9.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.1" y="1134.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (2 samples, 0.07%)</title><rect x="1143.1" y="1107.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.1" y="1118.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="1091.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.1" y="1102.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="1075.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="1086.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="1059.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.1" y="1070.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="1043.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.1" y="1054.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="1027.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.1" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="1011.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="1022.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="995.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="1006.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="979.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.1" y="990.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="963.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="974.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="958.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="931.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="942.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="915.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="926.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.1" y="910.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="883.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="894.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.1" y="878.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="862.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="846.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.1" y="830.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.1" y="814.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="798.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="782.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="766.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="739.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.1" y="750.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="734.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="707.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.1" y="718.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="702.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="686.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="659.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="670.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="643.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="654.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="627.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="638.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.1" y="622.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.04%)</title><rect x="1143.1" y="595.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="606.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.04%)</title><rect x="1143.1" y="579.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.1" y="590.0"></text>
</g>
<g>
<title>BlockBegin::state_values_do(ValueVisitor*) (1 samples, 0.04%)</title><rect x="1143.1" y="563.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="574.0"></text>
</g>
<g>
<title>ValueStack::values_do(ValueVisitor*) (1 samples, 0.04%)</title><rect x="1143.1" y="547.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.1" y="558.0"></text>
</g>
<g>
<title>ValueStack::apply(GrowableArray&lt;Instruction*&gt;, ValueVisitor*) (1 samples, 0.04%)</title><rect x="1143.1" y="531.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="542.0"></text>
</g>
<g>
<title>GlobalValueNumbering::substitute(Instruction*) (1 samples, 0.04%)</title><rect x="1143.6" y="1091.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.6" y="1102.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.04%)</title><rect x="1143.6" y="1075.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.6" y="1086.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (20 samples, 0.73%)</title><rect x="1144.0" y="1107.0" width="8.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.0" y="1118.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (20 samples, 0.73%)</title><rect x="1144.0" y="1091.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.0" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (20 samples, 0.73%)</title><rect x="1144.0" y="1075.0" width="8.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.0" y="1086.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.04%)</title><rect x="1144.0" y="1059.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.0" y="1070.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.04%)</title><rect x="1144.0" y="1043.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.0" y="1054.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.04%)</title><rect x="1144.0" y="1027.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.0" y="1038.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1144.0" y="1011.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.0" y="1022.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.04%)</title><rect x="1144.0" y="995.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.0" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.04%)</title><rect x="1144.0" y="979.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.0" y="990.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.04%)</title><rect x="1144.0" y="963.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.0" y="974.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.04%)</title><rect x="1144.0" y="947.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.0" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.04%)</title><rect x="1144.0" y="931.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.0" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (19 samples, 0.69%)</title><rect x="1144.4" y="1059.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::_goto(int, int) (1 samples, 0.04%)</title><rect x="1144.4" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.4" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (18 samples, 0.66%)</title><rect x="1144.8" y="1043.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.8" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (2 samples, 0.07%)</title><rect x="1145.3" y="1027.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.07%)</title><rect x="1145.3" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.3" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.07%)</title><rect x="1145.3" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.3" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (2 samples, 0.07%)</title><rect x="1145.3" y="979.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.3" y="990.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (2 samples, 0.07%)</title><rect x="1145.3" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.3" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (2 samples, 0.07%)</title><rect x="1145.3" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.3" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (2 samples, 0.07%)</title><rect x="1145.3" y="931.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.3" y="942.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.04%)</title><rect x="1145.3" y="915.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="926.0"></text>
</g>
<g>
<title>SymbolTable::lookup_common(char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1145.3" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.3" y="910.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.04%)</title><rect x="1145.3" y="883.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.04%)</title><rect x="1145.7" y="915.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.7" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1145.7" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.7" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.04%)</title><rect x="1145.7" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.7" y="894.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.04%)</title><rect x="1145.7" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.7" y="878.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1196148ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="1145.7" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.7" y="862.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1196148ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.04%)</title><rect x="1145.7" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.7" y="846.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1196148ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1196148ull&gt;::load_internal&lt;1196148ull, oopDesc*&gt;(void*) (1 samples, 0.04%)</title><rect x="1145.7" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (15 samples, 0.55%)</title><rect x="1146.1" y="1027.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.1" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (13 samples, 0.47%)</title><rect x="1146.1" y="1011.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.1" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (13 samples, 0.47%)</title><rect x="1146.1" y="995.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.1" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1146.1" y="979.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.1" y="990.0"></text>
</g>
<g>
<title>ProfileCall::visit(InstructionVisitor*) (1 samples, 0.04%)</title><rect x="1146.1" y="963.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.1" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (10 samples, 0.36%)</title><rect x="1146.6" y="979.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (10 samples, 0.36%)</title><rect x="1146.6" y="963.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (9 samples, 0.33%)</title><rect x="1146.6" y="947.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (8 samples, 0.29%)</title><rect x="1146.6" y="931.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (8 samples, 0.29%)</title><rect x="1146.6" y="915.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.04%)</title><rect x="1146.6" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.6" y="910.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.04%)</title><rect x="1146.6" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.6" y="894.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.04%)</title><rect x="1146.6" y="867.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (6 samples, 0.22%)</title><rect x="1147.0" y="899.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.0" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (6 samples, 0.22%)</title><rect x="1147.0" y="883.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.04%)</title><rect x="1147.0" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1147.0" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.0" y="862.0"></text>
</g>
<g>
<title>Goto::Goto(BlockBegin*, ValueStack*, bool) (1 samples, 0.04%)</title><rect x="1147.0" y="835.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.15%)</title><rect x="1147.4" y="867.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.4" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.15%)</title><rect x="1147.4" y="851.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.4" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.15%)</title><rect x="1147.4" y="835.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.4" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.11%)</title><rect x="1147.4" y="819.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.4" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.11%)</title><rect x="1147.4" y="803.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="814.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1147.4" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="798.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1147.4" y="771.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.4" y="782.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1147.4" y="755.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="766.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.04%)</title><rect x="1147.4" y="739.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.4" y="750.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="1147.4" y="723.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1150.4" y="734.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="1147.4" y="707.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1150.4" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1147.9" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1147.9" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1147.9" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1147.9" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1147.9" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.9" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="1147.9" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.9" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1147.9" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.9" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.04%)</title><rect x="1147.9" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.9" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="1147.9" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.9" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.04%)</title><rect x="1147.9" y="643.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1147.9" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.9" y="638.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1147.9" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="622.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1147.9" y="595.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.9" y="606.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1147.9" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.9" y="590.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1147.9" y="563.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.9" y="574.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="1147.9" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.9" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.04%)</title><rect x="1148.3" y="787.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.3" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1148.3" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.3" y="782.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1148.3" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.3" y="766.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.04%)</title><rect x="1148.3" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.3" y="750.0"></text>
</g>
<g>
<title>GrowableArray&lt;Instruction*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1148.3" y="723.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.04%)</title><rect x="1148.7" y="819.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.7" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.04%)</title><rect x="1148.7" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.7" y="814.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.04%)</title><rect x="1148.7" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.7" y="798.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.04%)</title><rect x="1148.7" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.7" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1148.7" y="755.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.7" y="766.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.04%)</title><rect x="1148.7" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.7" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.04%)</title><rect x="1148.7" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="734.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.04%)</title><rect x="1148.7" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.7" y="718.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.04%)</title><rect x="1148.7" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.04%)</title><rect x="1149.1" y="867.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.1" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="1149.1" y="851.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.1" y="862.0"></text>
</g>
<g>
<title>LogicOp::visit(InstructionVisitor*) (1 samples, 0.04%)</title><rect x="1149.1" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.1" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.04%)</title><rect x="1149.6" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.6" y="910.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.04%)</title><rect x="1149.6" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.6" y="894.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.04%)</title><rect x="1149.6" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.6" y="878.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.04%)</title><rect x="1149.6" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.6" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.04%)</title><rect x="1150.0" y="931.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.0" y="942.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.04%)</title><rect x="1150.4" y="947.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.04%)</title><rect x="1150.9" y="979.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.9" y="990.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.04%)</title><rect x="1150.9" y="963.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.9" y="974.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.04%)</title><rect x="1150.9" y="947.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.9" y="958.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.04%)</title><rect x="1150.9" y="931.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.9" y="942.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.04%)</title><rect x="1150.9" y="915.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.9" y="926.0"></text>
</g>
<g>
<title>MethodLiveness::propagate_liveness() (1 samples, 0.04%)</title><rect x="1150.9" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.9" y="910.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.04%)</title><rect x="1150.9" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.9" y="894.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap const&amp;) (1 samples, 0.04%)</title><rect x="1150.9" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.9" y="878.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.04%)</title><rect x="1151.3" y="979.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.3" y="990.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.04%)</title><rect x="1151.3" y="963.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.3" y="974.0"></text>
</g>
<g>
<title>Instruction::as_Intrinsic() (1 samples, 0.04%)</title><rect x="1151.7" y="1011.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.7" y="1022.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.04%)</title><rect x="1152.2" y="1011.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.2" y="1022.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.04%)</title><rect x="1152.2" y="995.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.2" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(Klass*, LinkInfo const&amp;) (1 samples, 0.04%)</title><rect x="1152.2" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.2" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.04%)</title><rect x="1152.2" y="963.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.2" y="974.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle const&amp;, Klass*, Handle, Klass*, bool, Thread*) (1 samples, 0.04%)</title><rect x="1152.2" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.2" y="958.0"></text>
</g>
<g>
<title>CallInfo::set_common(Klass*, Klass*, methodHandle const&amp;, methodHandle const&amp;, CallInfo::CallKind, int, Thread*) (1 samples, 0.04%)</title><rect x="1152.2" y="931.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.2" y="942.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.04%)</title><rect x="1152.6" y="1107.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.6" y="1118.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.04%)</title><rect x="1152.6" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.6" y="1102.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_dominators() (1 samples, 0.04%)</title><rect x="1152.6" y="1075.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.6" y="1086.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (7 samples, 0.26%)</title><rect x="1153.0" y="1123.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.0" y="1134.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (4 samples, 0.15%)</title><rect x="1153.0" y="1107.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.0" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (4 samples, 0.15%)</title><rect x="1153.0" y="1091.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.0" y="1102.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (2 samples, 0.07%)</title><rect x="1153.0" y="1075.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.0" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1153.0" y="1059.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.0" y="1070.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.04%)</title><rect x="1153.0" y="1043.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.0" y="1054.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.04%)</title><rect x="1153.0" y="1027.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="1038.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.04%)</title><rect x="1153.0" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.0" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="1153.0" y="995.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.0" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="1153.0" y="979.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.0" y="990.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="1153.0" y="963.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.0" y="974.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.04%)</title><rect x="1153.0" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.0" y="958.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.04%)</title><rect x="1153.0" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.0" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::store_parameter(Metadata*, int) (1 samples, 0.04%)</title><rect x="1153.4" y="1059.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.4" y="1070.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(Address, Metadata*) (1 samples, 0.04%)</title><rect x="1153.4" y="1043.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.4" y="1054.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.04%)</title><rect x="1153.4" y="1027.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.4" y="1038.0"></text>
</g>
<g>
<title>NewInstanceStub::emit_code(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1153.9" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.9" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1153.9" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.9" y="1070.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.04%)</title><rect x="1153.9" y="1043.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.9" y="1054.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.04%)</title><rect x="1153.9" y="1027.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.9" y="1038.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.04%)</title><rect x="1153.9" y="1011.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.9" y="1022.0"></text>
</g>
<g>
<title>PatchingStub::emit_code(LIR_Assembler*) (1 samples, 0.04%)</title><rect x="1154.3" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.3" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1154.3" y="1059.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.3" y="1070.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.04%)</title><rect x="1154.3" y="1043.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.3" y="1054.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.04%)</title><rect x="1154.3" y="1027.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.3" y="1038.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.04%)</title><rect x="1154.3" y="1011.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.3" y="1022.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.04%)</title><rect x="1154.3" y="995.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.3" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (3 samples, 0.11%)</title><rect x="1154.7" y="1107.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.7" y="1118.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (3 samples, 0.11%)</title><rect x="1154.7" y="1091.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (2 samples, 0.07%)</title><rect x="1154.7" y="1075.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (1 samples, 0.04%)</title><rect x="1154.7" y="1059.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.7" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.04%)</title><rect x="1154.7" y="1043.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="1054.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.04%)</title><rect x="1154.7" y="1027.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.7" y="1038.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.04%)</title><rect x="1154.7" y="1011.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.7" y="1022.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.04%)</title><rect x="1154.7" y="995.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="1006.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.04%)</title><rect x="1154.7" y="979.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.04%)</title><rect x="1154.7" y="963.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.04%)</title><rect x="1154.7" y="947.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.7" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.04%)</title><rect x="1155.2" y="1059.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="1070.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.04%)</title><rect x="1155.2" y="1043.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.2" y="1054.0"></text>
</g>
<g>
<title>CodeSection::expand_locs(int) (1 samples, 0.04%)</title><rect x="1155.2" y="1027.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="1038.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1155.2" y="1011.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="1022.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1155.2" y="995.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.04%)</title><rect x="1155.6" y="1075.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.6" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.04%)</title><rect x="1155.6" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.6" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="1155.6" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.6" y="1054.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::find_index(Metadata*) (1 samples, 0.04%)</title><rect x="1155.6" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="1038.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.04%)</title><rect x="1155.6" y="1011.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.6" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (17 samples, 0.62%)</title><rect x="1156.0" y="1123.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="1134.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.07%)</title><rect x="1156.0" y="1107.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.07%)</title><rect x="1156.0" y="1091.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="1102.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (2 samples, 0.07%)</title><rect x="1156.0" y="1075.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.04%)</title><rect x="1156.5" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="1070.0"></text>
</g>
<g>
<title>PhiResolver::move(LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.04%)</title><rect x="1156.5" y="1043.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="1054.0"></text>
</g>
<g>
<title>PhiResolver::create_node(LIR_OprDesc*, bool) (1 samples, 0.04%)</title><rect x="1156.5" y="1027.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="1038.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::at_grow(int, ResolveNode* const&amp;) (1 samples, 0.04%)</title><rect x="1156.5" y="1011.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (15 samples, 0.55%)</title><rect x="1156.9" y="1107.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.9" y="1118.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (9 samples, 0.33%)</title><rect x="1156.9" y="1091.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.9" y="1102.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1156.9" y="1075.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.9" y="1086.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (7 samples, 0.26%)</title><rect x="1157.3" y="1075.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="1086.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (3 samples, 0.11%)</title><rect x="1157.7" y="1059.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.7" y="1070.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.11%)</title><rect x="1159.0" y="1059.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="1070.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.04%)</title><rect x="1159.0" y="1043.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.0" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (1 samples, 0.04%)</title><rect x="1159.0" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.0" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.04%)</title><rect x="1159.5" y="1043.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.04%)</title><rect x="1159.5" y="1027.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.5" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.04%)</title><rect x="1159.5" y="1011.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="1022.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.04%)</title><rect x="1159.5" y="995.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="1006.0"></text>
</g>
<g>
<title>LinearScanWalker::insert_move(int, Interval*, Interval*) (1 samples, 0.04%)</title><rect x="1159.9" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="1054.0"></text>
</g>
<g>
<title>MoveResolver::move_insert_position(LIR_List*, int) (1 samples, 0.04%)</title><rect x="1159.9" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="1038.0"></text>
</g>
<g>
<title>MoveResolver::resolve_mappings() (1 samples, 0.04%)</title><rect x="1159.9" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.9" y="1022.0"></text>
</g>
<g>
<title>LinearScanWalker::LinearScanWalker(LinearScan*, Interval*, Interval*) (1 samples, 0.04%)</title><rect x="1160.3" y="1075.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.3" y="1086.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1160.3" y="1059.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.3" y="1070.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.04%)</title><rect x="1160.3" y="1043.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.3" y="1054.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.07%)</title><rect x="1160.8" y="1091.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.8" y="1102.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.07%)</title><rect x="1160.8" y="1075.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.8" y="1086.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.04%)</title><rect x="1160.8" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.8" y="1070.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.04%)</title><rect x="1161.2" y="1059.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="1070.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.04%)</title><rect x="1161.2" y="1043.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.2" y="1054.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.04%)</title><rect x="1161.2" y="1027.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="1038.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.04%)</title><rect x="1161.2" y="1011.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.2" y="1022.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.07%)</title><rect x="1161.6" y="1091.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.6" y="1102.0"></text>
</g>
<g>
<title>LinearScan::add_def(LIR_OprDesc*, int, IntervalUseKind) (1 samples, 0.04%)</title><rect x="1161.6" y="1075.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="1086.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.04%)</title><rect x="1162.0" y="1075.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.0" y="1086.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.04%)</title><rect x="1162.5" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.5" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;LIR_Op*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1162.5" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="1086.0"></text>
</g>
<g>
<title>LinearScan::number_instructions() (1 samples, 0.04%)</title><rect x="1162.9" y="1091.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.9" y="1102.0"></text>
</g>
<g>
<title>GrowableArray&lt;BlockBegin*&gt;::GrowableArray(int, int, BlockBegin* const&amp;, bool, MemoryType) (1 samples, 0.04%)</title><rect x="1162.9" y="1075.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.04%)</title><rect x="1162.9" y="1059.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="1070.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (7 samples, 0.26%)</title><rect x="1163.3" y="1139.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="1150.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (7 samples, 0.26%)</title><rect x="1163.3" y="1123.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.04%)</title><rect x="1163.3" y="1107.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="1118.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, int, int) (1 samples, 0.04%)</title><rect x="1163.3" y="1091.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::notify(int) (1 samples, 0.04%)</title><rect x="1163.3" y="1075.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="1086.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (6 samples, 0.22%)</title><rect x="1163.8" y="1107.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="1118.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.22%)</title><rect x="1163.8" y="1091.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1166.8" y="1102.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.07%)</title><rect x="1166.3" y="1187.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="1198.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.07%)</title><rect x="1166.3" y="1171.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.3" y="1182.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.07%)</title><rect x="1166.3" y="1155.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.3" y="1166.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.07%)</title><rect x="1166.3" y="1139.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1169.3" y="1150.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.07%)</title><rect x="1166.3" y="1123.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1169.3" y="1134.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.07%)</title><rect x="1166.3" y="1107.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1169.3" y="1118.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.04%)</title><rect x="1167.2" y="1187.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.2" y="1198.0"></text>
</g>
<g>
<title>CompileQueue::get() (13 samples, 0.47%)</title><rect x="1167.6" y="1203.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.6" y="1214.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (13 samples, 0.47%)</title><rect x="1167.6" y="1187.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.6" y="1198.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (13 samples, 0.47%)</title><rect x="1167.6" y="1171.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.6" y="1182.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (13 samples, 0.47%)</title><rect x="1167.6" y="1155.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.6" y="1166.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.44%)</title><rect x="1167.6" y="1139.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1170.6" y="1150.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.04%)</title><rect x="1172.8" y="1139.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1175.8" y="1150.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (7 samples, 0.26%)</title><rect x="1173.2" y="1219.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.2" y="1230.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (5 samples, 0.18%)</title><rect x="1173.2" y="1203.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="1214.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (5 samples, 0.18%)</title><rect x="1173.2" y="1187.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.2" y="1198.0"></text>
</g>
<g>
<title>JvmtiCompiledMethodLoadEventMark::JvmtiCompiledMethodLoadEventMark(JavaThread*, nmethod*, void*) (1 samples, 0.04%)</title><rect x="1173.7" y="1171.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="1182.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.04%)</title><rect x="1173.7" y="1155.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="1166.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.04%)</title><rect x="1173.7" y="1139.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.04%)</title><rect x="1173.7" y="1123.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="1134.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1173.7" y="1107.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1176.7" y="1118.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (3 samples, 0.11%)</title><rect x="1174.1" y="1171.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1177.1" y="1182.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (2 samples, 0.07%)</title><rect x="1174.1" y="1155.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.1" y="1166.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.04%)</title><rect x="1174.1" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.1" y="1150.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.04%)</title><rect x="1174.1" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.1" y="1134.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(CompiledMethod const*, int, int, bool, bool, bool) (1 samples, 0.04%)</title><rect x="1174.5" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.04%)</title><rect x="1174.5" y="1123.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.5" y="1134.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.04%)</title><rect x="1174.9" y="1155.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="1174.9" y="1139.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="1150.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.07%)</title><rect x="1175.4" y="1203.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="1214.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.07%)</title><rect x="1175.4" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.4" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.07%)</title><rect x="1175.4" y="1171.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="1182.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1175.4" y="1155.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1178.4" y="1166.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="1175.8" y="1155.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1178.8" y="1166.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.04%)</title><rect x="1175.8" y="1139.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1178.8" y="1150.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1176.2" y="1219.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1179.2" y="1230.0"></text>
</g>
<g>
<title>AttachListener::pd_init() (1 samples, 0.04%)</title><rect x="1176.2" y="1203.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.2" y="1214.0"></text>
</g>
<g>
<title>BsdAttachListener::init() (1 samples, 0.04%)</title><rect x="1176.2" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.2" y="1198.0"></text>
</g>
<g>
<title>atexit (1 samples, 0.04%)</title><rect x="1176.2" y="1171.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1179.2" y="1182.0"></text>
</g>
<g>
<title>_dispatch_io_fds (1 samples, 0.04%)</title><rect x="1176.2" y="1155.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1179.2" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1176.2" y="1139.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1179.2" y="1150.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="1176.2" y="1123.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1179.2" y="1134.0"></text>
</g>
<g>
<title>nmethodLocker::unlock_nmethod(CompiledMethod*) (1 samples, 0.04%)</title><rect x="1176.7" y="1219.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1230.0"></text>
</g>
<g>
<title>VMThread::run() (10 samples, 0.36%)</title><rect x="1177.1" y="1251.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="1262.0"></text>
</g>
<g>
<title>VMThread::loop() (10 samples, 0.36%)</title><rect x="1177.1" y="1235.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="1246.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.11%)</title><rect x="1177.1" y="1219.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="1230.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="1177.5" y="1203.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.5" y="1214.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1177.5" y="1187.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1198.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1177.5" y="1171.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1182.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.04%)</title><rect x="1177.5" y="1155.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1180.5" y="1166.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (1 samples, 0.04%)</title><rect x="1178.0" y="1203.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1181.0" y="1214.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (7 samples, 0.26%)</title><rect x="1178.4" y="1219.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1230.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (7 samples, 0.26%)</title><rect x="1178.4" y="1203.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="1214.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (7 samples, 0.26%)</title><rect x="1178.4" y="1187.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (7 samples, 0.26%)</title><rect x="1178.4" y="1171.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (3 samples, 0.11%)</title><rect x="1178.4" y="1155.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="1166.0"></text>
</g>
<g>
<title>G1RootProcessor::G1RootProcessor(G1CollectedHeap*, unsigned int) (1 samples, 0.04%)</title><rect x="1178.4" y="1139.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="1150.0"></text>
</g>
<g>
<title>_platform_strncpy (1 samples, 0.04%)</title><rect x="1178.4" y="1123.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1181.4" y="1134.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1178.8" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="1150.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1178.8" y="1123.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="1134.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.04%)</title><rect x="1178.8" y="1107.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1181.8" y="1118.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.04%)</title><rect x="1179.2" y="1139.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.04%)</title><rect x="1179.7" y="1155.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="1166.0"></text>
</g>
<g>
<title>void WeakProcessor::weak_oops_do&lt;G1STWIsAliveClosure, G1KeepAliveClosure&gt;(WorkGang*, G1STWIsAliveClosure*, G1KeepAliveClosure*, WeakProcessorPhaseTimes*) (1 samples, 0.04%)</title><rect x="1179.7" y="1139.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="1150.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1179.7" y="1123.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1134.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.04%)</title><rect x="1179.7" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="1118.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.04%)</title><rect x="1179.7" y="1091.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1182.7" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::pre_evacuate_collection_set() (1 samples, 0.04%)</title><rect x="1180.1" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="1166.0"></text>
</g>
<g>
<title>G1RemSetScanState::reset() (1 samples, 0.04%)</title><rect x="1180.1" y="1139.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="1150.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="1180.1" y="1123.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_cset() (1 samples, 0.04%)</title><rect x="1180.5" y="1155.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.04%)</title><rect x="1180.5" y="1139.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.04%)</title><rect x="1181.0" y="1155.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1166.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.04%)</title><rect x="1181.0" y="1139.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="1150.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.04%)</title><rect x="1181.0" y="1123.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="1134.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.04%)</title><rect x="1181.0" y="1107.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="1118.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.04%)</title><rect x="1181.0" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="1102.0"></text>
</g>
<g>
<title>void QuickSort::inner_sort&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.04%)</title><rect x="1181.0" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="1086.0"></text>
</g>
<g>
<title>unsigned long QuickSort::partition&lt;true, unsigned int, int (*)(unsigned int, unsigned int)&gt;(unsigned int*, unsigned long, unsigned long, int (*)(unsigned int, unsigned int)) (1 samples, 0.04%)</title><rect x="1181.0" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="1070.0"></text>
</g>
<g>
<title>WatcherThread::run() (20 samples, 0.73%)</title><rect x="1181.4" y="1251.0" width="8.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="1262.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.04%)</title><rect x="1181.4" y="1235.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="1246.0"></text>
</g>
<g>
<title>ChunkPool::free_all_but(unsigned long) (1 samples, 0.04%)</title><rect x="1181.4" y="1219.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1230.0"></text>
</g>
<g>
<title>free_small (1 samples, 0.04%)</title><rect x="1181.4" y="1203.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1184.4" y="1214.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.04%)</title><rect x="1181.4" y="1187.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1184.4" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (19 samples, 0.69%)</title><rect x="1181.8" y="1235.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (19 samples, 0.69%)</title><rect x="1181.8" y="1219.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (19 samples, 0.69%)</title><rect x="1181.8" y="1203.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.04%)</title><rect x="1181.8" y="1187.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (18 samples, 0.66%)</title><rect x="1182.3" y="1187.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="1198.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.66%)</title><rect x="1182.3" y="1171.0" width="7.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1185.3" y="1182.0"></text>
</g>
</g>
</svg>

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (584 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>MainKt.main (9 samples, 1.54%)</title><rect x="10.0" y="995.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>MainKt.main (9 samples, 1.54%)</title><rect x="10.0" y="979.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>StandardSerializer.&lt;init&gt; (9 samples, 1.54%)</title><rect x="10.0" y="963.0" width="18.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="10.0" y="947.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="10.0" y="931.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="10.0" y="915.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="10.0" y="899.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="10.0" y="883.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="10.0" y="867.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.17%)</title><rect x="10.0" y="851.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.getResource (1 samples, 0.17%)</title><rect x="10.0" y="835.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.17%)</title><rect x="10.0" y="819.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.17%)</title><rect x="10.0" y="803.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>sun/net/www/protocol/file/Handler.parseURL (1 samples, 0.17%)</title><rect x="10.0" y="787.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/net/URLStreamHandler.parseURL (1 samples, 0.17%)</title><rect x="10.0" y="771.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.17%)</title><rect x="10.0" y="755.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.17%)</title><rect x="10.0" y="739.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.17%)</title><rect x="10.0" y="723.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (6 samples, 1.03%)</title><rect x="12.0" y="947.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.0" y="958.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson$Settings.includeServiceLoader (1 samples, 0.17%)</title><rect x="12.0" y="931.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.0" y="942.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson$Settings.includeServiceLoader (1 samples, 0.17%)</title><rect x="12.0" y="915.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.0" y="926.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$3.hasNext (1 samples, 0.17%)</title><rect x="12.0" y="899.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.0" y="910.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$2.hasNext (1 samples, 0.17%)</title><rect x="12.0" y="883.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="894.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$LazyClassPathLookupIterator.hasNext (1 samples, 0.17%)</title><rect x="12.0" y="867.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.0" y="878.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$LazyClassPathLookupIterator.hasNextService (1 samples, 0.17%)</title><rect x="12.0" y="851.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>java/util/ServiceLoader$LazyClassPathLookupIterator.nextProviderClass (1 samples, 0.17%)</title><rect x="12.0" y="835.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.getResources (1 samples, 0.17%)</title><rect x="12.0" y="819.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.getResources (1 samples, 0.17%)</title><rect x="12.0" y="803.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/loader/BootLoader.findResources (1 samples, 0.17%)</title><rect x="12.0" y="787.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="798.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findResources (1 samples, 0.17%)</title><rect x="12.0" y="771.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findMiscResource (1 samples, 0.17%)</title><rect x="12.0" y="755.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="766.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="12.0" y="739.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.0" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="12.0" y="723.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader$2.run (1 samples, 0.17%)</title><rect x="12.0" y="707.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader$2.run (1 samples, 0.17%)</title><rect x="12.0" y="691.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/module/SystemModuleFinders$SystemModuleReader.find (1 samples, 0.17%)</title><rect x="12.0" y="675.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/module/SystemModuleFinders$SystemModuleReader.findImageLocation (1 samples, 0.17%)</title><rect x="12.0" y="659.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/module/SystemModuleFinders$SystemImage.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="12.0" y="643.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReaderFactory.getImageReader (1 samples, 0.17%)</title><rect x="12.0" y="627.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReaderFactory.get (1 samples, 0.17%)</title><rect x="12.0" y="611.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (1 samples, 0.17%)</title><rect x="12.0" y="595.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReaderFactory$1.apply (1 samples, 0.17%)</title><rect x="12.0" y="579.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReaderFactory$1.apply (1 samples, 0.17%)</title><rect x="12.0" y="563.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReader.open (1 samples, 0.17%)</title><rect x="12.0" y="547.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReader.open (1 samples, 0.17%)</title><rect x="12.0" y="531.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReader$SharedImageReader.open (1 samples, 0.17%)</title><rect x="12.0" y="515.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/jimage/ImageReader$SharedImageReader.&lt;init&gt; (1 samples, 0.17%)</title><rect x="12.0" y="499.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/jimage/BasicImageReader.&lt;init&gt; (1 samples, 0.17%)</title><rect x="12.0" y="483.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="494.0"></text>
</g>
<g>
<title>jdk/internal/jimage/NativeImageBuffer.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="12.0" y="467.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="15.0" y="478.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="12.0" y="451.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="462.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="12.0" y="435.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/jimage/NativeImageBuffer$1.run (1 samples, 0.17%)</title><rect x="12.0" y="419.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/jimage/NativeImageBuffer$1.run (1 samples, 0.17%)</title><rect x="12.0" y="403.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="414.0"></text>
</g>
<g>
<title>java/lang/System.loadLibrary (1 samples, 0.17%)</title><rect x="12.0" y="387.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.0" y="398.0"></text>
</g>
<g>
<title>java/lang/Runtime.loadLibrary0 (1 samples, 0.17%)</title><rect x="12.0" y="371.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadLibrary (1 samples, 0.17%)</title><rect x="12.0" y="355.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.0" y="366.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadLibrary0 (1 samples, 0.17%)</title><rect x="12.0" y="339.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.0" y="350.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.loadLibrary (1 samples, 0.17%)</title><rect x="12.0" y="323.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="334.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.load (1 samples, 0.17%)</title><rect x="12.0" y="307.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.0" y="318.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.load0 (1 samples, 0.17%)</title><rect x="12.0" y="291.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="302.0"></text>
</g>
<g>
<title>Profiler::NativeLibraryLoadTrap(JNIEnv_*, _jobject*, _jstring*, unsigned char) (1 samples, 0.17%)</title><rect x="12.0" y="275.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.0" y="286.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_load0 (1 samples, 0.17%)</title><rect x="12.0" y="259.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="15.0" y="270.0"></text>
</g>
<g>
<title>JVM_LoadLibrary (1 samples, 0.17%)</title><rect x="12.0" y="243.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="15.0" y="254.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.17%)</title><rect x="12.0" y="227.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.0" y="238.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.17%)</title><rect x="12.0" y="211.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.0" y="222.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="12.0" y="195.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="15.0" y="206.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="12.0" y="179.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="15.0" y="190.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="12.0" y="163.0" width="2.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="15.0" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (5 samples, 0.86%)</title><rect x="14.0" y="931.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.0" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="14.0" y="915.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.0" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="14.0" y="899.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="17.0" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.17%)</title><rect x="14.0" y="883.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.0" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.17%)</title><rect x="14.0" y="867.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.17%)</title><rect x="14.0" y="851.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="14.0" y="835.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="17.0" y="846.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, bool, Thread*) (1 samples, 0.17%)</title><rect x="14.0" y="819.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.0" y="830.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.17%)</title><rect x="14.0" y="803.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.0" y="814.0"></text>
</g>
<g>
<title>ClassVerifier::verify_method(methodHandle const&amp;, Thread*) (1 samples, 0.17%)</title><rect x="14.0" y="787.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.0" y="798.0"></text>
</g>
<g>
<title>StackMapTable::check_jump_target(StackMapFrame*, int, Thread*) const (1 samples, 0.17%)</title><rect x="14.0" y="771.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.0" y="782.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.&lt;clinit&gt; (2 samples, 0.34%)</title><rect x="16.1" y="915.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.34%)</title><rect x="16.1" y="899.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.34%)</title><rect x="16.1" y="883.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.34%)</title><rect x="16.1" y="867.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="19.1" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.34%)</title><rect x="16.1" y="851.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.1" y="862.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.34%)</title><rect x="16.1" y="835.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="846.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="16.1" y="819.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.1" y="830.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.17%)</title><rect x="18.1" y="819.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.1" y="830.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getResource (1 samples, 0.17%)</title><rect x="18.1" y="803.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.1" y="814.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.checkResource (1 samples, 0.17%)</title><rect x="18.1" y="787.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.1" y="798.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.17%)</title><rect x="18.1" y="771.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.1" y="782.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.17%)</title><rect x="18.1" y="755.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.1" y="766.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.34%)</title><rect x="20.1" y="915.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.1" y="926.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.34%)</title><rect x="20.1" y="899.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.34%)</title><rect x="20.1" y="883.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.1" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.34%)</title><rect x="20.1" y="867.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.1" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="20.1" y="851.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="862.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="20.1" y="835.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.1" y="846.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.17%)</title><rect x="20.1" y="819.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.17%)</title><rect x="20.1" y="803.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.17%)</title><rect x="20.1" y="787.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.1" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.17%)</title><rect x="20.1" y="771.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="23.1" y="782.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.17%)</title><rect x="20.1" y="755.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.1" y="766.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.17%)</title><rect x="20.1" y="739.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="23.1" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.17%)</title><rect x="20.1" y="723.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="23.1" y="734.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.17%)</title><rect x="20.1" y="707.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="23.1" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.17%)</title><rect x="20.1" y="691.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.1" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.17%)</title><rect x="20.1" y="675.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="23.1" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.17%)</title><rect x="20.1" y="659.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="23.1" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool_entries(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.17%)</title><rect x="20.1" y="643.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.1" y="654.0"></text>
</g>
<g>
<title>SymbolTable::do_lookup(char const*, int, unsigned long) (1 samples, 0.17%)</title><rect x="20.1" y="627.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="23.1" y="638.0"></text>
</g>
<g>
<title>bool ConcurrentHashTable&lt;Symbol*, SymbolTableConfig, (MemoryType)9&gt;::get&lt;SymbolTableLookup, SymbolTableGet&gt;(Thread*, SymbolTableLookup&amp;, SymbolTableGet&amp;, bool*) (1 samples, 0.17%)</title><rect x="20.1" y="611.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="23.1" y="622.0"></text>
</g>
<g>
<title>Symbol** ConcurrentHashTable&lt;Symbol*, SymbolTableConfig, (MemoryType)9&gt;::internal_get&lt;SymbolTableLookup&gt;(Thread*, SymbolTableLookup&amp;, bool*) (1 samples, 0.17%)</title><rect x="20.1" y="595.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="23.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="22.1" y="851.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.1" y="862.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="22.1" y="835.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findLoadedClass (1 samples, 0.17%)</title><rect x="22.1" y="819.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.34%)</title><rect x="24.1" y="947.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.1" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.34%)</title><rect x="24.1" y="931.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.1" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.34%)</title><rect x="24.1" y="915.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.1" y="926.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.34%)</title><rect x="24.1" y="899.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.1" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.34%)</title><rect x="24.1" y="883.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.1" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="24.1" y="867.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.1" y="878.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.17%)</title><rect x="24.1" y="851.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.17%)</title><rect x="24.1" y="835.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.17%)</title><rect x="24.1" y="819.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.1" y="830.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_defineClass1 (1 samples, 0.17%)</title><rect x="24.1" y="803.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="27.1" y="814.0"></text>
</g>
<g>
<title>JVM_DefineClassWithSource (1 samples, 0.17%)</title><rect x="24.1" y="787.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="27.1" y="798.0"></text>
</g>
<g>
<title>jvm_define_class_common(JNIEnv_*, char const*, _jobject*, signed char const*, int, _jobject*, char const*, Thread*) (1 samples, 0.17%)</title><rect x="24.1" y="771.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="27.1" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_from_stream(Symbol*, Handle, Handle, ClassFileStream*, Thread*) (1 samples, 0.17%)</title><rect x="24.1" y="755.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="27.1" y="766.0"></text>
</g>
<g>
<title>KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, Thread*) (1 samples, 0.17%)</title><rect x="24.1" y="739.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="27.1" y="750.0"></text>
</g>
<g>
<title>ClassFileParser::ClassFileParser(ClassFileStream*, Symbol*, ClassLoaderData*, Handle, InstanceKlass const*, GrowableArray&lt;Handle&gt;*, ClassFileParser::Publicity, Thread*) (1 samples, 0.17%)</title><rect x="24.1" y="723.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.1" y="734.0"></text>
</g>
<g>
<title>ClassFileParser::parse_stream(ClassFileStream const*, Thread*) (1 samples, 0.17%)</title><rect x="24.1" y="707.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="27.1" y="718.0"></text>
</g>
<g>
<title>ClassFileParser::parse_constant_pool(ClassFileStream const*, ConstantPool*, int, Thread*) (1 samples, 0.17%)</title><rect x="24.1" y="691.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.1" y="702.0"></text>
</g>
<g>
<title>ClassFileParser::verify_legal_field_signature(Symbol const*, Symbol const*, Thread*) const (1 samples, 0.17%)</title><rect x="24.1" y="675.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="27.1" y="686.0"></text>
</g>
<g>
<title>ClassFileParser::skip_over_field_signature(char const*, bool, unsigned int, Thread*) const (1 samples, 0.17%)</title><rect x="24.1" y="659.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="27.1" y="670.0"></text>
</g>
<g>
<title>ClassFileParser::verify_unqualified_name(char const*, unsigned int, int) (1 samples, 0.17%)</title><rect x="24.1" y="643.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="27.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.17%)</title><rect x="26.2" y="867.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.2" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getResource (1 samples, 0.17%)</title><rect x="26.2" y="851.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.2" y="862.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getJarEntry (1 samples, 0.17%)</title><rect x="26.2" y="835.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.2" y="846.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getEntry (1 samples, 0.17%)</title><rect x="26.2" y="819.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.2" y="830.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getEntry0 (1 samples, 0.17%)</title><rect x="26.2" y="803.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.2" y="814.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$1.getEntry (1 samples, 0.17%)</title><rect x="26.2" y="787.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.2" y="798.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.getEntry (1 samples, 0.17%)</title><rect x="26.2" y="771.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.2" y="782.0"></text>
</g>
<g>
<title>java/util/zip/ZipCoder$UTF8.getBytes (1 samples, 0.17%)</title><rect x="26.2" y="755.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.2" y="766.0"></text>
</g>
<g>
<title>java/lang/System$2.getBytesUTF8NoRepl (1 samples, 0.17%)</title><rect x="26.2" y="739.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.getBytesUTF8NoRepl (1 samples, 0.17%)</title><rect x="26.2" y="723.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.2" y="734.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.17%)</title><rect x="26.2" y="707.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringCoding.hasNegatives (1 samples, 0.17%)</title><rect x="26.2" y="691.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.2" y="702.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (5 samples, 0.86%)</title><rect x="28.2" y="995.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="31.2" y="1006.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.17%)</title><rect x="28.2" y="979.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="31.2" y="990.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.17%)</title><rect x="28.2" y="963.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="31.2" y="974.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.17%)</title><rect x="28.2" y="947.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="31.2" y="958.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (4 samples, 0.68%)</title><rect x="30.2" y="979.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="33.2" y="990.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (3 samples, 0.51%)</title><rect x="30.2" y="963.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="33.2" y="974.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (3 samples, 0.51%)</title><rect x="30.2" y="947.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="33.2" y="958.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (1 samples, 0.17%)</title><rect x="30.2" y="931.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="33.2" y="942.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.17%)</title><rect x="30.2" y="915.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="33.2" y="926.0"></text>
</g>
<g>
<title>Method::is_getter() const (1 samples, 0.17%)</title><rect x="30.2" y="899.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.2" y="910.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::loop_predicate(int, int, CompLevel, Method*) (2 samples, 0.34%)</title><rect x="32.2" y="931.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="35.2" y="942.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.17%)</title><rect x="36.3" y="963.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="39.3" y="974.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.17%)</title><rect x="36.3" y="947.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="39.3" y="958.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.17%)</title><rect x="36.3" y="931.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="39.3" y="942.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.17%)</title><rect x="36.3" y="915.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="39.3" y="926.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.17%)</title><rect x="36.3" y="899.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="39.3" y="910.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.17%)</title><rect x="36.3" y="883.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="39.3" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.17%)</title><rect x="36.3" y="867.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="39.3" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="36.3" y="851.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="39.3" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.51%)</title><rect x="38.3" y="995.0" width="6.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="41.3" y="1006.0"></text>
</g>
<g>
<title>Interpreter (2 samples, 0.34%)</title><rect x="38.3" y="979.0" width="4.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="41.3" y="990.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (1 samples, 0.17%)</title><rect x="42.3" y="979.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="45.3" y="990.0"></text>
</g>
<g>
<title>com/intellij/rt/execution/application/AppMainV2$1.run (2 samples, 0.34%)</title><rect x="44.3" y="995.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.3" y="1006.0"></text>
</g>
<g>
<title>java/net/Socket.&lt;init&gt; (2 samples, 0.34%)</title><rect x="44.3" y="979.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.3" y="990.0"></text>
</g>
<g>
<title>java/net/Socket.&lt;init&gt; (2 samples, 0.34%)</title><rect x="44.3" y="963.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.3" y="974.0"></text>
</g>
<g>
<title>java/net/Socket.connect (1 samples, 0.17%)</title><rect x="44.3" y="947.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.3" y="958.0"></text>
</g>
<g>
<title>java/net/Socket.connect (1 samples, 0.17%)</title><rect x="44.3" y="931.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.3" y="942.0"></text>
</g>
<g>
<title>java/net/SocksSocketImpl.connect (1 samples, 0.17%)</title><rect x="44.3" y="915.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.3" y="926.0"></text>
</g>
<g>
<title>java/net/AbstractPlainSocketImpl.connect (1 samples, 0.17%)</title><rect x="44.3" y="899.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.3" y="910.0"></text>
</g>
<g>
<title>java/net/AbstractPlainSocketImpl.connectToAddress (1 samples, 0.17%)</title><rect x="44.3" y="883.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.3" y="894.0"></text>
</g>
<g>
<title>java/net/AbstractPlainSocketImpl.doConnect (1 samples, 0.17%)</title><rect x="44.3" y="867.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="878.0"></text>
</g>
<g>
<title>java/net/PlainSocketImpl.socketConnect (1 samples, 0.17%)</title><rect x="44.3" y="851.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.3" y="862.0"></text>
</g>
<g>
<title>java/net/NetworkInterface.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="44.3" y="835.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.3" y="846.0"></text>
</g>
<g>
<title>java/net/DefaultInterface.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="44.3" y="819.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.3" y="830.0"></text>
</g>
<g>
<title>java/net/DefaultInterface.chooseDefaultInterface (1 samples, 0.17%)</title><rect x="44.3" y="803.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.3" y="814.0"></text>
</g>
<g>
<title>java/net/NetworkInterface.isLoopback (1 samples, 0.17%)</title><rect x="44.3" y="787.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.3" y="798.0"></text>
</g>
<g>
<title>java/net/NetworkInterface.isLoopback0 (1 samples, 0.17%)</title><rect x="44.3" y="771.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.3" y="782.0"></text>
</g>
<g>
<title>Java_java_net_NetworkInterface_isLoopback0 (1 samples, 0.17%)</title><rect x="44.3" y="755.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="47.3" y="766.0"></text>
</g>
<g>
<title>getFlags0 (1 samples, 0.17%)</title><rect x="44.3" y="739.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="47.3" y="750.0"></text>
</g>
<g>
<title>getFlags (1 samples, 0.17%)</title><rect x="44.3" y="723.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="47.3" y="734.0"></text>
</g>
<g>
<title>__ioctl (1 samples, 0.17%)</title><rect x="44.3" y="707.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="47.3" y="718.0"></text>
</g>
<g>
<title>java/net/Socket.setImpl (1 samples, 0.17%)</title><rect x="46.4" y="947.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.4" y="958.0"></text>
</g>
<g>
<title>java/net/PlainSocketImpl.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="46.4" y="931.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.4" y="942.0"></text>
</g>
<g>
<title>sun/net/ext/ExtendedSocketOptions.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="46.4" y="915.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.4" y="926.0"></text>
</g>
<g>
<title>java/lang/Class.forName (1 samples, 0.17%)</title><rect x="46.4" y="899.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.4" y="910.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (1 samples, 0.17%)</title><rect x="46.4" y="883.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.4" y="894.0"></text>
</g>
<g>
<title>jdk/net/ExtendedSocketOptions.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="46.4" y="867.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.4" y="878.0"></text>
</g>
<g>
<title>jdk/net/ExtendedSocketOptions$PlatformSocketOptions.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="46.4" y="851.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.4" y="862.0"></text>
</g>
<g>
<title>jdk/net/ExtendedSocketOptions$PlatformSocketOptions.create (1 samples, 0.17%)</title><rect x="46.4" y="835.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.4" y="846.0"></text>
</g>
<g>
<title>jdk/net/ExtendedSocketOptions$PlatformSocketOptions.newInstance (1 samples, 0.17%)</title><rect x="46.4" y="819.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Class.forName (1 samples, 0.17%)</title><rect x="46.4" y="803.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="49.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (1 samples, 0.17%)</title><rect x="46.4" y="787.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.4" y="798.0"></text>
</g>
<g>
<title>jdk/net/MacOSXSocketOptions.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="46.4" y="771.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.4" y="782.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="46.4" y="755.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="49.4" y="766.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="46.4" y="739.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.4" y="750.0"></text>
</g>
<g>
<title>jdk/net/MacOSXSocketOptions$$Lambda$14/1162371649.run (1 samples, 0.17%)</title><rect x="46.4" y="723.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.4" y="734.0"></text>
</g>
<g>
<title>jdk/net/MacOSXSocketOptions.lambda$static$0 (1 samples, 0.17%)</title><rect x="46.4" y="707.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.4" y="718.0"></text>
</g>
<g>
<title>java/lang/System.loadLibrary (1 samples, 0.17%)</title><rect x="46.4" y="691.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Runtime.loadLibrary0 (1 samples, 0.17%)</title><rect x="46.4" y="675.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadLibrary (1 samples, 0.17%)</title><rect x="46.4" y="659.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadLibrary0 (1 samples, 0.17%)</title><rect x="46.4" y="643.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.loadLibrary (1 samples, 0.17%)</title><rect x="46.4" y="627.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.load (1 samples, 0.17%)</title><rect x="46.4" y="611.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="49.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader$NativeLibrary.load0 (1 samples, 0.17%)</title><rect x="46.4" y="595.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.4" y="606.0"></text>
</g>
<g>
<title>Profiler::NativeLibraryLoadTrap(JNIEnv_*, _jobject*, _jstring*, unsigned char) (1 samples, 0.17%)</title><rect x="46.4" y="579.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="49.4" y="590.0"></text>
</g>
<g>
<title>Java_java_lang_ClassLoader_00024NativeLibrary_load0 (1 samples, 0.17%)</title><rect x="46.4" y="563.0" width="2.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="49.4" y="574.0"></text>
</g>
<g>
<title>JVM_LoadLibrary (1 samples, 0.17%)</title><rect x="46.4" y="547.0" width="2.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="49.4" y="558.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.17%)</title><rect x="46.4" y="531.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="49.4" y="542.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.17%)</title><rect x="46.4" y="515.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="49.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="499.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="49.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="483.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="49.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="467.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="49.4" y="478.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="451.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="49.4" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="435.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="49.4" y="446.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="419.0" width="2.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="49.4" y="430.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="403.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="49.4" y="414.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="387.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="49.4" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="371.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="49.4" y="382.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="355.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="49.4" y="366.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="46.4" y="339.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="49.4" y="350.0"></text>
</g>
<g>
<title>auth_errlist (1 samples, 0.17%)</title><rect x="46.4" y="323.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="49.4" y="334.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="48.4" y="995.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.4" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="48.4" y="979.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.4" y="990.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="48.4" y="963.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.4" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="48.4" y="947.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="51.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findLoadedClass (1 samples, 0.17%)</title><rect x="48.4" y="931.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findLoadedClass0 (1 samples, 0.17%)</title><rect x="48.4" y="915.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.4" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::prepare_native_call(JavaThread*, Method*) (1 samples, 0.17%)</title><rect x="48.4" y="899.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="51.4" y="910.0"></text>
</g>
<g>
<title>NativeLookup::lookup(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.17%)</title><rect x="48.4" y="883.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="51.4" y="894.0"></text>
</g>
<g>
<title>NativeLookup::lookup_base(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.17%)</title><rect x="48.4" y="867.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="51.4" y="878.0"></text>
</g>
<g>
<title>NativeLookup::lookup_entry(methodHandle const&amp;, bool&amp;, Thread*) (1 samples, 0.17%)</title><rect x="48.4" y="851.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="51.4" y="862.0"></text>
</g>
<g>
<title>NativeLookup::lookup_style(methodHandle const&amp;, char*, char const*, int, bool, bool&amp;, Thread*) (1 samples, 0.17%)</title><rect x="48.4" y="835.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="51.4" y="846.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.17%)</title><rect x="48.4" y="819.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="51.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="48.4" y="803.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="51.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="48.4" y="787.0" width="2.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="51.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="48.4" y="771.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="51.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="48.4" y="755.0" width="2.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="51.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="48.4" y="739.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="51.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="48.4" y="723.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="51.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.17%)</title><rect x="48.4" y="707.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="51.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (146 samples, 25.00%)</title><rect x="50.4" y="995.0" width="295.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.4" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (146 samples, 25.00%)</title><rect x="50.4" y="979.0" width="295.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="53.4" y="990.0">java/util/concurrent/ThreadPoolExecutor$..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (146 samples, 25.00%)</title><rect x="50.4" y="963.0" width="295.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.4" y="974.0">java/util/concurrent/ThreadPoolExecutor...</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (142 samples, 24.32%)</title><rect x="50.4" y="947.0" width="286.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.4" y="958.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (141 samples, 24.14%)</title><rect x="50.4" y="931.0" width="284.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.4" y="942.0">java/util/concurrent/Executors$Runnabl..</text>
</g>
<g>
<title>table.StandardSSTableManager$addTableAsync$1.run (141 samples, 24.14%)</title><rect x="50.4" y="915.0" width="284.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.4" y="926.0">table.StandardSSTableManager$addTableAsync$1..</text>
</g>
<g>
<title>table.StandardSSTableManager.addTable (141 samples, 24.14%)</title><rect x="50.4" y="899.0" width="284.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.4" y="910.0">table.StandardSSTableManager.addTable</text>
</g>
<g>
<title>table.StandardSSTableManager.nextTableFile (14 samples, 2.40%)</title><rect x="50.4" y="883.0" width="28.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.4" y="894.0">St..</text>
</g>
<g>
<title>java/io/File.list (13 samples, 2.23%)</title><rect x="50.4" y="867.0" width="26.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.4" y="878.0">j..</text>
</g>
<g>
<title>table.StandardSSTableManager$nextTableFile$1$1.accept (1 samples, 0.17%)</title><rect x="52.4" y="851.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="835.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.4" y="846.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="819.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="803.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="52.4" y="787.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="52.4" y="771.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.4" y="782.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="755.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.4" y="766.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="739.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.4" y="750.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="723.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.17%)</title><rect x="52.4" y="707.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="691.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="675.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="659.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.4" y="670.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="52.4" y="643.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="52.4" y="627.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="611.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.4" y="622.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="595.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="579.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.17%)</title><rect x="52.4" y="563.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="547.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="531.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="515.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.4" y="526.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="52.4" y="499.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="52.4" y="483.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="467.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.4" y="478.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="451.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.4" y="462.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="435.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.4" y="446.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.17%)</title><rect x="52.4" y="419.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.4" y="430.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="403.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="387.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.4" y="398.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="371.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="52.4" y="355.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="52.4" y="339.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="323.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.4" y="334.0"></text>
</g>
<g>
<title>java/security/SecureClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="307.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.4" y="318.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="291.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.4" y="302.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.defineClass1 (1 samples, 0.17%)</title><rect x="52.4" y="275.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.4" y="286.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="259.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="243.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="52.4" y="227.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.4" y="238.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="52.4" y="211.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="52.4" y="195.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="52.4" y="179.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.17%)</title><rect x="52.4" y="163.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.4" y="174.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.17%)</title><rect x="52.4" y="147.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.4" y="158.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInflaterInputStream.fill (1 samples, 0.17%)</title><rect x="52.4" y="131.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.4" y="142.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$ZipFileInputStream.read (1 samples, 0.17%)</title><rect x="52.4" y="115.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.4" y="126.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.readAt (1 samples, 0.17%)</title><rect x="52.4" y="99.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.4" y="110.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.read (1 samples, 0.17%)</title><rect x="52.4" y="83.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.4" y="94.0"></text>
</g>
<g>
<title>java/io/RandomAccessFile.readBytes (1 samples, 0.17%)</title><rect x="52.4" y="67.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.4" y="78.0"></text>
</g>
<g>
<title>readBytes (1 samples, 0.17%)</title><rect x="52.4" y="51.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="55.4" y="62.0"></text>
</g>
<g>
<title>handleRead (1 samples, 0.17%)</title><rect x="52.4" y="35.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="55.4" y="46.0"></text>
</g>
<g>
<title>java/io/File.list (11 samples, 1.88%)</title><rect x="54.5" y="851.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="57.5" y="862.0">j..</text>
</g>
<g>
<title>java/io/UnixFileSystem.list (11 samples, 1.88%)</title><rect x="54.5" y="835.0" width="22.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.5" y="846.0">j..</text>
</g>
<g>
<title>Java_java_io_UnixFileSystem_list (11 samples, 1.88%)</title><rect x="54.5" y="819.0" width="22.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="57.5" y="830.0">J..</text>
</g>
<g>
<title>JNU_CopyObjectArray (2 samples, 0.34%)</title><rect x="54.5" y="803.0" width="4.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="57.5" y="814.0"></text>
</g>
<g>
<title>jni_GetObjectArrayElement (1 samples, 0.17%)</title><rect x="54.5" y="787.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="57.5" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.17%)</title><rect x="54.5" y="771.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="57.5" y="782.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.17%)</title><rect x="54.5" y="755.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="57.5" y="766.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.17%)</title><rect x="54.5" y="739.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="57.5" y="750.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.17%)</title><rect x="54.5" y="723.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="57.5" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.17%)</title><rect x="54.5" y="707.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="57.5" y="718.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (1 samples, 0.17%)</title><rect x="56.5" y="787.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="59.5" y="798.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.17%)</title><rect x="56.5" y="771.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="59.5" y="782.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.17%)</title><rect x="56.5" y="755.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="59.5" y="766.0"></text>
</g>
<g>
<title>jni_SetObjectArrayElement (1 samples, 0.17%)</title><rect x="58.5" y="803.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="61.5" y="814.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.17%)</title><rect x="58.5" y="787.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="61.5" y="798.0"></text>
</g>
<g>
<title>newStringPlatform (3 samples, 0.51%)</title><rect x="60.5" y="803.0" width="6.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="63.5" y="814.0"></text>
</g>
<g>
<title>CFStringGetCString (1 samples, 0.17%)</title><rect x="60.5" y="787.0" width="2.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="63.5" y="798.0"></text>
</g>
<g>
<title>__CFStrConvertBytesToUnicode (1 samples, 0.17%)</title><rect x="60.5" y="771.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="63.5" y="782.0"></text>
</g>
<g>
<title>_CFRelease (2 samples, 0.34%)</title><rect x="62.5" y="787.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="65.5" y="798.0"></text>
</g>
<g>
<title>__CFStringDeallocate (1 samples, 0.17%)</title><rect x="62.5" y="771.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="65.5" y="782.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.17%)</title><rect x="62.5" y="755.0" width="2.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="65.5" y="766.0"></text>
</g>
<g>
<title>malloc_zone_free (1 samples, 0.17%)</title><rect x="64.6" y="771.0" width="2.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="67.6" y="782.0"></text>
</g>
<g>
<title>readdir$INODE64 (5 samples, 0.86%)</title><rect x="66.6" y="803.0" width="10.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="69.6" y="814.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.86%)</title><rect x="66.6" y="787.0" width="10.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="69.6" y="798.0"></text>
</g>
<g>
<title>kotlin/text/StringsKt__StringsKt.removePrefix (1 samples, 0.17%)</title><rect x="76.7" y="867.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.7" y="878.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.17%)</title><rect x="76.7" y="851.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.7" y="862.0"></text>
</g>
<g>
<title>StandardSerializer.serialize (127 samples, 21.75%)</title><rect x="78.7" y="883.0" width="256.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.7" y="894.0">StandardSerializer.serialize</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (123 samples, 21.06%)</title><rect x="78.7" y="867.0" width="248.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.7" y="878.0">com/dslplatform/json/DslJson.seri..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (123 samples, 21.06%)</title><rect x="78.7" y="851.0" width="248.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.7" y="862.0">com/dslplatform/json/DslJson.seri..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (123 samples, 21.06%)</title><rect x="78.7" y="835.0" width="248.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.7" y="846.0">com/dslplatform/json/DslJson$3.wr..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (123 samples, 21.06%)</title><rect x="78.7" y="819.0" width="248.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.7" y="830.0">com/dslplatform/json/DslJson$3.wr..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (123 samples, 21.06%)</title><rect x="78.7" y="803.0" width="248.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.7" y="814.0">com/dslplatform/json/DslJson.seri..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (84 samples, 14.38%)</title><rect x="82.7" y="787.0" width="169.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.7" y="798.0">com/dslplatform/json/D..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (82 samples, 14.04%)</title><rect x="86.8" y="771.0" width="165.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.8" y="782.0">com/dslplatform/json/..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (56 samples, 9.59%)</title><rect x="96.9" y="755.0" width="113.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.9" y="766.0">com/dslplatfor..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (54 samples, 9.25%)</title><rect x="100.9" y="739.0" width="109.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.9" y="750.0">com/dslplatfo..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (54 samples, 9.25%)</title><rect x="100.9" y="723.0" width="109.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.9" y="734.0">com/dslplatfo..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (38 samples, 6.51%)</title><rect x="113.0" y="707.0" width="76.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.0" y="718.0">com/dslp..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (34 samples, 5.82%)</title><rect x="121.1" y="691.0" width="68.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="124.1" y="702.0">com/dsl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (7 samples, 1.20%)</title><rect x="151.4" y="675.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.51%)</title><rect x="159.5" y="659.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.17%)</title><rect x="163.6" y="643.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.6" y="654.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (9 samples, 1.54%)</title><rect x="165.6" y="675.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.6" y="686.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (5 samples, 0.86%)</title><rect x="173.7" y="659.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.7" y="670.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (5 samples, 0.86%)</title><rect x="173.7" y="643.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.7" y="654.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (5 samples, 0.86%)</title><rect x="173.7" y="627.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.34%)</title><rect x="177.7" y="611.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.34%)</title><rect x="177.7" y="595.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.7" y="606.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.17%)</title><rect x="181.7" y="611.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.7" y="622.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.51%)</title><rect x="183.8" y="675.0" width="6.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="186.8" y="686.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (1 samples, 0.17%)</title><rect x="189.8" y="707.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.8" y="718.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (4 samples, 0.68%)</title><rect x="191.8" y="707.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.17%)</title><rect x="197.9" y="691.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.9" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (2 samples, 0.34%)</title><rect x="199.9" y="707.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.9" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (1 samples, 0.17%)</title><rect x="202.0" y="691.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.0" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (1 samples, 0.17%)</title><rect x="202.0" y="675.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.0" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (3 samples, 0.51%)</title><rect x="204.0" y="707.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.0" y="718.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (21 samples, 3.60%)</title><rect x="210.0" y="755.0" width="42.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.0" y="766.0">com/..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.extractActualType (1 samples, 0.17%)</title><rect x="224.2" y="739.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.2" y="750.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (5 samples, 0.86%)</title><rect x="226.2" y="739.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.2" y="750.0"></text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (4 samples, 0.68%)</title><rect x="226.2" y="723.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4 samples, 0.68%)</title><rect x="226.2" y="707.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.68%)</title><rect x="226.2" y="691.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.68%)</title><rect x="226.2" y="675.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.iterator (1 samples, 0.17%)</title><rect x="234.3" y="723.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.17%)</title><rect x="234.3" y="707.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.3" y="718.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2 samples, 0.34%)</title><rect x="236.3" y="739.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.3" y="750.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (2 samples, 0.34%)</title><rect x="236.3" y="723.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="239.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (2 samples, 0.34%)</title><rect x="240.3" y="739.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.3" y="750.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (2 samples, 0.34%)</title><rect x="240.3" y="723.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="243.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.17%)</title><rect x="242.4" y="707.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="245.4" y="718.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.17%)</title><rect x="242.4" y="691.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="245.4" y="702.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.17%)</title><rect x="242.4" y="675.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="245.4" y="686.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.17%)</title><rect x="242.4" y="659.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="245.4" y="670.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.17%)</title><rect x="242.4" y="643.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="245.4" y="654.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.17%)</title><rect x="242.4" y="627.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="245.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.68%)</title><rect x="244.4" y="739.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.17%)</title><rect x="250.4" y="723.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.4" y="734.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (24 samples, 4.11%)</title><rect x="252.5" y="787.0" width="48.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.5" y="798.0">com/..</text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.enlargeOrFlush (19 samples, 3.25%)</title><rect x="258.5" y="771.0" width="38.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.5" y="782.0">com..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (19 samples, 3.25%)</title><rect x="258.5" y="755.0" width="38.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.5" y="766.0">jav..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (18 samples, 3.08%)</title><rect x="258.5" y="739.0" width="36.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.5" y="750.0">jav..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (18 samples, 3.08%)</title><rect x="258.5" y="723.0" width="36.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.5" y="734.0">jav..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (18 samples, 3.08%)</title><rect x="258.5" y="707.0" width="36.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.5" y="718.0">jav..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (17 samples, 2.91%)</title><rect x="260.5" y="691.0" width="34.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="263.5" y="702.0">Ja..</text>
</g>
<g>
<title>writeBytes (17 samples, 2.91%)</title><rect x="260.5" y="675.0" width="34.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="263.5" y="686.0">wr..</text>
</g>
<g>
<title>jni_GetArrayLength (1 samples, 0.17%)</title><rect x="260.5" y="659.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="263.5" y="670.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.17%)</title><rect x="260.5" y="643.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="263.5" y="654.0"></text>
</g>
<g>
<title>write (16 samples, 2.74%)</title><rect x="262.6" y="659.0" width="32.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="265.6" y="670.0">wr..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.17%)</title><rect x="294.9" y="739.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="297.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.34%)</title><rect x="296.9" y="771.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.34%)</title><rect x="296.9" y="755.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="299.9" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.17%)</title><rect x="301.0" y="787.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.0" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (12 samples, 2.05%)</title><rect x="303.0" y="787.0" width="24.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.0" y="798.0">j..</text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (12 samples, 2.05%)</title><rect x="303.0" y="771.0" width="24.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.0" y="782.0">j..</text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (12 samples, 2.05%)</title><rect x="303.0" y="755.0" width="24.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.0" y="766.0">j..</text>
</g>
<g>
<title>java/util/TreeMap.successor (12 samples, 2.05%)</title><rect x="303.0" y="739.0" width="24.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.0" y="750.0">j..</text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (4 samples, 0.68%)</title><rect x="327.2" y="867.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.2" y="878.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (4 samples, 0.68%)</title><rect x="327.2" y="851.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.2" y="862.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (4 samples, 0.68%)</title><rect x="327.2" y="835.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.2" y="846.0"></text>
</g>
<g>
<title>fileOpen (4 samples, 0.68%)</title><rect x="327.2" y="819.0" width="8.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="330.2" y="830.0"></text>
</g>
<g>
<title>module_mutex (4 samples, 0.68%)</title><rect x="327.2" y="803.0" width="8.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="330.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (1 samples, 0.17%)</title><rect x="335.3" y="931.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.3" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.17%)</title><rect x="335.3" y="915.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.3" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.17%)</title><rect x="335.3" y="899.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="338.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 0.68%)</title><rect x="337.3" y="947.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.poll (3 samples, 0.51%)</title><rect x="339.3" y="931.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (3 samples, 0.51%)</title><rect x="339.3" y="915.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.awaitFulfill (3 samples, 0.51%)</title><rect x="339.3" y="899.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.17%)</title><rect x="339.3" y="883.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkNanos (2 samples, 0.34%)</title><rect x="341.4" y="883.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="344.4" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.34%)</title><rect x="341.4" y="867.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.4" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.34%)</title><rect x="341.4" y="851.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="344.4" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.34%)</title><rect x="341.4" y="835.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="344.4" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.34%)</title><rect x="341.4" y="819.0" width="4.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="344.4" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.17%)</title><rect x="345.4" y="995.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.17%)</title><rect x="345.4" y="979.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.4" y="990.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.17%)</title><rect x="345.4" y="963.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="348.4" y="974.0"></text>
</g>
<g>
<title>Runtime1::is_instance_of(oopDesc*, oopDesc*) (1 samples, 0.17%)</title><rect x="345.4" y="947.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="348.4" y="958.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializeAgentPropertiesToByteArray (3 samples, 0.51%)</title><rect x="347.4" y="995.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.4" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializePropertiesToByteArray (3 samples, 0.51%)</title><rect x="347.4" y="979.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.4" y="990.0"></text>
</g>
<g>
<title>java/util/Properties.store (3 samples, 0.51%)</title><rect x="347.4" y="963.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.4" y="974.0"></text>
</g>
<g>
<title>java/util/Properties.store0 (3 samples, 0.51%)</title><rect x="347.4" y="947.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.4" y="958.0"></text>
</g>
<g>
<title>java/util/Date.toString (3 samples, 0.51%)</title><rect x="347.4" y="931.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="350.4" y="942.0"></text>
</g>
<g>
<title>java/util/Date.normalize (1 samples, 0.17%)</title><rect x="347.4" y="915.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.4" y="926.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDefaultRef (1 samples, 0.17%)</title><rect x="347.4" y="899.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="350.4" y="910.0"></text>
</g>
<g>
<title>java/util/TimeZone.setDefaultZone (1 samples, 0.17%)</title><rect x="347.4" y="883.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.4" y="894.0"></text>
</g>
<g>
<title>java/util/TimeZone.getTimeZone (1 samples, 0.17%)</title><rect x="347.4" y="867.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="350.4" y="878.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfo.getTimeZone (1 samples, 0.17%)</title><rect x="347.4" y="851.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="350.4" y="862.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile.&lt;clinit&gt; (1 samples, 0.17%)</title><rect x="347.4" y="835.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.4" y="846.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="347.4" y="819.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.4" y="830.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="347.4" y="803.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.4" y="814.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile$1.run (1 samples, 0.17%)</title><rect x="347.4" y="787.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.4" y="798.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile$1.run (1 samples, 0.17%)</title><rect x="347.4" y="771.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.4" y="782.0"></text>
</g>
<g>
<title>sun/util/calendar/ZoneInfoFile.load (1 samples, 0.17%)</title><rect x="347.4" y="755.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="350.4" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="347.4" y="739.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="350.4" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_get_put(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="347.4" y="723.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.4" y="734.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field_access(fieldDescriptor&amp;, constantPoolHandle const&amp;, int, methodHandle const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.17%)</title><rect x="347.4" y="707.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="350.4" y="718.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.17%)</title><rect x="347.4" y="691.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="350.4" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.17%)</title><rect x="347.4" y="675.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="350.4" y="686.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDisplayName (2 samples, 0.34%)</title><rect x="349.5" y="915.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="352.5" y="926.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameUtility.retrieveDisplayName (2 samples, 0.34%)</title><rect x="349.5" y="899.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="352.5" y="910.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameUtility.retrieveDisplayNamesImpl (2 samples, 0.34%)</title><rect x="349.5" y="883.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.5" y="894.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObject (2 samples, 0.34%)</title><rect x="349.5" y="867.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="352.5" y="878.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObjectImpl (2 samples, 0.34%)</title><rect x="349.5" y="851.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="352.5" y="862.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.findProviders (1 samples, 0.17%)</title><rect x="349.5" y="835.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.5" y="846.0"></text>
</g>
<g>
<title>sun/util/locale/provider/JRELocaleProviderAdapter.getLocaleServiceProvider (1 samples, 0.17%)</title><rect x="349.5" y="819.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="352.5" y="830.0"></text>
</g>
<g>
<title>sun/util/cldr/CLDRLocaleProviderAdapter.getTimeZoneNameProvider (1 samples, 0.17%)</title><rect x="349.5" y="803.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="352.5" y="814.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="349.5" y="787.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.5" y="798.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="349.5" y="771.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.5" y="782.0"></text>
</g>
<g>
<title>sun/util/cldr/CLDRLocaleProviderAdapter$$Lambda$22/489545137.run (1 samples, 0.17%)</title><rect x="349.5" y="755.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.5" y="766.0"></text>
</g>
<g>
<title>sun/util/cldr/CLDRLocaleProviderAdapter.lambda$getTimeZoneNameProvider$2 (1 samples, 0.17%)</title><rect x="349.5" y="739.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.5" y="750.0"></text>
</g>
<g>
<title>sun/util/locale/provider/JRELocaleProviderAdapter.getLanguageTagSet (1 samples, 0.17%)</title><rect x="349.5" y="723.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.5" y="734.0"></text>
</g>
<g>
<title>sun/util/cldr/CLDRLocaleProviderAdapter.createLanguageTagSet (1 samples, 0.17%)</title><rect x="349.5" y="707.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.5" y="718.0"></text>
</g>
<g>
<title>java/util/StringTokenizer.nextToken (1 samples, 0.17%)</title><rect x="349.5" y="691.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.17%)</title><rect x="349.5" y="675.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.5" y="686.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameUtility$TimeZoneNameGetter.getObject (1 samples, 0.17%)</title><rect x="351.5" y="835.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.5" y="846.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameUtility$TimeZoneNameGetter.getObject (1 samples, 0.17%)</title><rect x="351.5" y="819.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.5" y="830.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameUtility$TimeZoneNameGetter.getName (1 samples, 0.17%)</title><rect x="351.5" y="803.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.5" y="814.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameProviderImpl.getDisplayName (1 samples, 0.17%)</title><rect x="351.5" y="787.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.5" y="798.0"></text>
</g>
<g>
<title>sun/util/cldr/CLDRTimeZoneNameProviderImpl.getDisplayNameArray (1 samples, 0.17%)</title><rect x="351.5" y="771.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.5" y="782.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameProviderImpl.getDisplayNameArray (1 samples, 0.17%)</title><rect x="351.5" y="755.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.5" y="766.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleResources.getTimeZoneNames (1 samples, 0.17%)</title><rect x="351.5" y="739.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.5" y="750.0"></text>
</g>
<g>
<title>sun/util/resources/LocaleData.getTimeZoneNames (1 samples, 0.17%)</title><rect x="351.5" y="723.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.5" y="734.0"></text>
</g>
<g>
<title>sun/util/resources/LocaleData.getBundle (1 samples, 0.17%)</title><rect x="351.5" y="707.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.5" y="718.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="351.5" y="691.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.5" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="351.5" y="675.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.5" y="686.0"></text>
</g>
<g>
<title>sun/util/resources/LocaleData$1.run (1 samples, 0.17%)</title><rect x="351.5" y="659.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.5" y="670.0"></text>
</g>
<g>
<title>sun/util/resources/LocaleData$1.run (1 samples, 0.17%)</title><rect x="351.5" y="643.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.5" y="654.0"></text>
</g>
<g>
<title>sun/util/resources/Bundles.of (1 samples, 0.17%)</title><rect x="351.5" y="627.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.5" y="638.0"></text>
</g>
<g>
<title>sun/util/resources/Bundles.loadBundleOf (1 samples, 0.17%)</title><rect x="351.5" y="611.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="354.5" y="622.0"></text>
</g>
<g>
<title>sun/util/resources/Bundles.findBundleOf (1 samples, 0.17%)</title><rect x="351.5" y="595.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.5" y="606.0"></text>
</g>
<g>
<title>sun/util/resources/Bundles.findBundleOf (1 samples, 0.17%)</title><rect x="351.5" y="579.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.5" y="590.0"></text>
</g>
<g>
<title>sun/util/resources/Bundles.findBundleOf (1 samples, 0.17%)</title><rect x="351.5" y="563.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.5" y="574.0"></text>
</g>
<g>
<title>java/util/ResourceBundle$1.newResourceBundle (1 samples, 0.17%)</title><rect x="351.5" y="547.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.5" y="558.0"></text>
</g>
<g>
<title>java/util/ResourceBundle$ResourceBundleProviderHelper.newResourceBundle (1 samples, 0.17%)</title><rect x="351.5" y="531.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.5" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.17%)</title><rect x="351.5" y="515.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.5" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.17%)</title><rect x="351.5" y="499.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="354.5" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.17%)</title><rect x="351.5" y="483.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.5" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.17%)</title><rect x="351.5" y="467.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invokeExact_MT (1 samples, 0.17%)</title><rect x="351.5" y="451.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.5" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.17%)</title><rect x="351.5" y="435.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.5" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.metafactory (1 samples, 0.17%)</title><rect x="351.5" y="419.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.17%)</title><rect x="351.5" y="403.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.ensureClassInitialized (1 samples, 0.17%)</title><rect x="351.5" y="387.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.ensureClassInitialized0 (1 samples, 0.17%)</title><rect x="351.5" y="371.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.5" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::initialize(Thread*) (1 samples, 0.17%)</title><rect x="351.5" y="355.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="354.5" y="366.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt$thread$thread$1.run (255 samples, 43.66%)</title><rect x="353.5" y="995.0" width="515.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.5" y="1006.0">kotlin/concurrent/ThreadsKt$thread$thread$1.run</text>
</g>
<g>
<title>MainKt$main$1.invoke (255 samples, 43.66%)</title><rect x="353.5" y="979.0" width="515.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.5" y="990.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt$main$1.invoke (255 samples, 43.66%)</title><rect x="353.5" y="963.0" width="515.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="356.5" y="974.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt.test (255 samples, 43.66%)</title><rect x="353.5" y="947.0" width="515.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.5" y="958.0">MainKt.test</text>
</g>
<g>
<title>I2C/C2I adapters(0xba000000)@0x0000000114381580 (1 samples, 0.17%)</title><rect x="369.7" y="931.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.7" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="371.7" y="931.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="374.7" y="942.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="371.7" y="915.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="374.7" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokestatic(CallInfo&amp;, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="899.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="374.7" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="883.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="374.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="867.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="374.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="851.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="374.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="835.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="374.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="819.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="374.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="803.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="374.7" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="787.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="374.7" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="771.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="374.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="755.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="374.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="739.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="374.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="723.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="374.7" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::link_methods(Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="707.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="374.7" y="718.0"></text>
</g>
<g>
<title>Method::make_adapters(methodHandle const&amp;, Thread*) (1 samples, 0.17%)</title><rect x="371.7" y="691.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="374.7" y="702.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter(methodHandle const&amp;) (1 samples, 0.17%)</title><rect x="371.7" y="675.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="374.7" y="686.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::get_adapter0(methodHandle const&amp;) (1 samples, 0.17%)</title><rect x="371.7" y="659.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="374.7" y="670.0"></text>
</g>
<g>
<title>AdapterHandlerTable::lookup(int, BasicType*) (1 samples, 0.17%)</title><rect x="371.7" y="643.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="374.7" y="654.0"></text>
</g>
<g>
<title>AdapterFingerPrint::equals(AdapterFingerPrint*) (1 samples, 0.17%)</title><rect x="371.7" y="627.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="374.7" y="638.0"></text>
</g>
<g>
<title>Runtime1::new_object_array(JavaThread*, Klass*, int) (1 samples, 0.17%)</title><rect x="373.7" y="931.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="376.7" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.17%)</title><rect x="373.7" y="915.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="376.7" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.17%)</title><rect x="373.7" y="899.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="376.7" y="910.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.17%)</title><rect x="373.7" y="883.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="376.7" y="894.0"></text>
</g>
<g>
<title>core.StandardLogStructuredMergeTree.put (208 samples, 35.62%)</title><rect x="375.7" y="931.0" width="420.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="378.7" y="942.0">core.StandardLogStructuredMergeTree.put</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.17%)</title><rect x="385.8" y="915.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="388.8" y="926.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.17%)</title><rect x="385.8" y="899.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="388.8" y="910.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.17%)</title><rect x="385.8" y="883.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="388.8" y="894.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.17%)</title><rect x="385.8" y="867.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="388.8" y="878.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.17%)</title><rect x="385.8" y="851.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="388.8" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (1 samples, 0.17%)</title><rect x="385.8" y="835.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="388.8" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, bool, Thread*) (1 samples, 0.17%)</title><rect x="385.8" y="819.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="388.8" y="830.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.17%)</title><rect x="385.8" y="803.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="388.8" y="814.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.17%)</title><rect x="385.8" y="787.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="388.8" y="798.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.17%)</title><rect x="385.8" y="771.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="388.8" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="385.8" y="755.0" width="2.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="388.8" y="766.0"></text>
</g>
<g>
<title>table.StandardMemTable.put (57 samples, 9.76%)</title><rect x="387.8" y="915.0" width="115.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.8" y="926.0">StandardMemTab..</text>
</g>
<g>
<title>java/util/TreeMap.put (57 samples, 9.76%)</title><rect x="387.8" y="899.0" width="115.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="390.8" y="910.0">java/util/Tree..</text>
</g>
<g>
<title>ThreadSafepointState::handle_polling_page_exception() (1 samples, 0.17%)</title><rect x="450.5" y="883.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="453.5" y="894.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.17%)</title><rect x="450.5" y="867.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.5" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.17%)</title><rect x="450.5" y="851.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="453.5" y="862.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.17%)</title><rect x="450.5" y="835.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="453.5" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.17%)</title><rect x="450.5" y="819.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="453.5" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="450.5" y="803.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="453.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (3 samples, 0.51%)</title><rect x="452.5" y="883.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (3 samples, 0.51%)</title><rect x="452.5" y="867.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.17%)</title><rect x="456.5" y="851.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.5" y="862.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (22 samples, 3.77%)</title><rect x="458.6" y="883.0" width="44.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="461.6" y="894.0">java..</text>
</g>
<g>
<title>java/util/TreeMap.parentOf (1 samples, 0.17%)</title><rect x="462.6" y="867.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.6" y="878.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (1 samples, 0.17%)</title><rect x="464.6" y="867.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.6" y="878.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (18 samples, 3.08%)</title><rect x="466.6" y="867.0" width="36.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.6" y="878.0">jav..</text>
</g>
<g>
<title>table.StandardMemTable.size (2 samples, 0.34%)</title><rect x="503.0" y="915.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.0" y="926.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (1 samples, 0.17%)</title><rect x="505.0" y="899.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.0" y="910.0"></text>
</g>
<g>
<title>table.StandardSSTableManager.addTableAsync (2 samples, 0.34%)</title><rect x="507.1" y="915.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (2 samples, 0.34%)</title><rect x="507.1" y="899.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="510.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.34%)</title><rect x="507.1" y="883.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="510.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue.offer (1 samples, 0.17%)</title><rect x="509.1" y="867.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack.transfer (1 samples, 0.17%)</title><rect x="509.1" y="851.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/SynchronousQueue$TransferStack$SNode.tryMatch (1 samples, 0.17%)</title><rect x="509.1" y="835.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.17%)</title><rect x="509.1" y="819.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.1" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.17%)</title><rect x="509.1" y="803.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.1" y="814.0"></text>
</g>
<g>
<title>StandardWriteAheadLogManager.append (140 samples, 23.97%)</title><rect x="511.1" y="915.0" width="282.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.1" y="926.0">StandardWriteAheadLogManager.append</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (121 samples, 20.72%)</title><rect x="519.2" y="899.0" width="244.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="522.2" y="910.0">com/dslplatform/json/DslJson.ser..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (93 samples, 15.92%)</title><rect x="527.3" y="883.0" width="187.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.3" y="894.0">com/dslplatform/json/Dsl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (59 samples, 10.10%)</title><rect x="533.3" y="867.0" width="119.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.3" y="878.0">com/dslplatform..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (58 samples, 9.93%)</title><rect x="535.3" y="851.0" width="117.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.3" y="862.0">com/dslplatfor..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (58 samples, 9.93%)</title><rect x="535.3" y="835.0" width="117.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.3" y="846.0">com/dslplatfor..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (41 samples, 7.02%)</title><rect x="539.4" y="819.0" width="82.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.4" y="830.0">com/dslpl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (35 samples, 5.99%)</title><rect x="549.5" y="803.0" width="70.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="552.5" y="814.0">com/dslp..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (10 samples, 1.71%)</title><rect x="585.9" y="787.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.34%)</title><rect x="602.0" y="771.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.0" y="782.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (3 samples, 0.51%)</title><rect x="606.1" y="787.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="609.1" y="798.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (1 samples, 0.17%)</title><rect x="610.1" y="771.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.1" y="782.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (1 samples, 0.17%)</title><rect x="610.1" y="755.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="613.1" y="766.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (1 samples, 0.17%)</title><rect x="610.1" y="739.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="613.1" y="750.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (1 samples, 0.17%)</title><rect x="610.1" y="723.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="613.1" y="734.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (4 samples, 0.68%)</title><rect x="612.1" y="787.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="615.1" y="798.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (4 samples, 0.68%)</title><rect x="612.1" y="771.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.1" y="782.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (4 samples, 0.68%)</title><rect x="612.1" y="755.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="615.1" y="766.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (3 samples, 0.51%)</title><rect x="614.1" y="739.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="617.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.51%)</title><rect x="614.1" y="723.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.51%)</title><rect x="614.1" y="707.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="617.1" y="718.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (1 samples, 0.17%)</title><rect x="620.2" y="803.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.2" y="814.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (1 samples, 0.17%)</title><rect x="620.2" y="787.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="623.2" y="798.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (1 samples, 0.17%)</title><rect x="620.2" y="771.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="623.2" y="782.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (1 samples, 0.17%)</title><rect x="620.2" y="755.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.2" y="766.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (1 samples, 0.17%)</title><rect x="622.2" y="819.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="625.2" y="830.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (4 samples, 0.68%)</title><rect x="624.2" y="819.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.17%)</title><rect x="630.3" y="803.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.17%)</title><rect x="630.3" y="787.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.3" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.17%)</title><rect x="632.3" y="819.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="635.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.getValue (1 samples, 0.17%)</title><rect x="634.3" y="819.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.3" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (3 samples, 0.51%)</title><rect x="636.4" y="819.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.4" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (1 samples, 0.17%)</title><rect x="640.4" y="803.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="643.4" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (1 samples, 0.17%)</title><rect x="640.4" y="787.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.4" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (5 samples, 0.86%)</title><rect x="642.4" y="819.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.4" y="830.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (30 samples, 5.14%)</title><rect x="652.5" y="867.0" width="60.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="655.5" y="878.0">com/ds..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.extractActualType (1 samples, 0.17%)</title><rect x="664.7" y="851.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.7" y="862.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (15 samples, 2.57%)</title><rect x="666.7" y="851.0" width="30.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.7" y="862.0">co..</text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (6 samples, 1.03%)</title><rect x="674.8" y="835.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.8" y="846.0"></text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.resolveExternalConverterClassNames (1 samples, 0.17%)</title><rect x="676.8" y="819.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.17%)</title><rect x="676.8" y="803.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="679.8" y="814.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.17%)</title><rect x="676.8" y="787.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="679.8" y="798.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.17%)</title><rect x="676.8" y="771.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.8" y="782.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (1 samples, 0.17%)</title><rect x="676.8" y="755.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="679.8" y="766.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (1 samples, 0.17%)</title><rect x="676.8" y="739.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="679.8" y="750.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="676.8" y="723.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="679.8" y="734.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.17%)</title><rect x="676.8" y="707.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="679.8" y="718.0"></text>
</g>
<g>
<title>ConstantPoolCacheEntry::set_direct_or_vtable_call(Bytecodes::Code, methodHandle const&amp;, int, bool) (1 samples, 0.17%)</title><rect x="676.8" y="691.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="679.8" y="702.0"></text>
</g>
<g>
<title>Method::result_type() const (1 samples, 0.17%)</title><rect x="676.8" y="675.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="679.8" y="686.0"></text>
</g>
<g>
<title>SignatureIterator::iterate_returntype() (1 samples, 0.17%)</title><rect x="676.8" y="659.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="679.8" y="670.0"></text>
</g>
<g>
<title>SignatureIterator::expect(char) (1 samples, 0.17%)</title><rect x="676.8" y="643.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="679.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.17%)</title><rect x="678.8" y="819.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.51%)</title><rect x="680.8" y="819.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="683.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.51%)</title><rect x="680.8" y="803.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="683.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.51%)</title><rect x="680.8" y="787.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="683.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.34%)</title><rect x="686.9" y="835.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.17%)</title><rect x="688.9" y="819.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="691.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList$COWIterator.hasNext (1 samples, 0.17%)</title><rect x="690.9" y="835.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="693.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.iterator (2 samples, 0.34%)</title><rect x="692.9" y="835.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="695.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (3 samples, 0.51%)</title><rect x="697.0" y="851.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="700.0" y="862.0"></text>
</g>
<g>
<title>jni_IsAssignableFrom (3 samples, 0.51%)</title><rect x="697.0" y="835.0" width="6.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="700.0" y="846.0"></text>
</g>
<g>
<title>java_lang_Class::is_primitive(oopDesc*) (1 samples, 0.17%)</title><rect x="701.0" y="819.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="704.0" y="830.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.17%)</title><rect x="701.0" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="704.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.86%)</title><rect x="703.0" y="851.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="706.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.17%)</title><rect x="711.1" y="835.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="714.1" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.17%)</title><rect x="713.2" y="867.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="716.2" y="878.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.flush (18 samples, 3.08%)</title><rect x="715.2" y="883.0" width="36.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.2" y="894.0">com..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (18 samples, 3.08%)</title><rect x="715.2" y="867.0" width="36.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="718.2" y="878.0">jav..</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (14 samples, 2.40%)</title><rect x="715.2" y="851.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.2" y="862.0">ja..</text>
</g>
<g>
<title>java/io/FileOutputStream.write (14 samples, 2.40%)</title><rect x="715.2" y="835.0" width="28.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="718.2" y="846.0">ja..</text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (14 samples, 2.40%)</title><rect x="715.2" y="819.0" width="28.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="718.2" y="830.0">ja..</text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (14 samples, 2.40%)</title><rect x="715.2" y="803.0" width="28.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="718.2" y="814.0">Ja..</text>
</g>
<g>
<title>writeBytes (14 samples, 2.40%)</title><rect x="715.2" y="787.0" width="28.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="718.2" y="798.0">wr..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.17%)</title><rect x="715.2" y="771.0" width="2.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="718.2" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.17%)</title><rect x="715.2" y="755.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="718.2" y="766.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.17%)</title><rect x="715.2" y="739.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="718.2" y="750.0"></text>
</g>
<g>
<title>write (13 samples, 2.23%)</title><rect x="717.2" y="771.0" width="26.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="720.2" y="782.0">w..</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.17%)</title><rect x="743.5" y="851.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="746.5" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.51%)</title><rect x="745.5" y="851.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="748.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 1.03%)</title><rect x="751.5" y="883.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.17%)</title><rect x="759.6" y="867.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.17%)</title><rect x="761.6" y="867.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="764.6" y="878.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (5 samples, 0.86%)</title><rect x="763.7" y="899.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.7" y="910.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (5 samples, 0.86%)</title><rect x="763.7" y="883.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="766.7" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.51%)</title><rect x="767.7" y="867.0" width="6.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="770.7" y="878.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (9 samples, 1.54%)</title><rect x="773.8" y="899.0" width="18.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.17%)</title><rect x="773.8" y="883.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (8 samples, 1.37%)</title><rect x="775.8" y="883.0" width="16.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (8 samples, 1.37%)</title><rect x="775.8" y="867.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.8" y="878.0"></text>
</g>
<g>
<title>java/lang/StringCoding.hasNegatives (1 samples, 0.17%)</title><rect x="779.8" y="851.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="782.8" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.68%)</title><rect x="781.8" y="851.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.17%)</title><rect x="787.9" y="835.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="790.9" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.17%)</title><rect x="787.9" y="819.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="790.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.17%)</title><rect x="787.9" y="803.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="790.9" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.17%)</title><rect x="787.9" y="787.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="790.9" y="798.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="787.9" y="771.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="790.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="787.9" y="755.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.9" y="766.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.17%)</title><rect x="787.9" y="739.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="790.9" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.17%)</title><rect x="789.9" y="851.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="792.9" y="862.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.17%)</title><rect x="792.0" y="899.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.0" y="910.0"></text>
</g>
<g>
<title>kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (1 samples, 0.17%)</title><rect x="794.0" y="915.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="796.0" y="931.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.0" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="796.0" y="915.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="799.0" y="926.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="796.0" y="899.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.0" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="796.0" y="883.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.0" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="796.0" y="867.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="799.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (1 samples, 0.17%)</title><rect x="796.0" y="851.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="799.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/loader/Resource.getBytes (1 samples, 0.17%)</title><rect x="796.0" y="835.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="799.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.17%)</title><rect x="796.0" y="819.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="799.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.17%)</title><rect x="796.0" y="803.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.0" y="814.0"></text>
</g>
<g>
<title>JVM_CurrentThread (1 samples, 0.17%)</title><rect x="796.0" y="787.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="799.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.03%)</title><rect x="798.0" y="931.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.0" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.03%)</title><rect x="798.0" y="915.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.0" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.34%)</title><rect x="800.0" y="899.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="803.0" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.getCoder (1 samples, 0.17%)</title><rect x="800.0" y="883.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.0" y="894.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.17%)</title><rect x="802.1" y="883.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.17%)</title><rect x="804.1" y="899.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.34%)</title><rect x="806.1" y="899.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="809.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.17%)</title><rect x="808.1" y="883.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.1" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.17%)</title><rect x="810.1" y="931.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.1" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (1 samples, 0.17%)</title><rect x="810.1" y="915.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.1" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.17%)</title><rect x="812.2" y="931.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="815.2" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.17%)</title><rect x="814.2" y="931.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="817.2" y="942.0"></text>
</g>
<g>
<title>kotlin/TuplesKt.to (2 samples, 0.34%)</title><rect x="816.2" y="931.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.2" y="942.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.17%)</title><rect x="816.2" y="915.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="819.2" y="926.0"></text>
</g>
<g>
<title>kotlin/Pair.&lt;init&gt; (1 samples, 0.17%)</title><rect x="818.2" y="915.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.17%)</title><rect x="818.2" y="899.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.2" y="910.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.mapOf (24 samples, 4.11%)</title><rect x="820.2" y="931.0" width="48.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.2" y="942.0">kotl..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.17%)</title><rect x="822.3" y="915.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="825.3" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.17%)</title><rect x="822.3" y="899.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="825.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.17%)</title><rect x="822.3" y="883.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="825.3" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.17%)</title><rect x="822.3" y="867.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="825.3" y="878.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="822.3" y="851.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="825.3" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="822.3" y="835.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="825.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.17%)</title><rect x="822.3" y="819.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.3" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.17%)</title><rect x="822.3" y="803.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.3" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.17%)</title><rect x="822.3" y="787.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.3" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.17%)</title><rect x="822.3" y="771.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="825.3" y="782.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_free_region(HeapRegionType) (1 samples, 0.17%)</title><rect x="822.3" y="755.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="825.3" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (2 samples, 0.34%)</title><rect x="824.3" y="915.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="827.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (2 samples, 0.34%)</title><rect x="824.3" y="899.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.17%)</title><rect x="826.3" y="883.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="829.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.tableSizeFor (1 samples, 0.17%)</title><rect x="826.3" y="867.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="829.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.numberOfLeadingZeros (1 samples, 0.17%)</title><rect x="826.3" y="851.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="829.3" y="862.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsJVMKt.mapCapacity (1 samples, 0.17%)</title><rect x="828.3" y="915.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.3" y="926.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.toMap (19 samples, 3.25%)</title><rect x="830.3" y="915.0" width="38.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="833.3" y="926.0">kot..</text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.putAll (19 samples, 3.25%)</title><rect x="830.3" y="899.0" width="38.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="833.3" y="910.0">kot..</text>
</g>
<g>
<title>java/util/HashMap.put (19 samples, 3.25%)</title><rect x="830.3" y="883.0" width="38.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.3" y="894.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.17%)</title><rect x="832.4" y="867.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="835.4" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.17%)</title><rect x="832.4" y="851.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 2.91%)</title><rect x="834.4" y="867.0" width="34.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.4" y="878.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.17%)</title><rect x="842.5" y="851.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="845.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (1 samples, 0.17%)</title><rect x="842.5" y="835.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="845.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.68%)</title><rect x="844.5" y="851.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="847.5" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (1 samples, 0.17%)</title><rect x="852.6" y="851.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="855.6" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (7 samples, 1.20%)</title><rect x="854.6" y="851.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="857.6" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.17%)</title><rect x="862.7" y="835.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="865.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.17%)</title><rect x="862.7" y="819.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="865.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.17%)</title><rect x="862.7" y="803.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="865.7" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.17%)</title><rect x="862.7" y="787.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="865.7" y="798.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="862.7" y="771.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="865.7" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.17%)</title><rect x="862.7" y="755.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.17%)</title><rect x="862.7" y="739.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="865.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.17%)</title><rect x="862.7" y="723.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="865.7" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.17%)</title><rect x="862.7" y="707.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="865.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.17%)</title><rect x="862.7" y="691.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.7" y="702.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.17%)</title><rect x="862.7" y="675.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.7" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (2 samples, 0.34%)</title><rect x="864.7" y="835.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.7" y="846.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.17%)</title><rect x="866.7" y="819.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="869.7" y="830.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndCallPremain (1 samples, 0.17%)</title><rect x="868.7" y="995.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.7" y="1006.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndStartAgent (1 samples, 0.17%)</title><rect x="868.7" y="979.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="871.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.17%)</title><rect x="868.7" y="963.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.7" y="974.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (1 samples, 0.17%)</title><rect x="868.7" y="947.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="871.7" y="958.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (1 samples, 0.17%)</title><rect x="868.7" y="931.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.7" y="942.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (1 samples, 0.17%)</title><rect x="868.7" y="915.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="871.7" y="926.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (1 samples, 0.17%)</title><rect x="868.7" y="899.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="871.7" y="910.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getResource (1 samples, 0.17%)</title><rect x="868.7" y="883.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="871.7" y="894.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getLoader (1 samples, 0.17%)</title><rect x="868.7" y="867.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.7" y="878.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.getLoader (1 samples, 0.17%)</title><rect x="868.7" y="851.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="871.7" y="862.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="868.7" y="835.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.7" y="846.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="868.7" y="819.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="871.7" y="830.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$3.run (1 samples, 0.17%)</title><rect x="868.7" y="803.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="871.7" y="814.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$3.run (1 samples, 0.17%)</title><rect x="868.7" y="787.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.7" y="798.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.&lt;init&gt; (1 samples, 0.17%)</title><rect x="868.7" y="771.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.7" y="782.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.ensureOpen (1 samples, 0.17%)</title><rect x="868.7" y="755.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.7" y="766.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.17%)</title><rect x="868.7" y="739.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="871.7" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.17%)</title><rect x="868.7" y="723.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="871.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader$1.run (1 samples, 0.17%)</title><rect x="868.7" y="707.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="871.7" y="718.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader$1.run (1 samples, 0.17%)</title><rect x="868.7" y="691.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="871.7" y="702.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getJarFile (1 samples, 0.17%)</title><rect x="868.7" y="675.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="871.7" y="686.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.&lt;init&gt; (1 samples, 0.17%)</title><rect x="868.7" y="659.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.7" y="670.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.&lt;init&gt; (1 samples, 0.17%)</title><rect x="868.7" y="643.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.7" y="654.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.&lt;init&gt; (1 samples, 0.17%)</title><rect x="868.7" y="627.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="871.7" y="638.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$CleanableResource.&lt;init&gt; (1 samples, 0.17%)</title><rect x="868.7" y="611.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="871.7" y="622.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.get (1 samples, 0.17%)</title><rect x="868.7" y="595.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.7" y="606.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.&lt;init&gt; (1 samples, 0.17%)</title><rect x="868.7" y="579.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.7" y="590.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.initCEN (1 samples, 0.17%)</title><rect x="868.7" y="563.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="871.7" y="574.0"></text>
</g>
<g>
<title>thread_start (158 samples, 27.05%)</title><rect x="870.8" y="995.0" width="319.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="873.8" y="1006.0">thread_start</text>
</g>
<g>
<title>_pthread_start (158 samples, 27.05%)</title><rect x="870.8" y="979.0" width="319.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="873.8" y="990.0">_pthread_start</text>
</g>
<g>
<title>thread_native_entry(Thread*) (158 samples, 27.05%)</title><rect x="870.8" y="963.0" width="319.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="873.8" y="974.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (158 samples, 27.05%)</title><rect x="870.8" y="947.0" width="319.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.8" y="958.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.17%)</title><rect x="870.8" y="931.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.8" y="942.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.17%)</title><rect x="870.8" y="915.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.8" y="926.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.17%)</title><rect x="870.8" y="899.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="873.8" y="910.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.17%)</title><rect x="870.8" y="883.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="873.8" y="894.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.17%)</title><rect x="870.8" y="867.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="873.8" y="878.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.17%)</title><rect x="870.8" y="851.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="873.8" y="862.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.17%)</title><rect x="870.8" y="835.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.8" y="846.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.17%)</title><rect x="870.8" y="819.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="873.8" y="830.0"></text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 1.54%)</title><rect x="872.8" y="931.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="875.8" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 1.20%)</title><rect x="872.8" y="915.0" width="14.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="875.8" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 1.03%)</title><rect x="872.8" y="899.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.8" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 0.68%)</title><rect x="872.8" y="883.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.8" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (4 samples, 0.68%)</title><rect x="872.8" y="867.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="875.8" y="878.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (4 samples, 0.68%)</title><rect x="872.8" y="851.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.8" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.51%)</title><rect x="874.8" y="835.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.8" y="846.0"></text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (3 samples, 0.51%)</title><rect x="874.8" y="819.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="877.8" y="830.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.34%)</title><rect x="880.9" y="883.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="883.9" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.17%)</title><rect x="880.9" y="867.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.9" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.17%)</title><rect x="880.9" y="851.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.9" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.17%)</title><rect x="880.9" y="835.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="883.9" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="880.9" y="819.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="883.9" y="830.0"></text>
</g>
<g>
<title>OWSTTaskTerminator::do_spin_master_work(TerminatorTerminator*) (1 samples, 0.17%)</title><rect x="882.9" y="867.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.9" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.17%)</title><rect x="884.9" y="899.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="887.9" y="910.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.17%)</title><rect x="884.9" y="883.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.9" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.17%)</title><rect x="884.9" y="867.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="887.9" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.17%)</title><rect x="884.9" y="851.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="887.9" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_buffer(CardTableEntryClosure*, BufferNode*, bool, unsigned int) (1 samples, 0.17%)</title><rect x="884.9" y="835.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="887.9" y="846.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.17%)</title><rect x="884.9" y="819.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.17%)</title><rect x="884.9" y="803.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="887.9" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.17%)</title><rect x="884.9" y="787.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.9" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.17%)</title><rect x="884.9" y="771.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.9" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.17%)</title><rect x="884.9" y="755.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="887.9" y="766.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.17%)</title><rect x="886.9" y="915.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="889.9" y="926.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.17%)</title><rect x="886.9" y="899.0" width="2.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="889.9" y="910.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.17%)</title><rect x="888.9" y="915.0" width="2.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="891.9" y="926.0"></text>
</g>
<g>
<title>JavaThread::run() (142 samples, 24.32%)</title><rect x="891.0" y="931.0" width="286.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.0" y="942.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (142 samples, 24.32%)</title><rect x="891.0" y="915.0" width="286.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="894.0" y="926.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (139 samples, 23.80%)</title><rect x="891.0" y="899.0" width="280.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="894.0" y="910.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (130 samples, 22.26%)</title><rect x="891.0" y="883.0" width="262.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.0" y="894.0">CompileBroker::invoke_compiler_on_m..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (106 samples, 18.15%)</title><rect x="891.0" y="867.0" width="214.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.0" y="878.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (105 samples, 17.98%)</title><rect x="891.0" y="851.0" width="212.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="894.0" y="862.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (69 samples, 11.82%)</title><rect x="891.0" y="835.0" width="139.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="894.0" y="846.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.68%)</title><rect x="891.0" y="819.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.0" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.51%)</title><rect x="891.0" y="803.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.0" y="814.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.17%)</title><rect x="895.0" y="787.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="898.0" y="798.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.17%)</title><rect x="895.0" y="771.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="898.0" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.17%)</title><rect x="897.0" y="803.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="900.0" y="814.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.17%)</title><rect x="897.0" y="787.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="900.0" y="798.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.17%)</title><rect x="897.0" y="771.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="900.0" y="782.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.17%)</title><rect x="897.0" y="755.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="900.0" y="766.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.17%)</title><rect x="897.0" y="739.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="900.0" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 1.20%)</title><rect x="899.0" y="819.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.0" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 1.20%)</title><rect x="899.0" y="803.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.0" y="814.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.51%)</title><rect x="899.0" y="787.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.0" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.51%)</title><rect x="905.1" y="787.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.1" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.34%)</title><rect x="905.1" y="771.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.1" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.34%)</title><rect x="905.1" y="755.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.1" y="766.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.34%)</title><rect x="905.1" y="739.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.1" y="750.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="907.1" y="723.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.1" y="734.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="907.1" y="707.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="910.1" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.17%)</title><rect x="907.1" y="691.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="910.1" y="702.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.17%)</title><rect x="909.1" y="771.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.1" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.17%)</title><rect x="909.1" y="755.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="912.1" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.17%)</title><rect x="909.1" y="739.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="912.1" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.17%)</title><rect x="909.1" y="723.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.1" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.17%)</title><rect x="909.1" y="707.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="912.1" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.17%)</title><rect x="909.1" y="691.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="912.1" y="702.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.17%)</title><rect x="909.1" y="675.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="912.1" y="686.0"></text>
</g>
<g>
<title>Node::find_int_type() const (1 samples, 0.17%)</title><rect x="909.1" y="659.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.1" y="670.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.17%)</title><rect x="911.2" y="787.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.2" y="798.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.17%)</title><rect x="911.2" y="771.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="914.2" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.51%)</title><rect x="913.2" y="819.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.51%)</title><rect x="913.2" y="803.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.17%)</title><rect x="913.2" y="787.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.17%)</title><rect x="913.2" y="771.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.2" y="782.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.17%)</title><rect x="913.2" y="755.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="916.2" y="766.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.17%)</title><rect x="913.2" y="739.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.2" y="750.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.17%)</title><rect x="913.2" y="723.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.2" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.34%)</title><rect x="915.2" y="787.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="918.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.17%)</title><rect x="915.2" y="771.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="918.2" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.17%)</title><rect x="915.2" y="755.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.2" y="766.0"></text>
</g>
<g>
<title>shrI_rReg_immNode::ideal_Opcode() const (1 samples, 0.17%)</title><rect x="917.2" y="771.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.2" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.17%)</title><rect x="919.2" y="819.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (1 samples, 0.17%)</title><rect x="919.2" y="803.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="922.2" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (54 samples, 9.25%)</title><rect x="921.3" y="819.0" width="109.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="924.3" y="830.0">PhaseChaitin:..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.17%)</title><rect x="921.3" y="803.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="924.3" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.17%)</title><rect x="923.3" y="803.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.3" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.34%)</title><rect x="925.3" y="803.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="928.3" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.17%)</title><rect x="925.3" y="787.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.3" y="798.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.17%)</title><rect x="927.3" y="787.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.3" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.86%)</title><rect x="929.3" y="803.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.3" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.17%)</title><rect x="933.4" y="787.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="936.4" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.34%)</title><rect x="935.4" y="787.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.86%)</title><rect x="939.5" y="803.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.17%)</title><rect x="947.5" y="787.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.17%)</title><rect x="947.5" y="771.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="950.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 2.05%)</title><rect x="949.6" y="803.0" width="24.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.6" y="814.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.17%)</title><rect x="949.6" y="787.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="952.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::assign_high_score_to_immediate_copies(Block*, Node*, LRG&amp;, unsigned int, unsigned int) (1 samples, 0.17%)</title><rect x="951.6" y="787.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 1.20%)</title><rect x="953.6" y="787.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.6" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (4 samples, 0.68%)</title><rect x="955.6" y="771.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.6" y="782.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.34%)</title><rect x="963.7" y="771.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="966.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.51%)</title><rect x="967.7" y="787.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.7" y="798.0"></text>
</g>
<g>
<title>RegMask::find_first_elem() const (1 samples, 0.17%)</title><rect x="969.8" y="771.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="972.8" y="782.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.17%)</title><rect x="971.8" y="771.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="974.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.34%)</title><rect x="973.8" y="803.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.17%)</title><rect x="975.8" y="787.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="978.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.68%)</title><rect x="977.8" y="803.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.8" y="814.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.17%)</title><rect x="979.9" y="787.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="982.9" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.17%)</title><rect x="981.9" y="787.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.9" y="798.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.17%)</title><rect x="983.9" y="787.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.9" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.17%)</title><rect x="983.9" y="771.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (10 samples, 1.71%)</title><rect x="985.9" y="803.0" width="20.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.9" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (8 samples, 1.37%)</title><rect x="990.0" y="787.0" width="16.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.0" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.17%)</title><rect x="1006.1" y="803.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.1" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.17%)</title><rect x="1006.1" y="787.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.1" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.51%)</title><rect x="1008.2" y="803.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1011.2" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (3 samples, 0.51%)</title><rect x="1008.2" y="787.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1011.2" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.34%)</title><rect x="1008.2" y="771.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1011.2" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.17%)</title><rect x="1012.2" y="771.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.2" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.51%)</title><rect x="1014.2" y="803.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.2" y="814.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.17%)</title><rect x="1016.2" y="787.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.2" y="798.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="1018.3" y="787.0" width="2.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1021.3" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.51%)</title><rect x="1020.3" y="803.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1023.3" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.34%)</title><rect x="1022.3" y="787.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1025.3" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.17%)</title><rect x="1026.3" y="803.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.3" y="814.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.17%)</title><rect x="1026.3" y="787.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.3" y="798.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.17%)</title><rect x="1026.3" y="771.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.3" y="782.0"></text>
</g>
<g>
<title>madvise (1 samples, 0.17%)</title><rect x="1026.3" y="755.0" width="2.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1029.3" y="766.0"></text>
</g>
<g>
<title>storeImmLNode::ideal_Opcode() const (1 samples, 0.17%)</title><rect x="1028.4" y="803.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.4" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 3.60%)</title><rect x="1030.4" y="835.0" width="42.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.4" y="846.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.17%)</title><rect x="1030.4" y="819.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.4" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.17%)</title><rect x="1030.4" y="803.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.4" y="814.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.17%)</title><rect x="1030.4" y="787.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.4" y="798.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.17%)</title><rect x="1030.4" y="771.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.4" y="782.0"></text>
</g>
<g>
<title>Node_Array::map(unsigned int, Node*) (1 samples, 0.17%)</title><rect x="1030.4" y="755.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.4" y="766.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.17%)</title><rect x="1030.4" y="739.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1033.4" y="750.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="1030.4" y="723.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1033.4" y="734.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (7 samples, 1.20%)</title><rect x="1032.4" y="819.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.4" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 1.20%)</title><rect x="1032.4" y="803.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.4" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.17%)</title><rect x="1032.4" y="787.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1035.4" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.17%)</title><rect x="1032.4" y="771.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.4" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.17%)</title><rect x="1032.4" y="755.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.4" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::policy_maximally_unroll(PhaseIdealLoop*) const (1 samples, 0.17%)</title><rect x="1032.4" y="739.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.4" y="750.0"></text>
</g>
<g>
<title>Node_Array::at(unsigned int) const (1 samples, 0.17%)</title><rect x="1032.4" y="723.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.4" y="734.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.17%)</title><rect x="1034.4" y="787.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.4" y="798.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="1034.4" y="771.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.4" y="782.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="1034.4" y="755.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1037.4" y="766.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="1034.4" y="739.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.51%)</title><rect x="1036.4" y="787.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1039.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (3 samples, 0.51%)</title><rect x="1036.4" y="771.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1039.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.34%)</title><rect x="1036.4" y="755.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1039.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.17%)</title><rect x="1036.4" y="739.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.17%)</title><rect x="1036.4" y="723.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1039.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.17%)</title><rect x="1036.4" y="707.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.17%)</title><rect x="1036.4" y="691.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.17%)</title><rect x="1036.4" y="675.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.4" y="686.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.17%)</title><rect x="1036.4" y="659.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1039.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.17%)</title><rect x="1038.5" y="739.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1041.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom(unsigned int) const (1 samples, 0.17%)</title><rect x="1040.5" y="755.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.17%)</title><rect x="1040.5" y="739.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.5" y="750.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.17%)</title><rect x="1040.5" y="723.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1043.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.17%)</title><rect x="1042.5" y="787.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.17%)</title><rect x="1042.5" y="771.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.17%)</title><rect x="1042.5" y="755.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1045.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.17%)</title><rect x="1042.5" y="739.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.5" y="750.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.17%)</title><rect x="1042.5" y="723.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.17%)</title><rect x="1044.5" y="787.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.5" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.17%)</title><rect x="1044.5" y="771.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.17%)</title><rect x="1044.5" y="755.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.5" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.17%)</title><rect x="1044.5" y="739.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.5" y="750.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.17%)</title><rect x="1046.5" y="819.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.17%)</title><rect x="1046.5" y="803.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.5" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.17%)</title><rect x="1046.5" y="787.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.34%)</title><rect x="1048.6" y="819.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.34%)</title><rect x="1048.6" y="803.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.17%)</title><rect x="1050.6" y="787.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.17%)</title><rect x="1050.6" y="771.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.6" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append_if_missing(PointsToNode* const&amp;) (1 samples, 0.17%)</title><rect x="1050.6" y="755.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1053.6" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.17%)</title><rect x="1052.6" y="819.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.6" y="830.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseGVN*) const (1 samples, 0.17%)</title><rect x="1052.6" y="803.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1055.6" y="814.0"></text>
</g>
<g>
<title>SubNode::Value_common(PhaseTransform*) const (1 samples, 0.17%)</title><rect x="1052.6" y="787.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.6" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.17%)</title><rect x="1054.6" y="819.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1057.6" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.17%)</title><rect x="1054.6" y="803.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.17%)</title><rect x="1056.6" y="819.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.6" y="830.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.17%)</title><rect x="1056.6" y="803.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1059.6" y="814.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.17%)</title><rect x="1056.6" y="787.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.6" y="798.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="1056.6" y="771.0" width="2.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1059.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (5 samples, 0.86%)</title><rect x="1058.7" y="819.0" width="10.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.7" y="830.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.17%)</title><rect x="1060.7" y="803.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.7" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.17%)</title><rect x="1060.7" y="787.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.7" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.17%)</title><rect x="1060.7" y="771.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1063.7" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.17%)</title><rect x="1060.7" y="755.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1063.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.17%)</title><rect x="1060.7" y="739.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.17%)</title><rect x="1060.7" y="723.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.17%)</title><rect x="1060.7" y="707.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.7" y="718.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.17%)</title><rect x="1060.7" y="691.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1063.7" y="702.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.17%)</title><rect x="1060.7" y="675.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.7" y="686.0"></text>
</g>
<g>
<title>Compile::grow_node_notes(GrowableArray&lt;Node_Notes*&gt;*, int) (1 samples, 0.17%)</title><rect x="1060.7" y="659.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.7" y="670.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="1060.7" y="643.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1063.7" y="654.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.17%)</title><rect x="1062.7" y="803.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.7" y="814.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.17%)</title><rect x="1062.7" y="787.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1065.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.17%)</title><rect x="1064.7" y="803.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.17%)</title><rect x="1064.7" y="787.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1067.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.17%)</title><rect x="1064.7" y="771.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.17%)</title><rect x="1064.7" y="755.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.17%)</title><rect x="1064.7" y="739.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.17%)</title><rect x="1064.7" y="723.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1067.7" y="734.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.17%)</title><rect x="1064.7" y="707.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.7" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.17%)</title><rect x="1066.7" y="803.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.17%)</title><rect x="1066.7" y="787.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.17%)</title><rect x="1066.7" y="771.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.17%)</title><rect x="1066.7" y="755.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.17%)</title><rect x="1066.7" y="739.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1069.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update_helper(Node*) const (1 samples, 0.17%)</title><rect x="1066.7" y="723.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.17%)</title><rect x="1068.8" y="819.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1071.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.17%)</title><rect x="1068.8" y="803.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.8" y="814.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.17%)</title><rect x="1068.8" y="787.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.8" y="798.0"></text>
</g>
<g>
<title>IfNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.17%)</title><rect x="1068.8" y="771.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.8" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.17%)</title><rect x="1070.8" y="819.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1073.8" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.17%)</title><rect x="1070.8" y="803.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.8" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.17%)</title><rect x="1070.8" y="787.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.8" y="798.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.17%)</title><rect x="1070.8" y="771.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.8" y="782.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.17%)</title><rect x="1072.8" y="835.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1075.8" y="846.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.17%)</title><rect x="1072.8" y="819.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.8" y="830.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.17%)</title><rect x="1072.8" y="803.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.8" y="814.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.17%)</title><rect x="1072.8" y="787.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.8" y="798.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.17%)</title><rect x="1072.8" y="771.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1075.8" y="782.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.17%)</title><rect x="1074.8" y="835.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.8" y="846.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (2 samples, 0.34%)</title><rect x="1076.8" y="835.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.8" y="846.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (2 samples, 0.34%)</title><rect x="1076.8" y="819.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.8" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (2 samples, 0.34%)</title><rect x="1076.8" y="803.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.8" y="814.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="1076.8" y="787.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.8" y="798.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.17%)</title><rect x="1076.8" y="771.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.8" y="782.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.17%)</title><rect x="1078.9" y="787.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.9" y="798.0"></text>
</g>
<g>
<title>JVMState::JVMState(int) (1 samples, 0.17%)</title><rect x="1080.9" y="835.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.20%)</title><rect x="1082.9" y="835.0" width="14.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.20%)</title><rect x="1082.9" y="819.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.20%)</title><rect x="1082.9" y="803.0" width="14.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.20%)</title><rect x="1082.9" y="787.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_anewarray() (1 samples, 0.17%)</title><rect x="1082.9" y="771.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.9" y="782.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.17%)</title><rect x="1082.9" y="755.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.9" y="766.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.17%)</title><rect x="1082.9" y="739.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.9" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.17%)</title><rect x="1082.9" y="723.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.9" y="734.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.17%)</title><rect x="1082.9" y="707.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.9" y="718.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.17%)</title><rect x="1082.9" y="691.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.9" y="702.0"></text>
</g>
<g>
<title>TypeAry::ary_must_be_exact() const (1 samples, 0.17%)</title><rect x="1082.9" y="675.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.86%)</title><rect x="1084.9" y="771.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.9" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.17%)</title><rect x="1084.9" y="755.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.9" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.17%)</title><rect x="1084.9" y="739.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.9" y="750.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.17%)</title><rect x="1084.9" y="723.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.17%)</title><rect x="1084.9" y="707.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.17%)</title><rect x="1084.9" y="691.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.17%)</title><rect x="1084.9" y="675.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.9" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.17%)</title><rect x="1084.9" y="659.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.9" y="670.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.17%)</title><rect x="1084.9" y="643.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.51%)</title><rect x="1087.0" y="755.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.51%)</title><rect x="1087.0" y="739.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.51%)</title><rect x="1087.0" y="723.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.51%)</title><rect x="1087.0" y="707.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1090.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.51%)</title><rect x="1087.0" y="691.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.0" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.34%)</title><rect x="1087.0" y="675.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.0" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.34%)</title><rect x="1087.0" y="659.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.0" y="670.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (2 samples, 0.34%)</title><rect x="1087.0" y="643.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.0" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.34%)</title><rect x="1087.0" y="627.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.0" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.17%)</title><rect x="1087.0" y="611.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.0" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.17%)</title><rect x="1087.0" y="595.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.0" y="606.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.17%)</title><rect x="1087.0" y="579.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.0" y="590.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.17%)</title><rect x="1087.0" y="563.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.0" y="574.0"></text>
</g>
<g>
<title>ciMethodBlocks::make_block_at(int) (1 samples, 0.17%)</title><rect x="1087.0" y="547.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.0" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.17%)</title><rect x="1089.0" y="611.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.0" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.17%)</title><rect x="1089.0" y="595.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.0" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.17%)</title><rect x="1089.0" y="579.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.17%)</title><rect x="1091.0" y="675.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.17%)</title><rect x="1091.0" y="659.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.17%)</title><rect x="1091.0" y="643.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.17%)</title><rect x="1091.0" y="627.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.17%)</title><rect x="1091.0" y="611.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.0" y="622.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.17%)</title><rect x="1091.0" y="595.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.0" y="606.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.17%)</title><rect x="1091.0" y="579.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.0" y="590.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.17%)</title><rect x="1091.0" y="563.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1094.0" y="574.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.17%)</title><rect x="1091.0" y="547.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.0" y="558.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.17%)</title><rect x="1091.0" y="531.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1094.0" y="542.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="1091.0" y="515.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1094.0" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.17%)</title><rect x="1093.0" y="755.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.0" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.17%)</title><rect x="1093.0" y="739.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.0" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.17%)</title><rect x="1093.0" y="723.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.17%)</title><rect x="1093.0" y="707.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.17%)</title><rect x="1093.0" y="691.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.17%)</title><rect x="1093.0" y="675.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.17%)</title><rect x="1093.0" y="659.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.17%)</title><rect x="1093.0" y="643.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1096.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.17%)</title><rect x="1093.0" y="627.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.17%)</title><rect x="1093.0" y="611.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.17%)</title><rect x="1093.0" y="595.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.0" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.17%)</title><rect x="1093.0" y="579.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.0" y="590.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.17%)</title><rect x="1093.0" y="563.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.0" y="574.0"></text>
</g>
<g>
<title>int GrowableArray&lt;CallGenerator*&gt;::find_sorted&lt;IntrinsicDescPair*, &amp;(IntrinsicDescPair::compare(IntrinsicDescPair* const&amp;, CallGenerator* const&amp;))&gt;(IntrinsicDescPair* const&amp;, bool&amp;) (1 samples, 0.17%)</title><rect x="1093.0" y="547.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.17%)</title><rect x="1095.0" y="771.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.17%)</title><rect x="1095.0" y="755.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.0" y="766.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.17%)</title><rect x="1095.0" y="739.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.0" y="750.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.17%)</title><rect x="1097.1" y="835.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.1" y="846.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.17%)</title><rect x="1097.1" y="819.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.1" y="830.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.17%)</title><rect x="1097.1" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.1" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.34%)</title><rect x="1099.1" y="835.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.1" y="846.0"></text>
</g>
<g>
<title>CodeBuffer::free_blob() (1 samples, 0.17%)</title><rect x="1099.1" y="819.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.1" y="830.0"></text>
</g>
<g>
<title>BufferBlob::free(BufferBlob*) (1 samples, 0.17%)</title><rect x="1099.1" y="803.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.1" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromUnknown::ThreadInVMfromUnknown() (1 samples, 0.17%)</title><rect x="1099.1" y="787.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.1" y="798.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.17%)</title><rect x="1101.1" y="819.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.1" y="830.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.17%)</title><rect x="1101.1" y="803.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1104.1" y="814.0"></text>
</g>
<g>
<title>Compile::~Compile() (1 samples, 0.17%)</title><rect x="1103.1" y="851.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.1" y="862.0"></text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.17%)</title><rect x="1103.1" y="835.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.1" y="846.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.17%)</title><rect x="1103.1" y="819.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.1" y="830.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.17%)</title><rect x="1103.1" y="803.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.1" y="814.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.17%)</title><rect x="1103.1" y="787.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.1" y="798.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.17%)</title><rect x="1103.1" y="771.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1106.1" y="782.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.17%)</title><rect x="1103.1" y="755.0" width="2.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1106.1" y="766.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 0.17%)</title><rect x="1105.1" y="867.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.1" y="878.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.17%)</title><rect x="1105.1" y="851.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.1" y="862.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.17%)</title><rect x="1105.1" y="835.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.1" y="846.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.17%)</title><rect x="1105.1" y="819.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1108.1" y="830.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.17%)</title><rect x="1105.1" y="803.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.1" y="814.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.17%)</title><rect x="1105.1" y="787.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1108.1" y="798.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.17%)</title><rect x="1105.1" y="771.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1108.1" y="782.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.17%)</title><rect x="1105.1" y="755.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1108.1" y="766.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.17%)</title><rect x="1105.1" y="739.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1108.1" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (22 samples, 3.77%)</title><rect x="1107.2" y="867.0" width="44.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.2" y="878.0">Comp..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (22 samples, 3.77%)</title><rect x="1107.2" y="851.0" width="44.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.2" y="862.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_method() (22 samples, 3.77%)</title><rect x="1107.2" y="835.0" width="44.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.2" y="846.0">Comp..</text>
</g>
<g>
<title>Compilation::compile_java_method() (21 samples, 3.60%)</title><rect x="1107.2" y="819.0" width="42.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.2" y="830.0">Comp..</text>
</g>
<g>
<title>Compilation::build_hir() (7 samples, 1.20%)</title><rect x="1107.2" y="803.0" width="14.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.2" y="814.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.17%)</title><rect x="1107.2" y="787.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.2" y="798.0"></text>
</g>
<g>
<title>Instruction::as_LoadField() (1 samples, 0.17%)</title><rect x="1107.2" y="771.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.2" y="782.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.68%)</title><rect x="1109.2" y="787.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.2" y="798.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.68%)</title><rect x="1109.2" y="771.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.2" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.68%)</title><rect x="1109.2" y="755.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.2" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.68%)</title><rect x="1109.2" y="739.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.2" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.68%)</title><rect x="1109.2" y="723.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.2" y="734.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.17%)</title><rect x="1109.2" y="707.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.2" y="718.0"></text>
</g>
<g>
<title>ValueStack::setup_phi_for_local(BlockBegin*, int) (1 samples, 0.17%)</title><rect x="1109.2" y="691.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.2" y="702.0"></text>
</g>
<g>
<title>Phi::Phi(ValueType*, BlockBegin*, int) (1 samples, 0.17%)</title><rect x="1109.2" y="675.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.51%)</title><rect x="1111.2" y="707.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.2" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.34%)</title><rect x="1111.2" y="691.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.2" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.34%)</title><rect x="1111.2" y="675.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.2" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.17%)</title><rect x="1111.2" y="659.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.2" y="670.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.17%)</title><rect x="1111.2" y="643.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.2" y="654.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.17%)</title><rect x="1111.2" y="627.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.2" y="638.0"></text>
</g>
<g>
<title>GrowableArray&lt;int&gt;::GrowableArray(int, int, int const&amp;, bool, MemoryType) (1 samples, 0.17%)</title><rect x="1111.2" y="611.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.2" y="622.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.17%)</title><rect x="1113.2" y="659.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.2" y="670.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.17%)</title><rect x="1113.2" y="643.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.2" y="654.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.17%)</title><rect x="1113.2" y="627.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.2" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.17%)</title><rect x="1115.2" y="691.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.2" y="702.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.17%)</title><rect x="1115.2" y="675.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.2" y="686.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.17%)</title><rect x="1117.3" y="787.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.3" y="798.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.17%)</title><rect x="1117.3" y="771.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.3" y="782.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_all() (1 samples, 0.17%)</title><rect x="1117.3" y="755.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.3" y="766.0"></text>
</g>
<g>
<title>NullCheckEliminator::iterate_one(BlockBegin*) (1 samples, 0.17%)</title><rect x="1117.3" y="739.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.3" y="750.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (1 samples, 0.17%)</title><rect x="1119.3" y="787.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.3" y="798.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="771.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.3" y="782.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="755.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.3" y="766.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="739.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.3" y="750.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="723.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.3" y="734.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="707.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.3" y="718.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="691.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.3" y="702.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="675.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.3" y="686.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="659.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.3" y="670.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="643.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.3" y="654.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="627.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="638.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="611.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.3" y="622.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="595.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.3" y="606.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.17%)</title><rect x="1119.3" y="579.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.3" y="590.0"></text>
</g>
<g>
<title>CriticalEdgeFinder::block_do(BlockBegin*) (1 samples, 0.17%)</title><rect x="1119.3" y="563.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.3" y="574.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (5 samples, 0.86%)</title><rect x="1121.3" y="803.0" width="10.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.3" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (5 samples, 0.86%)</title><rect x="1121.3" y="787.0" width="10.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.3" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (3 samples, 0.51%)</title><rect x="1121.3" y="771.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.3" y="782.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (2 samples, 0.34%)</title><rect x="1121.3" y="755.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.3" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (2 samples, 0.34%)</title><rect x="1121.3" y="739.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.3" y="750.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (2 samples, 0.34%)</title><rect x="1121.3" y="723.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.3" y="734.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (2 samples, 0.34%)</title><rect x="1121.3" y="707.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.3" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.17%)</title><rect x="1121.3" y="691.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.3" y="702.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int(int) (1 samples, 0.17%)</title><rect x="1121.3" y="675.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.3" y="686.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.17%)</title><rect x="1123.3" y="691.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.3" y="702.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.17%)</title><rect x="1123.3" y="675.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.3" y="686.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.17%)</title><rect x="1123.3" y="659.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.3" y="670.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.17%)</title><rect x="1123.3" y="643.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.3" y="654.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.17%)</title><rect x="1123.3" y="627.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.3" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.17%)</title><rect x="1123.3" y="611.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.3" y="622.0"></text>
</g>
<g>
<title>NewInstanceStub::emit_code(LIR_Assembler*) (1 samples, 0.17%)</title><rect x="1125.3" y="755.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.3" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.17%)</title><rect x="1125.3" y="739.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.3" y="750.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.17%)</title><rect x="1125.3" y="723.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.3" y="734.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.17%)</title><rect x="1125.3" y="707.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.3" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.17%)</title><rect x="1125.3" y="691.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.3" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.17%)</title><rect x="1125.3" y="675.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.3" y="686.0"></text>
</g>
<g>
<title>DIR_Chunk* GrowableArray&lt;DIR_Chunk*&gt;::insert_sorted&lt;&amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;) (1 samples, 0.17%)</title><rect x="1125.3" y="659.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.3" y="670.0"></text>
</g>
<g>
<title>int GrowableArray&lt;DIR_Chunk*&gt;::find_sorted&lt;DIR_Chunk*, &amp;(DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;))&gt;(DIR_Chunk* const&amp;, bool&amp;) (1 samples, 0.17%)</title><rect x="1125.3" y="643.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.3" y="654.0"></text>
</g>
<g>
<title>DIR_Chunk::compare(DIR_Chunk* const&amp;, DIR_Chunk* const&amp;) (1 samples, 0.17%)</title><rect x="1125.3" y="627.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.3" y="638.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.17%)</title><rect x="1127.4" y="771.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.4" y="782.0"></text>
</g>
<g>
<title>MonitorExitStub::emit_code(LIR_Assembler*) (1 samples, 0.17%)</title><rect x="1129.4" y="771.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.4" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (8 samples, 1.37%)</title><rect x="1131.4" y="803.0" width="16.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.4" y="814.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.34%)</title><rect x="1131.4" y="787.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.4" y="798.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.34%)</title><rect x="1131.4" y="771.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.4" y="782.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.17%)</title><rect x="1131.4" y="755.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.4" y="766.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.17%)</title><rect x="1131.4" y="739.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.4" y="750.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.17%)</title><rect x="1131.4" y="723.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.4" y="734.0"></text>
</g>
<g>
<title>GrowableArray&lt;ResolveNode*&gt;::raw_at_put_grow(int, ResolveNode* const&amp;, ResolveNode* const&amp;) (1 samples, 0.17%)</title><rect x="1131.4" y="707.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.4" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::do_If(If*) (1 samples, 0.17%)</title><rect x="1133.4" y="755.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.4" y="766.0"></text>
</g>
<g>
<title>LIRGenerator::profile_branch(If*, Instruction::Condition) (1 samples, 0.17%)</title><rect x="1133.4" y="739.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.4" y="750.0"></text>
</g>
<g>
<title>LIR_OprFact::intptrConst(long) (1 samples, 0.17%)</title><rect x="1133.4" y="723.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.4" y="734.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (6 samples, 1.03%)</title><rect x="1135.4" y="787.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.4" y="798.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.17%)</title><rect x="1135.4" y="771.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.4" y="782.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.17%)</title><rect x="1135.4" y="755.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="766.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.17%)</title><rect x="1135.4" y="739.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.4" y="750.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.17%)</title><rect x="1135.4" y="723.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.4" y="734.0"></text>
</g>
<g>
<title>LinearScanWalker::spill_collect_inactive_any(Interval*) (1 samples, 0.17%)</title><rect x="1135.4" y="707.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.4" y="718.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (3 samples, 0.51%)</title><rect x="1137.5" y="771.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.5" y="782.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (3 samples, 0.51%)</title><rect x="1137.5" y="755.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.5" y="766.0"></text>
</g>
<g>
<title>LinearScan::color_lir_opr(LIR_OprDesc*, int, LIR_OpVisitState::OprMode) (1 samples, 0.17%)</title><rect x="1137.5" y="739.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.5" y="750.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.17%)</title><rect x="1139.5" y="739.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.5" y="750.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.17%)</title><rect x="1139.5" y="723.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="734.0"></text>
</g>
<g>
<title>LinearScan::append_scope_value(int, Instruction*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.17%)</title><rect x="1139.5" y="707.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.5" y="718.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.17%)</title><rect x="1141.5" y="739.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.5" y="750.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.17%)</title><rect x="1141.5" y="723.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.5" y="734.0"></text>
</g>
<g>
<title>IntervalWalker::activate_current() (1 samples, 0.17%)</title><rect x="1141.5" y="707.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.5" y="718.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.34%)</title><rect x="1143.5" y="771.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.5" y="782.0"></text>
</g>
<g>
<title>LIRGenerator::is_vreg_flag_set(int, LIRGenerator::VregFlag) (1 samples, 0.17%)</title><rect x="1145.5" y="755.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.5" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.17%)</title><rect x="1147.6" y="803.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.6" y="814.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.17%)</title><rect x="1147.6" y="787.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.6" y="798.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.17%)</title><rect x="1147.6" y="771.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.6" y="782.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (1 samples, 0.17%)</title><rect x="1147.6" y="755.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.6" y="766.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.17%)</title><rect x="1147.6" y="739.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.6" y="750.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.17%)</title><rect x="1149.6" y="819.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.6" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.17%)</title><rect x="1149.6" y="803.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.6" y="814.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.17%)</title><rect x="1149.6" y="787.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.6" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::pcs_size() (1 samples, 0.17%)</title><rect x="1149.6" y="771.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.6" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::last_pc() (1 samples, 0.17%)</title><rect x="1149.6" y="755.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.6" y="766.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.17%)</title><rect x="1151.6" y="867.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.6" y="878.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.17%)</title><rect x="1151.6" y="851.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.6" y="862.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.17%)</title><rect x="1151.6" y="835.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.6" y="846.0"></text>
</g>
<g>
<title>ThreadCritical::~ThreadCritical() (1 samples, 0.17%)</title><rect x="1151.6" y="819.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.6" y="830.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.17%)</title><rect x="1151.6" y="803.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1154.6" y="814.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.17%)</title><rect x="1151.6" y="787.0" width="2.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1154.6" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (9 samples, 1.54%)</title><rect x="1153.6" y="883.0" width="18.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.6" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (9 samples, 1.54%)</title><rect x="1153.6" y="867.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.6" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (8 samples, 1.37%)</title><rect x="1153.6" y="851.0" width="16.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (8 samples, 1.37%)</title><rect x="1153.6" y="835.0" width="16.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 1.37%)</title><rect x="1153.6" y="819.0" width="16.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1156.6" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.17%)</title><rect x="1169.8" y="851.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.17%)</title><rect x="1171.8" y="899.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.17%)</title><rect x="1171.8" y="883.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="894.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.17%)</title><rect x="1171.8" y="867.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.17%)</title><rect x="1171.8" y="851.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.17%)</title><rect x="1171.8" y="835.0" width="2.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.34%)</title><rect x="1173.8" y="899.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="910.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.34%)</title><rect x="1173.8" y="883.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.8" y="894.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.34%)</title><rect x="1173.8" y="867.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="878.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.34%)</title><rect x="1173.8" y="851.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1176.8" y="862.0"></text>
</g>
<g>
<title>Method::jmethod_id() (1 samples, 0.17%)</title><rect x="1175.9" y="835.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="846.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.17%)</title><rect x="1177.9" y="931.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.17%)</title><rect x="1177.9" y="915.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="926.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.17%)</title><rect x="1177.9" y="899.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.17%)</title><rect x="1177.9" y="883.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.17%)</title><rect x="1177.9" y="867.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.17%)</title><rect x="1177.9" y="851.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.17%)</title><rect x="1177.9" y="835.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>void WeakProcessor::weak_oops_do&lt;G1STWIsAliveClosure, G1KeepAliveClosure&gt;(WorkGang*, G1STWIsAliveClosure*, G1KeepAliveClosure*, WeakProcessorPhaseTimes*) (1 samples, 0.17%)</title><rect x="1177.9" y="819.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="830.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.17%)</title><rect x="1177.9" y="803.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.17%)</title><rect x="1177.9" y="787.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.17%)</title><rect x="1177.9" y="771.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 0.86%)</title><rect x="1179.9" y="931.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="942.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (5 samples, 0.86%)</title><rect x="1179.9" y="915.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.86%)</title><rect x="1179.9" y="899.0" width="10.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.86%)</title><rect x="1179.9" y="883.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.86%)</title><rect x="1179.9" y="867.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.86%)</title><rect x="1179.9" y="851.0" width="10.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
</g>
</svg>

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (5,812 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>MainKt.main (5 samples, 0.09%)</title><rect x="10.2" y="435.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.2" y="446.0"></text>
</g>
<g>
<title>MainKt.main (5 samples, 0.09%)</title><rect x="10.2" y="419.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.2" y="430.0"></text>
</g>
<g>
<title>StandardSerializer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="10.6" y="403.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.6" y="414.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (2 samples, 0.03%)</title><rect x="10.6" y="387.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.6" y="398.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.&lt;init&gt; (2 samples, 0.03%)</title><rect x="10.6" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.6" y="382.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.07%)</title><rect x="11.8" y="435.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="14.8" y="446.0"></text>
</g>
<g>
<title>Interpreter (3 samples, 0.05%)</title><rect x="11.8" y="419.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="14.8" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (523 samples, 9.00%)</title><rect x="13.0" y="435.0" width="106.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.0" y="446.0">java/lang/Thr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (523 samples, 9.00%)</title><rect x="13.0" y="419.0" width="106.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.0" y="430.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (523 samples, 9.00%)</title><rect x="13.0" y="403.0" width="106.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.0" y="414.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (520 samples, 8.95%)</title><rect x="13.0" y="387.0" width="105.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="398.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (520 samples, 8.95%)</title><rect x="13.0" y="371.0" width="105.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.0" y="382.0">java/util/con..</text>
</g>
<g>
<title>StandardSSTableManager$addTableAsync$1.run (519 samples, 8.93%)</title><rect x="13.2" y="355.0" width="105.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.2" y="366.0">StandardSSTab..</text>
</g>
<g>
<title>StandardSSTableManager.addTable (519 samples, 8.93%)</title><rect x="13.2" y="339.0" width="105.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.2" y="350.0">StandardSSTab..</text>
</g>
<g>
<title>StandardSSTableManager.nextTableFile (2 samples, 0.03%)</title><rect x="13.2" y="323.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="334.0"></text>
</g>
<g>
<title>StandardSerializer.serialize (517 samples, 8.90%)</title><rect x="13.7" y="323.0" width="104.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.7" y="334.0">StandardSeri..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (481 samples, 8.28%)</title><rect x="13.7" y="307.0" width="97.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.7" y="318.0">com/dslplat..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (481 samples, 8.28%)</title><rect x="13.7" y="291.0" width="97.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.7" y="302.0">com/dslplat..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (481 samples, 8.28%)</title><rect x="13.7" y="275.0" width="97.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.7" y="286.0">com/dslplat..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (480 samples, 8.26%)</title><rect x="13.9" y="259.0" width="97.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.9" y="270.0">com/dslplat..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (480 samples, 8.26%)</title><rect x="13.9" y="243.0" width="97.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.9" y="254.0">com/dslplat..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (297 samples, 5.11%)</title><rect x="17.9" y="227.0" width="60.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.9" y="238.0">com/ds..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (296 samples, 5.09%)</title><rect x="17.9" y="211.0" width="60.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.9" y="222.0">com/ds..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (195 samples, 3.36%)</title><rect x="23.2" y="195.0" width="39.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.2" y="206.0">com..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (191 samples, 3.29%)</title><rect x="24.0" y="179.0" width="38.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.0" y="190.0">com..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (190 samples, 3.27%)</title><rect x="24.2" y="163.0" width="38.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.2" y="174.0">com..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (115 samples, 1.98%)</title><rect x="26.6" y="147.0" width="23.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.6" y="158.0">c..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (113 samples, 1.94%)</title><rect x="26.9" y="131.0" width="22.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.9" y="142.0">c..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (32 samples, 0.55%)</title><rect x="39.2" y="115.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.2" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (10 samples, 0.17%)</title><rect x="40.9" y="99.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.9" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (4 samples, 0.07%)</title><rect x="41.9" y="83.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="44.9" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 0.24%)</title><rect x="42.9" y="99.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.9" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (3 samples, 0.05%)</title><rect x="45.7" y="115.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.7" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (2 samples, 0.03%)</title><rect x="45.9" y="99.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.9" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (2 samples, 0.03%)</title><rect x="45.9" y="83.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="48.9" y="94.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (2 samples, 0.03%)</title><rect x="45.9" y="67.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.9" y="78.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (2 samples, 0.03%)</title><rect x="45.9" y="51.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.9" y="62.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (11 samples, 0.19%)</title><rect x="46.3" y="115.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.3" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (9 samples, 0.15%)</title><rect x="46.7" y="99.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.7" y="110.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (9 samples, 0.15%)</title><rect x="46.7" y="83.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.7" y="94.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (9 samples, 0.15%)</title><rect x="46.7" y="67.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.7" y="78.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="48.2" y="51.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.2" y="62.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="48.2" y="35.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.2" y="46.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.10%)</title><rect x="48.6" y="115.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="51.6" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (5 samples, 0.09%)</title><rect x="50.0" y="147.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.0" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (21 samples, 0.36%)</title><rect x="51.0" y="147.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.0" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (21 samples, 0.36%)</title><rect x="51.0" y="131.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.0" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (21 samples, 0.36%)</title><rect x="51.0" y="115.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.0" y="126.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (9 samples, 0.15%)</title><rect x="55.3" y="147.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.3" y="158.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="55.3" y="131.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="58.3" y="142.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="55.3" y="115.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="58.3" y="126.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="55.3" y="99.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="58.3" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="55.3" y="83.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="58.3" y="94.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="55.3" y="67.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="58.3" y="78.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="55.3" y="51.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="58.3" y="62.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (7 samples, 0.12%)</title><rect x="55.7" y="131.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.7" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (5 samples, 0.09%)</title><rect x="56.1" y="115.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.1" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (2 samples, 0.03%)</title><rect x="56.5" y="99.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.5" y="110.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (12 samples, 0.21%)</title><rect x="57.1" y="147.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.1" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (3 samples, 0.05%)</title><rect x="58.9" y="131.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.9" y="142.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (3 samples, 0.05%)</title><rect x="58.9" y="115.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.9" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (16 samples, 0.28%)</title><rect x="59.5" y="147.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.5" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (16 samples, 0.28%)</title><rect x="59.5" y="131.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.5" y="142.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (16 samples, 0.28%)</title><rect x="59.5" y="115.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.5" y="126.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (71 samples, 1.22%)</title><rect x="62.8" y="195.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.8" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.extractActualType (3 samples, 0.05%)</title><rect x="66.4" y="179.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.4" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (42 samples, 0.72%)</title><rect x="67.1" y="179.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.1" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (39 samples, 0.67%)</title><rect x="67.5" y="163.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.5" y="174.0"></text>
</g>
<g>
<title>java/lang/Class.getName (3 samples, 0.05%)</title><rect x="73.1" y="147.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="76.1" y="158.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.14%)</title><rect x="73.8" y="147.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.8" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.14%)</title><rect x="73.8" y="131.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.8" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.07%)</title><rect x="73.8" y="115.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.8" y="126.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.07%)</title><rect x="73.8" y="99.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.8" y="110.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.07%)</title><rect x="73.8" y="83.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.8" y="94.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.03%)</title><rect x="74.2" y="67.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.2" y="78.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.07%)</title><rect x="74.6" y="115.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.10%)</title><rect x="76.0" y="179.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.0" y="190.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.07%)</title><rect x="77.2" y="195.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="80.2" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (93 samples, 1.60%)</title><rect x="78.2" y="227.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.2" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.enlargeOrFlush (91 samples, 1.57%)</title><rect x="78.4" y="211.0" width="18.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.4" y="222.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (91 samples, 1.57%)</title><rect x="78.4" y="195.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.4" y="206.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (91 samples, 1.57%)</title><rect x="78.4" y="179.0" width="18.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.4" y="190.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (86 samples, 1.48%)</title><rect x="78.4" y="163.0" width="17.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.4" y="174.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (86 samples, 1.48%)</title><rect x="78.4" y="147.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.4" y="158.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (86 samples, 1.48%)</title><rect x="78.4" y="131.0" width="17.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="81.4" y="142.0"></text>
</g>
<g>
<title>writeBytes (86 samples, 1.48%)</title><rect x="78.4" y="115.0" width="17.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="81.4" y="126.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="79.0" y="99.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="82.0" y="110.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="79.8" y="99.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="82.8" y="110.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.03%)</title><rect x="79.8" y="83.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="82.8" y="94.0"></text>
</g>
<g>
<title>write (76 samples, 1.31%)</title><rect x="80.5" y="99.0" width="15.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="83.5" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (5 samples, 0.09%)</title><rect x="95.9" y="163.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.9" y="174.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (2 samples, 0.03%)</title><rect x="95.9" y="147.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.9" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (2 samples, 0.03%)</title><rect x="95.9" y="131.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (2 samples, 0.03%)</title><rect x="95.9" y="115.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.03%)</title><rect x="95.9" y="99.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.9" y="110.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="95.9" y="83.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.9" y="94.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="95.9" y="67.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.9" y="78.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="96.3" y="147.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="99.3" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (31 samples, 0.53%)</title><rect x="97.1" y="227.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.1" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (29 samples, 0.50%)</title><rect x="97.5" y="211.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.5" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (23 samples, 0.40%)</title><rect x="98.7" y="195.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.7" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (11 samples, 0.19%)</title><rect x="103.4" y="227.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.4" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (10 samples, 0.17%)</title><rect x="103.6" y="211.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.6" y="222.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (6 samples, 0.10%)</title><rect x="104.4" y="195.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.4" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (26 samples, 0.45%)</title><rect x="105.8" y="227.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.8" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (26 samples, 0.45%)</title><rect x="105.8" y="211.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.8" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (26 samples, 0.45%)</title><rect x="105.8" y="195.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="108.8" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (21 samples, 0.36%)</title><rect x="106.8" y="179.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="109.8" y="190.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.&lt;init&gt; (25 samples, 0.43%)</title><rect x="111.3" y="307.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.3" y="318.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open (24 samples, 0.41%)</title><rect x="111.5" y="291.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.5" y="302.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.open0 (24 samples, 0.41%)</title><rect x="111.5" y="275.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.5" y="286.0"></text>
</g>
<g>
<title>fileOpen (24 samples, 0.41%)</title><rect x="111.5" y="259.0" width="4.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="114.5" y="270.0"></text>
</g>
<g>
<title>module_mutex (24 samples, 0.41%)</title><rect x="111.5" y="243.0" width="4.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="114.5" y="254.0"></text>
</g>
<g>
<title>kotlin/io/CloseableKt.closeFinally (11 samples, 0.19%)</title><rect x="116.4" y="307.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="119.4" y="318.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.close (11 samples, 0.19%)</title><rect x="116.4" y="291.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.4" y="302.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.closeAll (11 samples, 0.19%)</title><rect x="116.4" y="275.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.4" y="286.0"></text>
</g>
<g>
<title>java/io/FileOutputStream$1.close (11 samples, 0.19%)</title><rect x="116.4" y="259.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="119.4" y="270.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close (11 samples, 0.19%)</title><rect x="116.4" y="243.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="119.4" y="254.0"></text>
</g>
<g>
<title>java/io/FileDescriptor.close0 (11 samples, 0.19%)</title><rect x="116.4" y="227.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="119.4" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.19%)</title><rect x="116.4" y="211.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="119.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 0.05%)</title><rect x="118.6" y="387.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="121.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.03%)</title><rect x="118.8" y="371.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.03%)</title><rect x="118.8" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="121.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="118.8" y="339.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="121.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="118.8" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.8" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.03%)</title><rect x="118.8" y="307.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="121.8" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.03%)</title><rect x="118.8" y="291.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="121.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="118.8" y="275.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="121.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializeAgentPropertiesToByteArray (3 samples, 0.05%)</title><rect x="119.2" y="435.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/vm/VMSupport.serializePropertiesToByteArray (3 samples, 0.05%)</title><rect x="119.2" y="419.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.2" y="430.0"></text>
</g>
<g>
<title>java/util/Properties.store (3 samples, 0.05%)</title><rect x="119.2" y="403.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.2" y="414.0"></text>
</g>
<g>
<title>java/util/Properties.store0 (3 samples, 0.05%)</title><rect x="119.2" y="387.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.2" y="398.0"></text>
</g>
<g>
<title>java/util/Date.toString (3 samples, 0.05%)</title><rect x="119.2" y="371.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.2" y="382.0"></text>
</g>
<g>
<title>java/util/TimeZone.getDisplayName (2 samples, 0.03%)</title><rect x="119.4" y="355.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="366.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameUtility.retrieveDisplayName (2 samples, 0.03%)</title><rect x="119.4" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="350.0"></text>
</g>
<g>
<title>sun/util/locale/provider/TimeZoneNameUtility.retrieveDisplayNamesImpl (2 samples, 0.03%)</title><rect x="119.4" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.4" y="334.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObject (2 samples, 0.03%)</title><rect x="119.4" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.4" y="318.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleServiceProviderPool.getLocalizedObjectImpl (2 samples, 0.03%)</title><rect x="119.4" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.4" y="302.0"></text>
</g>
<g>
<title>kotlin/concurrent/ThreadsKt$thread$thread$1.run (5,040 samples, 86.72%)</title><rect x="119.8" y="435.0" width="1023.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="122.8" y="446.0">kotlin/concurrent/ThreadsKt$thread$thread$1.run</text>
</g>
<g>
<title>MainKt$main$1.invoke (5,040 samples, 86.72%)</title><rect x="119.8" y="419.0" width="1023.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.8" y="430.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt$main$1.invoke (5,040 samples, 86.72%)</title><rect x="119.8" y="403.0" width="1023.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.8" y="414.0">MainKt$main$1.invoke</text>
</g>
<g>
<title>MainKt.test (5,039 samples, 86.70%)</title><rect x="120.0" y="387.0" width="1023.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="123.0" y="398.0">MainKt.test</text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (3 samples, 0.05%)</title><rect x="127.6" y="371.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="130.6" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.03%)</title><rect x="127.6" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="130.6" y="366.0"></text>
</g>
<g>
<title>StandardLogStructuredMergeTree.put (4,890 samples, 84.14%)</title><rect x="128.4" y="371.0" width="992.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.4" y="382.0">StandardLogStructuredMergeTree.put</text>
</g>
<g>
<title>StandardMemTable.put (327 samples, 5.63%)</title><rect x="130.2" y="355.0" width="66.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.2" y="366.0">Standar..</text>
</g>
<g>
<title>java/util/TreeMap.put (325 samples, 5.59%)</title><rect x="130.6" y="339.0" width="66.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.6" y="350.0">java/ut..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="160.8" y="323.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="163.8" y="334.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (25 samples, 0.43%)</title><rect x="161.3" y="323.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (24 samples, 0.41%)</title><rect x="161.5" y="307.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="164.5" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (148 samples, 2.55%)</title><rect x="166.5" y="323.0" width="30.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.5" y="334.0">ja..</text>
</g>
<g>
<title>java/util/TreeMap.rotateLeft (4 samples, 0.07%)</title><rect x="168.2" y="307.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.2" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (136 samples, 2.34%)</title><rect x="169.0" y="307.0" width="27.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.0" y="318.0">j..</text>
</g>
<g>
<title>StandardMemTable.size (7 samples, 0.12%)</title><rect x="196.6" y="355.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.6" y="366.0"></text>
</g>
<g>
<title>StandardSSTableManager.addTableAsync (4 samples, 0.07%)</title><rect x="198.0" y="355.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (4 samples, 0.07%)</title><rect x="198.0" y="339.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.07%)</title><rect x="198.0" y="323.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 0.07%)</title><rect x="198.0" y="307.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 0.07%)</title><rect x="198.0" y="291.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.05%)</title><rect x="198.2" y="275.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.05%)</title><rect x="198.2" y="259.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="201.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.05%)</title><rect x="198.2" y="243.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.05%)</title><rect x="198.2" y="227.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.2" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.05%)</title><rect x="198.2" y="211.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="201.2" y="222.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.05%)</title><rect x="198.2" y="195.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="201.2" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.05%)</title><rect x="198.2" y="179.0" width="0.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="201.2" y="190.0"></text>
</g>
<g>
<title>StandardWriteAheadLogManager.append (4,543 samples, 78.17%)</title><rect x="198.8" y="355.0" width="922.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.8" y="366.0">StandardWriteAheadLogManager.append</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (413 samples, 7.11%)</title><rect x="199.8" y="339.0" width="83.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.8" y="350.0">com/dslpl..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (373 samples, 6.42%)</title><rect x="200.2" y="323.0" width="75.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.2" y="334.0">com/dslp..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (225 samples, 3.87%)</title><rect x="204.5" y="307.0" width="45.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.5" y="318.0">com/..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson$3.write (218 samples, 3.75%)</title><rect x="205.9" y="291.0" width="44.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.9" y="302.0">com/..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serializeMap (218 samples, 3.75%)</title><rect x="205.9" y="275.0" width="44.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.9" y="286.0">com/..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (143 samples, 2.46%)</title><rect x="210.4" y="259.0" width="29.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.4" y="270.0">co..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.serialize (142 samples, 2.44%)</title><rect x="210.4" y="243.0" width="28.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.4" y="254.0">co..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (51 samples, 0.88%)</title><rect x="222.4" y="227.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.4" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (9 samples, 0.15%)</title><rect x="224.8" y="211.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.8" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (3 samples, 0.05%)</title><rect x="226.0" y="195.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (30 samples, 0.52%)</title><rect x="226.6" y="211.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.6" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (11 samples, 0.19%)</title><rect x="232.7" y="227.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.7" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter$13.write (4 samples, 0.07%)</title><rect x="234.1" y="211.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.1" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serializeNullable (4 samples, 0.07%)</title><rect x="234.1" y="195.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.1" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (4 samples, 0.07%)</title><rect x="234.1" y="179.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.1" y="190.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.serialize (4 samples, 0.07%)</title><rect x="234.1" y="163.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.1" y="174.0"></text>
</g>
<g>
<title>com/dslplatform/json/NumberConverter.writeFirstBuf (3 samples, 0.05%)</title><rect x="234.3" y="147.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.3" y="158.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (11 samples, 0.19%)</title><rect x="235.0" y="227.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.0" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter$2.write (8 samples, 0.14%)</title><rect x="235.6" y="211.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.6" y="222.0"></text>
</g>
<g>
<title>com/dslplatform/json/StringConverter.serializeNullable (8 samples, 0.14%)</title><rect x="235.6" y="195.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.6" y="206.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (8 samples, 0.14%)</title><rect x="235.6" y="179.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.6" y="190.0"></text>
</g>
<g>
<title>itable stub (10 samples, 0.17%)</title><rect x="237.2" y="227.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="240.2" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeByte (3 samples, 0.05%)</title><rect x="239.4" y="259.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.4" y="270.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.writeString (12 samples, 0.21%)</title><rect x="240.0" y="259.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.0" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (13 samples, 0.22%)</title><rect x="242.5" y="259.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.5" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (13 samples, 0.22%)</title><rect x="242.5" y="243.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.5" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (11 samples, 0.19%)</title><rect x="242.9" y="227.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.9" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (8 samples, 0.14%)</title><rect x="245.1" y="259.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.1" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="245.1" y="243.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="248.1" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="245.1" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="248.1" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="245.1" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="248.1" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="245.1" y="195.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="248.1" y="206.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="245.1" y="179.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="248.1" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="245.1" y="163.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="248.1" y="174.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="245.1" y="147.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="248.1" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.&lt;init&gt; (6 samples, 0.10%)</title><rect x="245.5" y="243.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.5" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.&lt;init&gt; (4 samples, 0.07%)</title><rect x="245.9" y="227.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.9" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (5 samples, 0.09%)</title><rect x="246.7" y="259.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (12 samples, 0.21%)</title><rect x="247.7" y="259.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (12 samples, 0.21%)</title><rect x="247.7" y="243.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.7" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (10 samples, 0.17%)</title><rect x="248.2" y="227.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.2" y="238.0"></text>
</g>
<g>
<title>com/dslplatform/json/DslJson.tryFindWriter (106 samples, 1.82%)</title><rect x="250.2" y="307.0" width="21.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.2" y="318.0">c..</text>
</g>
<g>
<title>com/dslplatform/json/DslJson.lookupFromFactories (84 samples, 1.45%)</title><rect x="252.4" y="291.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.4" y="302.0"></text>
</g>
<g>
<title>com/dslplatform/json/ExternalConverterAnalyzer.tryFindConverter (71 samples, 1.22%)</title><rect x="254.9" y="275.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Class.getName (9 samples, 0.15%)</title><rect x="263.6" y="259.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashSet.add (19 samples, 0.33%)</title><rect x="265.4" y="259.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.4" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.put (19 samples, 0.33%)</title><rect x="265.4" y="243.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.4" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (19 samples, 0.33%)</title><rect x="265.4" y="227.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 0.19%)</title><rect x="269.5" y="291.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.5" y="302.0"></text>
</g>
<g>
<title>itable stub (21 samples, 0.36%)</title><rect x="271.7" y="307.0" width="4.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="274.7" y="318.0"></text>
</g>
<g>
<title>com/dslplatform/json/JsonWriter.flush (14 samples, 0.24%)</title><rect x="276.0" y="323.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.0" y="334.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (13 samples, 0.22%)</title><rect x="276.2" y="307.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.2" y="318.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (13 samples, 0.22%)</title><rect x="276.2" y="291.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.2" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (13 samples, 0.22%)</title><rect x="276.2" y="275.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.2" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (6 samples, 0.10%)</title><rect x="276.8" y="259.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.8" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (6 samples, 0.10%)</title><rect x="276.8" y="243.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (6 samples, 0.10%)</title><rect x="276.8" y="227.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3 samples, 0.05%)</title><rect x="277.4" y="211.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.03%)</title><rect x="277.6" y="195.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.03%)</title><rect x="277.6" y="179.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.6" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.03%)</title><rect x="277.6" y="163.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.6" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.07%)</title><rect x="278.0" y="259.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="281.0" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (24 samples, 0.41%)</title><rect x="278.8" y="323.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.14%)</title><rect x="282.1" y="307.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.1" y="318.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (4,067 samples, 69.98%)</title><rect x="283.7" y="339.0" width="825.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.7" y="350.0">java/io/BufferedOutputStream.flush</text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (4,065 samples, 69.94%)</title><rect x="284.1" y="323.0" width="825.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.1" y="334.0">java/io/BufferedOutputStream.flushBuffer</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (4,061 samples, 69.87%)</title><rect x="284.9" y="307.0" width="824.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.9" y="318.0">java/nio/channels/Channels$1.write</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (4,044 samples, 69.58%)</title><rect x="288.1" y="291.0" width="821.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.1" y="302.0">java/nio/channels/Channels.writeFully</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (4,044 samples, 69.58%)</title><rect x="288.1" y="275.0" width="821.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.1" y="286.0">java/nio/channels/Channels.writeFullyImpl</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (4,034 samples, 69.41%)</title><rect x="290.2" y="259.0" width="819.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.2" y="270.0">sun/nio/ch/FileChannelImpl.write</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (2 samples, 0.03%)</title><rect x="291.6" y="243.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (4,006 samples, 68.93%)</title><rect x="292.0" y="243.0" width="813.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.0" y="254.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (10 samples, 0.17%)</title><rect x="292.6" y="227.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.6" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (10 samples, 0.17%)</title><rect x="292.6" y="211.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (3 samples, 0.05%)</title><rect x="293.6" y="195.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="294.2" y="195.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.2" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (2 samples, 0.03%)</title><rect x="294.2" y="179.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.2" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (3,919 samples, 67.43%)</title><rect x="294.8" y="227.0" width="795.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.8" y="238.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (3,919 samples, 67.43%)</title><rect x="294.8" y="211.0" width="795.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.8" y="222.0">sun/nio/ch/FileDispatcherImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (3,919 samples, 67.43%)</title><rect x="294.8" y="195.0" width="795.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.8" y="206.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (18 samples, 0.31%)</title><rect x="299.3" y="179.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="302.3" y="190.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.07%)</title><rect x="302.2" y="163.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="305.2" y="174.0"></text>
</g>
<g>
<title>convertReturnVal (8 samples, 0.14%)</title><rect x="303.0" y="179.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="306.0" y="190.0"></text>
</g>
<g>
<title>write (3,870 samples, 66.59%)</title><rect x="304.8" y="179.0" width="785.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="307.8" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (73 samples, 1.26%)</title><rect x="1090.5" y="227.0" width="14.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1093.5" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.15%)</title><rect x="1091.1" y="211.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1094.1" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.10%)</title><rect x="1091.1" y="195.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1094.1" y="206.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="1092.3" y="195.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1095.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (61 samples, 1.05%)</title><rect x="1093.0" y="211.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1096.0" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (15 samples, 0.26%)</title><rect x="1100.7" y="195.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1103.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (7 samples, 0.12%)</title><rect x="1103.9" y="195.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1106.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (19 samples, 0.33%)</title><rect x="1105.3" y="243.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1108.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (19 samples, 0.33%)</title><rect x="1105.3" y="227.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.3" y="238.0"></text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.03%)</title><rect x="1107.2" y="211.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1110.2" y="222.0"></text>
</g>
<g>
<title>pthread_self (7 samples, 0.12%)</title><rect x="1107.8" y="211.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1110.8" y="222.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (4 samples, 0.07%)</title><rect x="1109.4" y="339.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.4" y="350.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (38 samples, 0.65%)</title><rect x="1110.2" y="339.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1113.2" y="350.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (34 samples, 0.58%)</title><rect x="1111.0" y="323.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1114.0" y="334.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (34 samples, 0.58%)</title><rect x="1111.0" y="307.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1114.0" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (33 samples, 0.57%)</title><rect x="1111.2" y="291.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1114.2" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (15 samples, 0.26%)</title><rect x="1112.0" y="275.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1115.0" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (15 samples, 0.26%)</title><rect x="1112.0" y="259.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1115.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (15 samples, 0.26%)</title><rect x="1112.0" y="243.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1115.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.15%)</title><rect x="1113.1" y="227.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1116.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.10%)</title><rect x="1113.1" y="211.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.10%)</title><rect x="1113.1" y="195.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1116.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.05%)</title><rect x="1114.3" y="211.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1117.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.05%)</title><rect x="1114.3" y="195.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1117.3" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (2 samples, 0.03%)</title><rect x="1114.5" y="179.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1117.5" y="190.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="1115.1" y="275.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1118.1" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.21%)</title><rect x="1115.5" y="275.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1118.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (16 samples, 0.28%)</title><rect x="1117.9" y="339.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1120.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (15 samples, 0.26%)</title><rect x="1118.1" y="323.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1121.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (15 samples, 0.26%)</title><rect x="1118.1" y="307.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1121.1" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.22%)</title><rect x="1118.5" y="291.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1121.5" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (8 samples, 0.14%)</title><rect x="1119.5" y="275.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1122.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1121.4" y="371.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1124.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.05%)</title><rect x="1121.8" y="371.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1124.8" y="382.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.05%)</title><rect x="1121.8" y="355.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1124.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.03%)</title><rect x="1122.4" y="371.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="1122.4" y="355.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1125.4" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1122.4" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1125.4" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (25 samples, 0.43%)</title><rect x="1122.8" y="371.0" width="5.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1125.8" y="382.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.mapOf (75 samples, 1.29%)</title><rect x="1127.9" y="371.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1130.9" y="382.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.toMap (72 samples, 1.24%)</title><rect x="1128.5" y="355.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1131.5" y="366.0"></text>
</g>
<g>
<title>kotlin/collections/MapsKt__MapsKt.putAll (72 samples, 1.24%)</title><rect x="1128.5" y="339.0" width="14.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (65 samples, 1.12%)</title><rect x="1128.7" y="323.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (64 samples, 1.10%)</title><rect x="1128.9" y="307.0" width="13.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1131.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (10 samples, 0.17%)</title><rect x="1131.7" y="291.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1134.7" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (9 samples, 0.15%)</title><rect x="1133.8" y="291.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1136.8" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (31 samples, 0.53%)</title><rect x="1135.6" y="291.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1138.6" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1140.5" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.5" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.linkNodeLast (5 samples, 0.09%)</title><rect x="1140.9" y="275.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1143.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.07%)</title><rect x="1141.9" y="323.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1144.9" y="334.0"></text>
</g>
<g>
<title>kotlin/Pair.component1 (2 samples, 0.03%)</title><rect x="1142.7" y="323.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1145.7" y="334.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndCallPremain (2 samples, 0.03%)</title><rect x="1143.1" y="435.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1146.1" y="446.0"></text>
</g>
<g>
<title>sun/instrument/InstrumentationImpl.loadClassAndStartAgent (2 samples, 0.03%)</title><rect x="1143.1" y="419.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1146.1" y="430.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.03%)</title><rect x="1143.1" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1146.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.03%)</title><rect x="1143.1" y="387.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1146.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.03%)</title><rect x="1143.1" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1146.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.03%)</title><rect x="1143.1" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1146.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.03%)</title><rect x="1143.1" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1146.1" y="350.0"></text>
</g>
<g>
<title>thread_start (229 samples, 3.94%)</title><rect x="1143.5" y="435.0" width="46.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1146.5" y="446.0">thre..</text>
</g>
<g>
<title>_pthread_start (229 samples, 3.94%)</title><rect x="1143.5" y="419.0" width="46.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1146.5" y="430.0">_pth..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (229 samples, 3.94%)</title><rect x="1143.5" y="403.0" width="46.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1146.5" y="414.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (229 samples, 3.94%)</title><rect x="1143.5" y="387.0" width="46.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.5" y="398.0">Thre..</text>
</g>
<g>
<title>ConcurrentGCThread::run() (22 samples, 0.38%)</title><rect x="1143.5" y="371.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.5" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (22 samples, 0.38%)</title><rect x="1143.5" y="355.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.5" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (10 samples, 0.17%)</title><rect x="1143.5" y="339.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="350.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (10 samples, 0.17%)</title><rect x="1143.5" y="323.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (10 samples, 0.17%)</title><rect x="1143.5" y="307.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.5" y="318.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (8 samples, 0.14%)</title><rect x="1143.7" y="291.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.7" y="302.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (7 samples, 0.12%)</title><rect x="1143.7" y="275.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.7" y="286.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (5 samples, 0.09%)</title><rect x="1143.9" y="259.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.9" y="270.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (4 samples, 0.07%)</title><rect x="1144.1" y="243.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.1" y="254.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (12 samples, 0.21%)</title><rect x="1145.5" y="339.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.5" y="350.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (12 samples, 0.21%)</title><rect x="1145.5" y="323.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.5" y="334.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (12 samples, 0.21%)</title><rect x="1145.5" y="307.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.5" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (12 samples, 0.21%)</title><rect x="1145.5" y="291.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.19%)</title><rect x="1145.5" y="275.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1148.5" y="286.0"></text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 0.24%)</title><rect x="1148.0" y="371.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.0" y="382.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1148.0" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.0" y="366.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (5 samples, 0.09%)</title><rect x="1148.4" y="355.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.4" y="366.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 0.09%)</title><rect x="1148.4" y="339.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.4" y="350.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (5 samples, 0.09%)</title><rect x="1148.4" y="323.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.4" y="334.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (5 samples, 0.09%)</title><rect x="1148.4" y="307.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.4" y="318.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (4 samples, 0.07%)</title><rect x="1148.6" y="291.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.6" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (4 samples, 0.07%)</title><rect x="1148.6" y="275.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.6" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.07%)</title><rect x="1148.6" y="259.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1151.6" y="270.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (7 samples, 0.12%)</title><rect x="1149.4" y="355.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.4" y="366.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (7 samples, 0.12%)</title><rect x="1149.4" y="339.0" width="1.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1152.4" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (148 samples, 2.55%)</title><rect x="1150.8" y="371.0" width="30.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.8" y="382.0">Ja..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (148 samples, 2.55%)</title><rect x="1150.8" y="355.0" width="30.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="366.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (145 samples, 2.49%)</title><rect x="1150.8" y="339.0" width="29.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="350.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (139 samples, 2.39%)</title><rect x="1150.8" y="323.0" width="28.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.8" y="334.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (119 samples, 2.05%)</title><rect x="1150.8" y="307.0" width="24.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.8" y="318.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (119 samples, 2.05%)</title><rect x="1150.8" y="291.0" width="24.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.8" y="302.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (78 samples, 1.34%)</title><rect x="1150.8" y="275.0" width="15.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="286.0"></text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.05%)</title><rect x="1150.8" y="259.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="270.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.03%)</title><rect x="1151.0" y="243.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.0" y="254.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.03%)</title><rect x="1151.4" y="259.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="270.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.09%)</title><rect x="1151.8" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.8" y="270.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.03%)</title><rect x="1151.8" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="254.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.05%)</title><rect x="1152.2" y="243.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.2" y="254.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.03%)</title><rect x="1152.4" y="227.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.4" y="238.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.12%)</title><rect x="1153.0" y="259.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.0" y="270.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.12%)</title><rect x="1153.0" y="243.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.0" y="254.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.05%)</title><rect x="1153.5" y="227.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.5" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (58 samples, 1.00%)</title><rect x="1154.7" y="259.0" width="11.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.7" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.03%)</title><rect x="1155.5" y="243.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.09%)</title><rect x="1156.1" y="243.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.1" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (19 samples, 0.33%)</title><rect x="1157.1" y="243.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.1" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (7 samples, 0.12%)</title><rect x="1158.1" y="227.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.1" y="238.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (2 samples, 0.03%)</title><rect x="1158.7" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="222.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1159.1" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.1" y="222.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.07%)</title><rect x="1159.7" y="227.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.7" y="238.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.12%)</title><rect x="1161.2" y="243.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.2" y="254.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (3 samples, 0.05%)</title><rect x="1161.8" y="227.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.8" y="238.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.05%)</title><rect x="1161.8" y="211.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="222.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.15%)</title><rect x="1162.6" y="243.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.6" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.09%)</title><rect x="1163.2" y="227.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="238.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.05%)</title><rect x="1165.0" y="243.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="254.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.05%)</title><rect x="1165.8" y="243.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.8" y="254.0"></text>
</g>
<g>
<title>Compile::Optimize() (34 samples, 0.58%)</title><rect x="1166.7" y="275.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.7" y="286.0"></text>
</g>
<g>
<title>Compile::optimize_loops(PhaseIterGVN&amp;, LoopOptsMode) (8 samples, 0.14%)</title><rect x="1166.9" y="259.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (8 samples, 0.14%)</title><rect x="1166.9" y="243.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.9" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1167.1" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1167.5" y="227.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.03%)</title><rect x="1167.9" y="227.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.03%)</title><rect x="1167.9" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="222.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.07%)</title><rect x="1168.9" y="259.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.9" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (11 samples, 0.19%)</title><rect x="1169.7" y="259.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1170.5" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.5" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (2 samples, 0.03%)</title><rect x="1170.5" y="227.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.03%)</title><rect x="1171.1" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.1" y="254.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.09%)</title><rect x="1171.9" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.9" y="270.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.07%)</title><rect x="1172.1" y="243.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.1" y="254.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (2 samples, 0.03%)</title><rect x="1172.3" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.3" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.10%)</title><rect x="1173.6" y="275.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.10%)</title><rect x="1173.6" y="259.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.10%)</title><rect x="1173.6" y="243.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.10%)</title><rect x="1173.6" y="227.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.09%)</title><rect x="1173.6" y="211.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1173.6" y="195.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="1173.6" y="179.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="1173.6" y="163.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="1173.6" y="147.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="1173.6" y="131.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1173.6" y="115.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1173.6" y="99.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1173.6" y="83.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1173.6" y="67.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.6" y="78.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (17 samples, 0.29%)</title><rect x="1175.4" y="307.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.4" y="318.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (17 samples, 0.29%)</title><rect x="1175.4" y="291.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="302.0"></text>
</g>
<g>
<title>Compilation::compile_method() (17 samples, 0.29%)</title><rect x="1175.4" y="275.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.4" y="286.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (16 samples, 0.28%)</title><rect x="1175.4" y="259.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.4" y="270.0"></text>
</g>
<g>
<title>Compilation::build_hir() (7 samples, 0.12%)</title><rect x="1175.4" y="243.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.4" y="254.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (7 samples, 0.12%)</title><rect x="1175.4" y="227.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="238.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (7 samples, 0.12%)</title><rect x="1175.4" y="211.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.4" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (7 samples, 0.12%)</title><rect x="1175.4" y="195.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.4" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (5 samples, 0.09%)</title><rect x="1175.6" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.6" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (5 samples, 0.09%)</title><rect x="1175.6" y="163.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.6" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.07%)</title><rect x="1175.8" y="147.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="158.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.05%)</title><rect x="1175.8" y="131.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="142.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 0.05%)</title><rect x="1175.8" y="115.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="126.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (6 samples, 0.10%)</title><rect x="1177.0" y="243.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="254.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.03%)</title><rect x="1177.0" y="227.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="238.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (2 samples, 0.03%)</title><rect x="1177.0" y="211.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.0" y="222.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (4 samples, 0.07%)</title><rect x="1177.4" y="227.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="238.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (2 samples, 0.03%)</title><rect x="1178.2" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="254.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (2 samples, 0.03%)</title><rect x="1178.2" y="227.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="238.0"></text>
</g>
<g>
<title>CompileQueue::get() (6 samples, 0.10%)</title><rect x="1179.0" y="323.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.10%)</title><rect x="1179.0" y="307.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.0" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (6 samples, 0.10%)</title><rect x="1179.0" y="291.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.0" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 0.10%)</title><rect x="1179.0" y="275.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.09%)</title><rect x="1179.2" y="259.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1182.2" y="270.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.03%)</title><rect x="1180.5" y="339.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="350.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.03%)</title><rect x="1180.5" y="323.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="334.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.03%)</title><rect x="1180.5" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.03%)</title><rect x="1180.5" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.03%)</title><rect x="1180.5" y="275.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1183.5" y="286.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.14%)</title><rect x="1180.9" y="371.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.14%)</title><rect x="1180.9" y="355.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (7 samples, 0.12%)</title><rect x="1181.1" y="339.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (6 samples, 0.10%)</title><rect x="1181.3" y="323.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (6 samples, 0.10%)</title><rect x="1181.3" y="307.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (6 samples, 0.10%)</title><rect x="1181.3" y="291.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (2 samples, 0.03%)</title><rect x="1181.5" y="275.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (2 samples, 0.03%)</title><rect x="1181.5" y="259.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.5" y="270.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire(ThreadLocalAllocStats*) (2 samples, 0.03%)</title><rect x="1181.5" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (3 samples, 0.05%)</title><rect x="1181.9" y="275.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>WatcherThread::run() (37 samples, 0.64%)</title><rect x="1182.5" y="371.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.03%)</title><rect x="1182.5" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>StatSampler::collect_sample() (2 samples, 0.03%)</title><rect x="1182.5" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="350.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (34 samples, 0.58%)</title><rect x="1183.1" y="355.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (33 samples, 0.57%)</title><rect x="1183.1" y="339.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (33 samples, 0.57%)</title><rect x="1183.1" y="323.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.1" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (32 samples, 0.55%)</title><rect x="1183.3" y="307.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (29 samples, 0.50%)</title><rect x="1183.3" y="291.0" width="5.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1186.3" y="302.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.03%)</title><rect x="1189.2" y="291.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1192.2" y="302.0"></text>
</g>
</g>
</svg>

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'me.champeau.gradle.jmh' version '0.5.2'
}

jmh {
    include = [
    //            ".*SequentialReads.*"
    //".*SequentialWrites.*"
    ".*RandomReads.*"
    ]
    duplicateClassesStrategy = 'warn'
    jvmArgs = ["-XX:+PreserveFramePointer"]
}

test {
    useJUnitPlatform()
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

jar {
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

dependencies {
    implementation("ch.qos.logback:logback-classic:1.2.3")
    implementation 'io.github.microutils:kotlin-logging-jvm:2.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.1.10"
    testImplementation "io.mockk:mockk:1.10.2"
    testImplementation(platform('org.junit:junit-bom:5.3.1'))

    jmh 'org.openjdk.jmh:jmh-core:0.9'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:0.9'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xopt-in=kotlin.ExperimentalStdlibApi",
                                      "-Xopt-in=kotlin.ExperimentalUnsignedTypes",
                                      "-Xinline-classes"]
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xopt-in=kotlin.ExperimentalStdlibApi",
                                      "-Xopt-in=kotlin.ExperimentalUnsignedTypes",
                                      "-Xinline-classes"]
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }

    jvmArgs = [
            "-XX:MaxDirectMemorySize=512m", "-Xmx512m", "-XX:-HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=/Users/will/work/lsm/heap.hprof"
    ]
}

